{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "context",
	"title": "Context Usage",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The Context component provides a comprehensive view of AI model usage, displaying token consumption, costs, and performance metrics through an interactive hover card interface.",
	"registryDependencies": [
		"hover-card",
		"progress"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n  import * as HoverCard from \"$COMPONENTS$/ui/hover-card/index.js\";\r\n  import {\r\n    ContextClass,\r\n    setContextValue,\r\n    type ContextSchema,\r\n  } from \"./context-context.svelte\";\r\n\r\n  interface Props extends ContextSchema {\r\n    children?: import(\"svelte\").Snippet;\r\n    // HoverCard props\r\n    closeDelay?: number;\r\n    openDelay?: number;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let {\r\n    usedTokens,\r\n    maxTokens,\r\n    usage,\r\n    modelId,\r\n    children,\r\n    closeDelay = 0,\r\n    openDelay = 0,\r\n    ...props\r\n  }: Props = $props();\r\n\r\n  const contextInstance = new ContextClass({\r\n    usedTokens,\r\n    maxTokens,\r\n    usage,\r\n    modelId,\r\n  });\r\n\r\n  // Update context when props change\r\n  $effect(() => {\r\n    contextInstance.usedTokens = usedTokens;\r\n    contextInstance.maxTokens = maxTokens;\r\n    contextInstance.usage = usage;\r\n    contextInstance.modelId = modelId;\r\n  });\r\n\r\n  setContextValue(contextInstance);\r\n</script>\r\n\r\n<HoverCard.Root {openDelay} {closeDelay} {...props}>\r\n  {@render children?.()}\r\n</HoverCard.Root>\r\n",
			"type": "registry:component",
			"target": "ai-elements/context/Context.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { getContextValue, estimateCost } from \"./context-context.svelte.js\";\r\n  import TokensWithCost from \"./TokensWithCost.svelte\";\r\n\r\n  interface Props {\r\n    children?: import(\"svelte\").Snippet;\r\n    class?: string;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let { children, class: className, ...props }: Props = $props();\r\n\r\n  let context = getContextValue();\r\n\r\n  let cacheTokens = $derived.by(() => context.usage?.cachedInputTokens ?? 0);\r\n\r\n  let cacheCostText = $derived.by(() => {\r\n    if (!cacheTokens || !context.modelId) return undefined;\r\n\r\n    const cacheCost = estimateCost({\r\n      modelId: context.modelId,\r\n      usage: { cacheReads: cacheTokens, input: 0, output: 0 },\r\n    }).totalUSD;\r\n\r\n    return new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"USD\",\r\n    }).format(cacheCost);\r\n  });\r\n</script>\r\n\r\n{#if children}\r\n  {@render children?.()}\r\n{:else if cacheTokens}\r\n  <div\r\n    class={cn(\"flex items-center justify-between text-xs\", className)}\r\n    {...props}\r\n  >\r\n    <span class=\"text-muted-foreground\">Cache</span>\r\n    <TokensWithCost tokens={cacheTokens} costText={cacheCostText} />\r\n  </div>\r\n{/if}\r\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextCacheUsage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport HoverCardContent from '$COMPONENTS$/ui/hover-card/hover-card-content.svelte';\r\n\timport { cn } from '$UTILS$';\r\n\r\n\tinterface Props {\r\n\t\tchildren?: import('svelte').Snippet;\r\n\t\tclass?: string;\r\n\t\t[key: string]: any;\r\n\t}\r\n\r\n\tlet { children, class: className, ...props }: Props = $props();\r\n</script>\r\n\r\n<HoverCardContent\r\n\tclass={cn('min-w-[240px] divide-y overflow-hidden p-0', className)}\r\n\t{...props}\r\n>\r\n\t{@render children?.()}\r\n</HoverCardContent>",
			"type": "registry:component",
			"target": "ai-elements/context/ContextContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\tinterface Props {\r\n\t\tchildren?: import('svelte').Snippet;\r\n\t\tclass?: string;\r\n\t\t[key: string]: any;\r\n\t}\r\n\r\n\tlet { children, class: className, ...props }: Props = $props();\r\n</script>\r\n\r\n<div class={cn('w-full p-3', className)} {...props}>\r\n\t{@render children?.()}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/context/ContextContentBody.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { getContextValue, estimateCost } from \"./context-context.svelte.js\";\r\n\r\n  interface Props {\r\n    children?: import(\"svelte\").Snippet;\r\n    class?: string;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let { children, class: className, ...props }: Props = $props();\r\n\r\n  let context = getContextValue();\r\n\r\n  let totalCost = $derived.by(() => {\r\n    const costUSD = context.modelId\r\n      ? estimateCost({\r\n          modelId: context.modelId,\r\n          usage: {\r\n            input: context.usage?.inputTokens ?? 0,\r\n            output: context.usage?.outputTokens ?? 0,\r\n          },\r\n        }).totalUSD\r\n      : undefined;\r\n\r\n    return new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"USD\",\r\n    }).format(costUSD ?? 0);\r\n  });\r\n</script>\r\n\r\n<div\r\n  class={cn(\r\n    \"flex w-full items-center justify-between gap-3 bg-secondary p-3 text-xs\",\r\n    className\r\n  )}\r\n  {...props}\r\n>\r\n  {#if children}\r\n    {@render children?.()}\r\n  {:else}\r\n    <span class=\"text-muted-foreground\">Total cost</span>\r\n    <span>{totalCost}</span>\r\n  {/if}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextContentFooter.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import Progress from '$COMPONENTS$/ui/progress/progress.svelte';\r\n\timport { cn } from '$UTILS$';\r\n\timport { getContextValue, PERCENT_MAX } from './context-context.svelte';\r\n\r\n\tinterface Props {\r\n\t\tchildren?: import('svelte').Snippet;\r\n\t\tclass?: string;\r\n\t\t[key: string]: any;\r\n\t}\r\n\r\n\tlet { children, class: className, ...props }: Props = $props();\r\n\r\n\tconst context = getContextValue();\r\n</script>\r\n\r\n<div class={cn('w-full space-y-2 p-3', className)} {...props}>\r\n\t{#if children}\r\n\t\t{@render children()}\r\n\t{:else}\r\n\t\t<div class=\"flex items-center justify-between gap-3 text-xs\">\r\n\t\t\t<p>{context.displayPercent}</p>\r\n\t\t\t<p class=\"font-mono text-muted-foreground\">\r\n\t\t\t\t{context.usedTokensFormatted} / {context.maxTokensFormatted}\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t\t<div class=\"space-y-2\">\r\n\t\t\t<Progress class=\"bg-muted\" value={context.usedPercent * PERCENT_MAX} />\r\n\t\t</div>\r\n\t{/if}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/context/ContextContentHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { getContextValue, ICON_RADIUS, ICON_VIEWBOX, ICON_CENTER, ICON_STROKE_WIDTH } from './context-context.svelte.js';\r\n\r\n\tconst context = getContextValue();\r\n\tconst { circumference, dashOffset } = $derived({\r\n\t\tcircumference: context.circumference,\r\n\t\tdashOffset: context.dashOffset\r\n\t});\r\n</script>\r\n\r\n<svg\r\n\taria-label=\"Model context usage\"\r\n\theight=\"20\"\r\n\trole=\"img\"\r\n\tstyle=\"color: currentcolor\"\r\n\tviewBox=\"0 0 {ICON_VIEWBOX} {ICON_VIEWBOX}\"\r\n\twidth=\"20\"\r\n>\r\n\t<circle\r\n\t\tcx={ICON_CENTER}\r\n\t\tcy={ICON_CENTER}\r\n\t\tfill=\"none\"\r\n\t\topacity=\"0.25\"\r\n\t\tr={ICON_RADIUS}\r\n\t\tstroke=\"currentColor\"\r\n\t\tstroke-width={ICON_STROKE_WIDTH}\r\n\t/>\r\n\t<circle\r\n\t\tcx={ICON_CENTER}\r\n\t\tcy={ICON_CENTER}\r\n\t\tfill=\"none\"\r\n\t\topacity=\"0.7\"\r\n\t\tr={ICON_RADIUS}\r\n\t\tstroke=\"currentColor\"\r\n\t\tstroke-dasharray=\"{circumference} {circumference}\"\r\n\t\tstroke-dashoffset={dashOffset}\r\n\t\tstroke-linecap=\"round\"\r\n\t\tstroke-width={ICON_STROKE_WIDTH}\r\n\t\tstyle=\"transform-origin: center; transform: rotate(-90deg);\"\r\n\t/>\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/context/ContextIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { getContextValue, estimateCost } from \"./context-context.svelte.js\";\r\n  import TokensWithCost from \"./TokensWithCost.svelte\";\r\n\r\n  interface Props {\r\n    children?: import(\"svelte\").Snippet;\r\n    class?: string;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let { children, class: className, ...props }: Props = $props();\r\n\r\n  let context = getContextValue();\r\n\r\n  let inputTokens = $derived.by(() => context.usage?.inputTokens ?? 0);\r\n\r\n  let inputCostText = $derived.by(() => {\r\n    if (!inputTokens || !context.modelId) return undefined;\r\n\r\n    const inputCost = estimateCost({\r\n      modelId: context.modelId,\r\n      usage: { input: inputTokens, output: 0 },\r\n    }).totalUSD;\r\n\r\n    return new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"USD\",\r\n    }).format(inputCost);\r\n  });\r\n\r\n</script>\r\n\r\n{#if children}\r\n  {@render children()}\r\n{:else if inputTokens}\r\n  <div\r\n    class={cn(\"flex items-center justify-between text-xs\", className)}\r\n    {...props}\r\n  >\r\n    <span class=\"text-muted-foreground\">Input</span>\r\n    <TokensWithCost tokens={inputTokens} costText={inputCostText} />\r\n  </div>\r\n{/if}\r\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextInputUsage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { getContextValue, estimateCost } from \"./context-context.svelte.js\";\r\n  import TokensWithCost from \"./TokensWithCost.svelte\";\r\n\r\n  interface Props {\r\n    children?: import(\"svelte\").Snippet;\r\n    class?: string;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let { children, class: className, ...props }: Props = $props();\r\n\r\n  let context = getContextValue();\r\n\r\n  let outputTokens = $derived.by(() => context.usage?.outputTokens ?? 0);\r\n\r\n  let outputCostText = $derived.by(() => {\r\n    if (!outputTokens || !context.modelId) return undefined;\r\n\r\n    const outputCost = estimateCost({\r\n      modelId: context.modelId,\r\n      usage: { input: 0, output: outputTokens },\r\n    }).totalUSD;\r\n\r\n    return new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"USD\",\r\n    }).format(outputCost);\r\n  });\r\n</script>\r\n\r\n{#if children}\r\n  {@render children()}\r\n{:else if outputTokens}\r\n  <div\r\n    class={cn(\"flex items-center justify-between text-xs\", className)}\r\n    {...props}\r\n  >\r\n    <span class=\"text-muted-foreground\">Output</span>\r\n    <TokensWithCost tokens={outputTokens} costText={outputCostText} />\r\n  </div>\r\n{/if}\r\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextOutputUsage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { getContextValue, estimateCost } from \"./context-context.svelte.js\";\r\n  import TokensWithCost from \"./TokensWithCost.svelte\";\r\n\r\n  interface Props {\r\n    children?: import(\"svelte\").Snippet;\r\n    class?: string;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let { children, class: className, ...props }: Props = $props();\r\n\r\n  let context = getContextValue();\r\n\r\n  let reasoningTokens = $derived.by(() => context.usage?.reasoningTokens ?? 0);\r\n\r\n  let reasoningCostText = $derived.by(() => {\r\n    if (!reasoningTokens || !context.modelId) return undefined;\r\n\r\n    const reasoningCost = estimateCost({\r\n      modelId: context.modelId,\r\n      usage: { reasoningTokens },\r\n    }).totalUSD;\r\n\r\n    return new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"USD\",\r\n    }).format(reasoningCost);\r\n  });\r\n</script>\r\n\r\n{#if children}\r\n  {@render children()}\r\n{:else if reasoningTokens}\r\n  <div\r\n    class={cn(\"flex items-center justify-between text-xs\", className)}\r\n    {...props}\r\n  >\r\n    <span class=\"text-muted-foreground\">Reasoning</span>\r\n    <TokensWithCost tokens={reasoningTokens} costText={reasoningCostText} />\r\n  </div>\r\n{/if}\r\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextReasoningUsage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport Button from '$COMPONENTS$/ui/button/button.svelte';\r\n\timport HoverCardTrigger from '$COMPONENTS$/ui/hover-card/hover-card-trigger.svelte';\r\n\timport ContextIcon from './ContextIcon.svelte';\r\n\timport { getContextValue } from './context-context.svelte';\r\n\r\n\tinterface Props {\r\n\t\tchildren?: import('svelte').Snippet;\r\n\t\tvariant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\r\n\t\tsize?: 'default' | 'sm' | 'lg' | 'icon';\r\n\t\t[key: string]: any;\r\n\t}\r\n\r\n\tlet { children, variant = 'ghost', ...props }: Props = $props();\r\n\r\n\tconst context = getContextValue();\r\n</script>\r\n\r\n<HoverCardTrigger>\r\n\t{#if children}\r\n\t\t{@render children()}\r\n\t{:else}\r\n\t\t<Button type=\"button\" {variant} {...props}>\r\n\t\t\t<span class=\"font-medium text-muted-foreground\">\r\n\t\t\t\t{context.displayPercent}\r\n\t\t\t</span>\r\n\t\t\t<ContextIcon />\r\n\t\t</Button>\r\n\t{/if}\r\n</HoverCardTrigger>",
			"type": "registry:component",
			"target": "ai-elements/context/ContextTrigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  interface Props {\r\n    tokens?: number;\r\n    costText?: string;\r\n  }\r\n\r\n  let { tokens, costText }: Props = $props();\r\n\r\n  let tokensFormatted = $derived.by(() => {\r\n    return tokens === undefined\r\n      ? \"—\"\r\n      : new Intl.NumberFormat(\"en-US\", {\r\n          notation: \"compact\",\r\n        }).format(tokens);\r\n  });\r\n</script>\r\n\r\n<span>\r\n  {tokensFormatted}\r\n  {#if costText}\r\n    <span class=\"ml-2 text-muted-foreground\">• {costText}</span>\r\n  {/if}\r\n</span>\r\n",
			"type": "registry:component",
			"target": "ai-elements/context/TokensWithCost.svelte"
		},
		{
			"content": "import { getContext, setContext } from 'svelte';\r\n\r\nexport const PERCENT_MAX = 100;\r\nexport const ICON_RADIUS = 10;\r\nexport const ICON_VIEWBOX = 24;\r\nexport const ICON_CENTER = 12;\r\nexport const ICON_STROKE_WIDTH = 2;\r\n\r\nexport type LanguageModelUsage = {\r\n\tinputTokens?: number;\r\n\toutputTokens?: number;\r\n\treasoningTokens?: number;\r\n\tcachedInputTokens?: number;\r\n};\r\n\r\nexport type ModelId = string;\r\n\r\nexport type ContextSchema = {\r\n\tusedTokens: number;\r\n\tmaxTokens: number;\r\n\tusage?: LanguageModelUsage;\r\n\tmodelId?: ModelId;\r\n};\r\n\r\nexport class ContextClass {\r\n\tusedTokens = $state(0);\r\n\tmaxTokens = $state(0);\r\n\tusage = $state<LanguageModelUsage | undefined>(undefined);\r\n\tmodelId = $state<ModelId | undefined>(undefined);\r\n\r\n\tconstructor(props: ContextSchema) {\r\n\t\tthis.usedTokens = props.usedTokens;\r\n\t\tthis.maxTokens = props.maxTokens;\r\n\t\tthis.usage = props.usage;\r\n\t\tthis.modelId = props.modelId;\r\n\t}\r\n\r\n\tget usedPercent() {\r\n\t\treturn this.usedTokens / this.maxTokens;\r\n\t}\r\n\r\n\tget displayPercent() {\r\n\t\treturn new Intl.NumberFormat('en-US', {\r\n\t\t\tstyle: 'percent',\r\n\t\t\tmaximumFractionDigits: 1\r\n\t\t}).format(this.usedPercent);\r\n\t}\r\n\r\n\tget usedTokensFormatted() {\r\n\t\treturn new Intl.NumberFormat('en-US', {\r\n\t\t\tnotation: 'compact'\r\n\t\t}).format(this.usedTokens);\r\n\t}\r\n\r\n\tget maxTokensFormatted() {\r\n\t\treturn new Intl.NumberFormat('en-US', {\r\n\t\t\tnotation: 'compact'\r\n\t\t}).format(this.maxTokens);\r\n\t}\r\n\r\n\tget circumference() {\r\n\t\treturn 2 * Math.PI * ICON_RADIUS;\r\n\t}\r\n\r\n\tget dashOffset() {\r\n\t\treturn this.circumference * (1 - this.usedPercent);\r\n\t}\r\n}\r\n\r\nlet CONTEXT_KEY = Symbol('context');\r\n\r\nexport function setContextValue(contextInstance: ContextClass) {\r\n\tsetContext(CONTEXT_KEY, contextInstance);\r\n}\r\n\r\nexport function getContextValue(): ContextClass {\r\n\tconst context = getContext<ContextClass>(CONTEXT_KEY);\r\n\r\n\tif (!context) {\r\n\t\tthrow new Error('Context components must be used within Context');\r\n\t}\r\n\r\n\treturn context;\r\n}\r\n\r\n// Mock function for tokenlens - you'll need to install the actual package\r\nexport function estimateCost(params: {\r\n\tmodelId: string;\r\n\tusage: {\r\n\t\tinput?: number;\r\n\t\toutput?: number;\r\n\t\treasoningTokens?: number;\r\n\t\tcacheReads?: number;\r\n\t}\r\n}) {\r\n\t// Mock implementation - replace with actual tokenlens\r\n\tconst inputCost = (params.usage.input || 0) * 0.00001;\r\n\tconst outputCost = (params.usage.output || 0) * 0.00003;\r\n\tconst reasoningCost = (params.usage.reasoningTokens || 0) * 0.00002;\r\n\tconst cacheCost = (params.usage.cacheReads || 0) * 0.000005;\r\n\r\n\treturn {\r\n\t\ttotalUSD: inputCost + outputCost + reasoningCost + cacheCost\r\n\t};\r\n}",
			"type": "registry:file",
			"target": "ai-elements/context/context-context.svelte.ts"
		},
		{
			"content": "export { default as Context } from './Context.svelte';\r\nexport { default as ContextIcon } from './ContextIcon.svelte';\r\nexport { default as ContextTrigger } from './ContextTrigger.svelte';\r\nexport { default as ContextContent } from './ContextContent.svelte';\r\nexport { default as ContextContentHeader } from './ContextContentHeader.svelte';\r\nexport { default as ContextContentBody } from './ContextContentBody.svelte';\r\nexport { default as ContextContentFooter } from './ContextContentFooter.svelte';\r\nexport { default as ContextInputUsage } from './ContextInputUsage.svelte';\r\nexport { default as ContextOutputUsage } from './ContextOutputUsage.svelte';\r\nexport { default as ContextReasoningUsage } from './ContextReasoningUsage.svelte';\r\nexport { default as ContextCacheUsage } from './ContextCacheUsage.svelte';\r\nexport { default as TokensWithCost } from './TokensWithCost.svelte';\r\n\r\nexport * from './context-context.svelte.js';",
			"type": "registry:file",
			"target": "ai-elements/context/index.ts"
		}
	]
}