{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "context",
	"title": "Context Usage",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The Context component provides a comprehensive view of AI model usage, displaying token consumption, costs, and performance metrics through an interactive hover card interface.",
	"registryDependencies": ["hover-card", "progress", "button"],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport * as HoverCard from \"$COMPONENTS$/ui/hover-card/index.js\";\n\timport { ContextClass, setContextValue, type ContextSchema } from \"./context-context.svelte\";\n\n\tinterface Props extends ContextSchema {\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\t// HoverCard props\n\t\tcloseDelay?: number;\n\t\topenDelay?: number;\n\t\t[key: string]: any;\n\t}\n\n\tlet {\n\t\tusedTokens,\n\t\tmaxTokens,\n\t\tusage,\n\t\tmodelId,\n\t\tchildren,\n\t\tcloseDelay = 0,\n\t\topenDelay = 0,\n\t\t...props\n\t}: Props = $props();\n\n\tconst contextInstance = new ContextClass({\n\t\tusedTokens,\n\t\tmaxTokens,\n\t\tusage,\n\t\tmodelId,\n\t});\n\n\t// Update context when props change\n\t$effect(() => {\n\t\tcontextInstance.usedTokens = usedTokens;\n\t\tcontextInstance.maxTokens = maxTokens;\n\t\tcontextInstance.usage = usage;\n\t\tcontextInstance.modelId = modelId;\n\t});\n\n\tsetContextValue(contextInstance);\n</script>\n\n<HoverCard.Root {openDelay} {closeDelay} {...props}>\n\t{@render children?.()}\n</HoverCard.Root>\n",
			"type": "registry:component",
			"target": "ai-elements/context/Context.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getContextValue, estimateCost } from \"./context-context.svelte.js\";\n\timport TokensWithCost from \"./TokensWithCost.svelte\";\n\n\tinterface Props {\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t}\n\n\tlet { children, class: className, ...props }: Props = $props();\n\n\tlet context = getContextValue();\n\n\tlet cacheTokens = $derived.by(() => context.usage?.cachedInputTokens ?? 0);\n\n\tlet cacheCostText = $derived.by(() => {\n\t\tif (!cacheTokens || !context.modelId) return undefined;\n\n\t\tconst cacheCost = estimateCost({\n\t\t\tmodelId: context.modelId,\n\t\t\tusage: { cacheReads: cacheTokens, input: 0, output: 0 },\n\t\t}).totalUSD;\n\n\t\treturn new Intl.NumberFormat(\"en-US\", {\n\t\t\tstyle: \"currency\",\n\t\t\tcurrency: \"USD\",\n\t\t}).format(cacheCost);\n\t});\n</script>\n\n{#if children}\n\t{@render children?.()}\n{:else if cacheTokens}\n\t<div class={cn(\"flex items-center justify-between text-xs\", className)} {...props}>\n\t\t<span class=\"text-muted-foreground\">Cache</span>\n\t\t<TokensWithCost tokens={cacheTokens} costText={cacheCostText} />\n\t</div>\n{/if}\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextCacheUsage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport HoverCardContent from \"$COMPONENTS$/ui/hover-card/hover-card-content.svelte\";\n\timport { cn } from \"$UTILS$\";\n\n\tinterface Props {\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t}\n\n\tlet { children, class: className, ...props }: Props = $props();\n</script>\n\n<HoverCardContent class={cn(\"min-w-[240px] divide-y overflow-hidden p-0\", className)} {...props}>\n\t{@render children?.()}\n</HoverCardContent>\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\tinterface Props {\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t}\n\n\tlet { children, class: className, ...props }: Props = $props();\n</script>\n\n<div class={cn(\"w-full p-3\", className)} {...props}>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextContentBody.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getContextValue, estimateCost } from \"./context-context.svelte.js\";\n\n\tinterface Props {\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t}\n\n\tlet { children, class: className, ...props }: Props = $props();\n\n\tlet context = getContextValue();\n\n\tlet totalCost = $derived.by(() => {\n\t\tconst costUSD = context.modelId\n\t\t\t? estimateCost({\n\t\t\t\t\tmodelId: context.modelId,\n\t\t\t\t\tusage: {\n\t\t\t\t\t\tinput: context.usage?.inputTokens ?? 0,\n\t\t\t\t\t\toutput: context.usage?.outputTokens ?? 0,\n\t\t\t\t\t},\n\t\t\t\t}).totalUSD\n\t\t\t: undefined;\n\n\t\treturn new Intl.NumberFormat(\"en-US\", {\n\t\t\tstyle: \"currency\",\n\t\t\tcurrency: \"USD\",\n\t\t}).format(costUSD ?? 0);\n\t});\n</script>\n\n<div\n\tclass={cn(\"bg-secondary flex w-full items-center justify-between gap-3 p-3 text-xs\", className)}\n\t{...props}\n>\n\t{#if children}\n\t\t{@render children?.()}\n\t{:else}\n\t\t<span class=\"text-muted-foreground\">Total cost</span>\n\t\t<span>{totalCost}</span>\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextContentFooter.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport Progress from \"$COMPONENTS$/ui/progress/progress.svelte\";\n\timport { cn } from \"$UTILS$\";\n\timport { getContextValue, PERCENT_MAX } from \"./context-context.svelte\";\n\n\tinterface Props {\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t}\n\n\tlet { children, class: className, ...props }: Props = $props();\n\n\tconst context = getContextValue();\n</script>\n\n<div class={cn(\"w-full space-y-2 p-3\", className)} {...props}>\n\t{#if children}\n\t\t{@render children()}\n\t{:else}\n\t\t<div class=\"flex items-center justify-between gap-3 text-xs\">\n\t\t\t<p>{context.displayPercent}</p>\n\t\t\t<p class=\"text-muted-foreground font-mono\">\n\t\t\t\t{context.usedTokensFormatted} / {context.maxTokensFormatted}\n\t\t\t</p>\n\t\t</div>\n\t\t<div class=\"space-y-2\">\n\t\t\t<Progress class=\"bg-muted\" value={context.usedPercent * PERCENT_MAX} />\n\t\t</div>\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextContentHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport {\n\t\tgetContextValue,\n\t\tICON_RADIUS,\n\t\tICON_VIEWBOX,\n\t\tICON_CENTER,\n\t\tICON_STROKE_WIDTH,\n\t} from \"./context-context.svelte.js\";\n\n\tconst context = getContextValue();\n\tconst { circumference, dashOffset } = $derived({\n\t\tcircumference: context.circumference,\n\t\tdashOffset: context.dashOffset,\n\t});\n</script>\n\n<svg\n\taria-label=\"Model context usage\"\n\theight=\"20\"\n\trole=\"img\"\n\tstyle=\"color: currentcolor\"\n\tviewBox=\"0 0 {ICON_VIEWBOX} {ICON_VIEWBOX}\"\n\twidth=\"20\"\n>\n\t<circle\n\t\tcx={ICON_CENTER}\n\t\tcy={ICON_CENTER}\n\t\tfill=\"none\"\n\t\topacity=\"0.25\"\n\t\tr={ICON_RADIUS}\n\t\tstroke=\"currentColor\"\n\t\tstroke-width={ICON_STROKE_WIDTH}\n\t/>\n\t<circle\n\t\tcx={ICON_CENTER}\n\t\tcy={ICON_CENTER}\n\t\tfill=\"none\"\n\t\topacity=\"0.7\"\n\t\tr={ICON_RADIUS}\n\t\tstroke=\"currentColor\"\n\t\tstroke-dasharray=\"{circumference} {circumference}\"\n\t\tstroke-dashoffset={dashOffset}\n\t\tstroke-linecap=\"round\"\n\t\tstroke-width={ICON_STROKE_WIDTH}\n\t\tstyle=\"transform-origin: center; transform: rotate(-90deg);\"\n\t/>\n</svg>\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getContextValue, estimateCost } from \"./context-context.svelte.js\";\n\timport TokensWithCost from \"./TokensWithCost.svelte\";\n\n\tinterface Props {\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t}\n\n\tlet { children, class: className, ...props }: Props = $props();\n\n\tlet context = getContextValue();\n\n\tlet inputTokens = $derived.by(() => context.usage?.inputTokens ?? 0);\n\n\tlet inputCostText = $derived.by(() => {\n\t\tif (!inputTokens || !context.modelId) return undefined;\n\n\t\tconst inputCost = estimateCost({\n\t\t\tmodelId: context.modelId,\n\t\t\tusage: { input: inputTokens, output: 0 },\n\t\t}).totalUSD;\n\n\t\treturn new Intl.NumberFormat(\"en-US\", {\n\t\t\tstyle: \"currency\",\n\t\t\tcurrency: \"USD\",\n\t\t}).format(inputCost);\n\t});\n</script>\n\n{#if children}\n\t{@render children()}\n{:else if inputTokens}\n\t<div class={cn(\"flex items-center justify-between text-xs\", className)} {...props}>\n\t\t<span class=\"text-muted-foreground\">Input</span>\n\t\t<TokensWithCost tokens={inputTokens} costText={inputCostText} />\n\t</div>\n{/if}\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextInputUsage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getContextValue, estimateCost } from \"./context-context.svelte.js\";\n\timport TokensWithCost from \"./TokensWithCost.svelte\";\n\n\tinterface Props {\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t}\n\n\tlet { children, class: className, ...props }: Props = $props();\n\n\tlet context = getContextValue();\n\n\tlet outputTokens = $derived.by(() => context.usage?.outputTokens ?? 0);\n\n\tlet outputCostText = $derived.by(() => {\n\t\tif (!outputTokens || !context.modelId) return undefined;\n\n\t\tconst outputCost = estimateCost({\n\t\t\tmodelId: context.modelId,\n\t\t\tusage: { input: 0, output: outputTokens },\n\t\t}).totalUSD;\n\n\t\treturn new Intl.NumberFormat(\"en-US\", {\n\t\t\tstyle: \"currency\",\n\t\t\tcurrency: \"USD\",\n\t\t}).format(outputCost);\n\t});\n</script>\n\n{#if children}\n\t{@render children()}\n{:else if outputTokens}\n\t<div class={cn(\"flex items-center justify-between text-xs\", className)} {...props}>\n\t\t<span class=\"text-muted-foreground\">Output</span>\n\t\t<TokensWithCost tokens={outputTokens} costText={outputCostText} />\n\t</div>\n{/if}\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextOutputUsage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getContextValue, estimateCost } from \"./context-context.svelte.js\";\n\timport TokensWithCost from \"./TokensWithCost.svelte\";\n\n\tinterface Props {\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t}\n\n\tlet { children, class: className, ...props }: Props = $props();\n\n\tlet context = getContextValue();\n\n\tlet reasoningTokens = $derived.by(() => context.usage?.reasoningTokens ?? 0);\n\n\tlet reasoningCostText = $derived.by(() => {\n\t\tif (!reasoningTokens || !context.modelId) return undefined;\n\n\t\tconst reasoningCost = estimateCost({\n\t\t\tmodelId: context.modelId,\n\t\t\tusage: { reasoningTokens },\n\t\t}).totalUSD;\n\n\t\treturn new Intl.NumberFormat(\"en-US\", {\n\t\t\tstyle: \"currency\",\n\t\t\tcurrency: \"USD\",\n\t\t}).format(reasoningCost);\n\t});\n</script>\n\n{#if children}\n\t{@render children()}\n{:else if reasoningTokens}\n\t<div class={cn(\"flex items-center justify-between text-xs\", className)} {...props}>\n\t\t<span class=\"text-muted-foreground\">Reasoning</span>\n\t\t<TokensWithCost tokens={reasoningTokens} costText={reasoningCostText} />\n\t</div>\n{/if}\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextReasoningUsage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { Button } from \"$COMPONENTS$/ui/button\";\n\timport HoverCardTrigger from \"$COMPONENTS$/ui/hover-card/hover-card-trigger.svelte\";\n\timport ContextIcon from \"./ContextIcon.svelte\";\n\timport { getContextValue } from \"./context-context.svelte\";\n\n\tinterface Props {\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\tvariant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\";\n\t\tsize?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n\t\t[key: string]: any;\n\t}\n\n\tlet { children, variant = \"ghost\", ...props }: Props = $props();\n\n\tconst context = getContextValue();\n</script>\n\n<HoverCardTrigger>\n\t{#if children}\n\t\t{@render children()}\n\t{:else}\n\t\t<Button type=\"button\" {variant} {...props}>\n\t\t\t<span class=\"text-muted-foreground font-medium\">\n\t\t\t\t{context.displayPercent}\n\t\t\t</span>\n\t\t\t<ContextIcon />\n\t\t</Button>\n\t{/if}\n</HoverCardTrigger>\n",
			"type": "registry:component",
			"target": "ai-elements/context/ContextTrigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\tinterface Props {\n\t\ttokens?: number;\n\t\tcostText?: string;\n\t}\n\n\tlet { tokens, costText }: Props = $props();\n\n\tlet tokensFormatted = $derived.by(() => {\n\t\treturn tokens === undefined\n\t\t\t? \"—\"\n\t\t\t: new Intl.NumberFormat(\"en-US\", {\n\t\t\t\t\tnotation: \"compact\",\n\t\t\t\t}).format(tokens);\n\t});\n</script>\n\n<span>\n\t{tokensFormatted}\n\t{#if costText}\n\t\t<span class=\"text-muted-foreground ml-2\">• {costText}</span>\n\t{/if}\n</span>\n",
			"type": "registry:component",
			"target": "ai-elements/context/TokensWithCost.svelte"
		},
		{
			"content": "import { getContext, setContext } from \"svelte\";\n\nexport const PERCENT_MAX = 100;\nexport const ICON_RADIUS = 10;\nexport const ICON_VIEWBOX = 24;\nexport const ICON_CENTER = 12;\nexport const ICON_STROKE_WIDTH = 2;\n\nexport type LanguageModelUsage = {\n\tinputTokens?: number;\n\toutputTokens?: number;\n\treasoningTokens?: number;\n\tcachedInputTokens?: number;\n};\n\nexport type ModelId = string;\n\nexport type ContextSchema = {\n\tusedTokens: number;\n\tmaxTokens: number;\n\tusage?: LanguageModelUsage;\n\tmodelId?: ModelId;\n};\n\nexport class ContextClass {\n\tusedTokens = $state(0);\n\tmaxTokens = $state(0);\n\tusage = $state<LanguageModelUsage | undefined>(undefined);\n\tmodelId = $state<ModelId | undefined>(undefined);\n\n\tconstructor(props: ContextSchema) {\n\t\tthis.usedTokens = props.usedTokens;\n\t\tthis.maxTokens = props.maxTokens;\n\t\tthis.usage = props.usage;\n\t\tthis.modelId = props.modelId;\n\t}\n\n\tget usedPercent() {\n\t\treturn this.usedTokens / this.maxTokens;\n\t}\n\n\tget displayPercent() {\n\t\treturn new Intl.NumberFormat(\"en-US\", {\n\t\t\tstyle: \"percent\",\n\t\t\tmaximumFractionDigits: 1,\n\t\t}).format(this.usedPercent);\n\t}\n\n\tget usedTokensFormatted() {\n\t\treturn new Intl.NumberFormat(\"en-US\", {\n\t\t\tnotation: \"compact\",\n\t\t}).format(this.usedTokens);\n\t}\n\n\tget maxTokensFormatted() {\n\t\treturn new Intl.NumberFormat(\"en-US\", {\n\t\t\tnotation: \"compact\",\n\t\t}).format(this.maxTokens);\n\t}\n\n\tget circumference() {\n\t\treturn 2 * Math.PI * ICON_RADIUS;\n\t}\n\n\tget dashOffset() {\n\t\treturn this.circumference * (1 - this.usedPercent);\n\t}\n}\n\nlet CONTEXT_KEY = Symbol(\"context\");\n\nexport function setContextValue(contextInstance: ContextClass) {\n\tsetContext(CONTEXT_KEY, contextInstance);\n}\n\nexport function getContextValue(): ContextClass {\n\tconst context = getContext<ContextClass>(CONTEXT_KEY);\n\n\tif (!context) {\n\t\tthrow new Error(\"Context components must be used within Context\");\n\t}\n\n\treturn context;\n}\n\n// Mock function for tokenlens - you'll need to install the actual package\nexport function estimateCost(params: {\n\tmodelId: string;\n\tusage: {\n\t\tinput?: number;\n\t\toutput?: number;\n\t\treasoningTokens?: number;\n\t\tcacheReads?: number;\n\t};\n}) {\n\t// Mock implementation - replace with actual tokenlens\n\tconst inputCost = (params.usage.input || 0) * 0.00001;\n\tconst outputCost = (params.usage.output || 0) * 0.00003;\n\tconst reasoningCost = (params.usage.reasoningTokens || 0) * 0.00002;\n\tconst cacheCost = (params.usage.cacheReads || 0) * 0.000005;\n\n\treturn {\n\t\ttotalUSD: inputCost + outputCost + reasoningCost + cacheCost,\n\t};\n}\n",
			"type": "registry:file",
			"target": "ai-elements/context/context-context.svelte.ts"
		},
		{
			"content": "export { default as Context } from \"./Context.svelte\";\nexport { default as ContextIcon } from \"./ContextIcon.svelte\";\nexport { default as ContextTrigger } from \"./ContextTrigger.svelte\";\nexport { default as ContextContent } from \"./ContextContent.svelte\";\nexport { default as ContextContentHeader } from \"./ContextContentHeader.svelte\";\nexport { default as ContextContentBody } from \"./ContextContentBody.svelte\";\nexport { default as ContextContentFooter } from \"./ContextContentFooter.svelte\";\nexport { default as ContextInputUsage } from \"./ContextInputUsage.svelte\";\nexport { default as ContextOutputUsage } from \"./ContextOutputUsage.svelte\";\nexport { default as ContextReasoningUsage } from \"./ContextReasoningUsage.svelte\";\nexport { default as ContextCacheUsage } from \"./ContextCacheUsage.svelte\";\nexport { default as TokensWithCost } from \"./TokensWithCost.svelte\";\n\nexport * from \"./context-context.svelte.js\";\n",
			"type": "registry:file",
			"target": "ai-elements/context/index.ts"
		}
	]
}
