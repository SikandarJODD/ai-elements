{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "web-preview",
	"title": "Web Preview",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The WebPreview component provides an interactive web browser interface for displaying and navigating web content with console logging capabilities.",
	"devDependencies": ["@lucide/svelte@^0.544.0"],
	"registryDependencies": ["button", "input", "tooltip", "collapsible"],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { WebPreviewContext, setWebPreviewContext } from \"./web-preview-context.svelte.js\";\n\n\tlet {\n\t\tdefaultUrl = \"\",\n\t\tonUrlChange,\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: {\n\t\tdefaultUrl?: string;\n\t\tonUrlChange?: (url: string) => void;\n\t\tclass?: string;\n\t\tchildren: import(\"svelte\").Snippet;\n\t\t[key: string]: any;\n\t} = $props();\n\n\t// Create and set the context\n\tlet context = new WebPreviewContext(defaultUrl, onUrlChange);\n\tsetWebPreviewContext(context);\n</script>\n\n<div class={cn(\"bg-card flex size-full flex-col rounded-lg border\", className)} {...restProps}>\n\t{@render children()}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreview.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\n\tlet {\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: {\n\t\tclass?: string;\n\t\tchildren: import(\"svelte\").Snippet;\n\t\t[key: string]: any;\n\t} = $props();\n</script>\n\n<div class={cn(\"flex items-center gap-1 border-b p-2\", className)} {...restProps}>\n\t{@render children()}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewNavigation.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { Button } from \"$COMPONENTS$/ui/button/index.js\";\n\timport {\n\t\tTooltip,\n\t\tTooltipContent,\n\t\tTooltipProvider,\n\t\tTooltipTrigger,\n\t} from \"$COMPONENTS$/ui/tooltip/index.js\";\n\n\tlet {\n\t\tonclick,\n\t\tdisabled,\n\t\ttooltip,\n\t\tchildren,\n\t\t...restProps\n\t}: {\n\t\tonclick?: (event: MouseEvent) => void;\n\t\tdisabled?: boolean;\n\t\ttooltip?: string;\n\t\tchildren: import(\"svelte\").Snippet;\n\t\t[key: string]: any;\n\t} = $props();\n</script>\n\n<TooltipProvider>\n\t<Tooltip>\n\t\t<TooltipTrigger>\n\t\t\t<Button\n\t\t\t\tclass=\"hover:text-foreground h-8 w-8 p-0\"\n\t\t\t\t{disabled}\n\t\t\t\t{onclick}\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"ghost\"\n\t\t\t\t{...restProps}\n\t\t\t>\n\t\t\t\t{@render children()}\n\t\t\t</Button>\n\t\t</TooltipTrigger>\n\t\t<TooltipContent>\n\t\t\t<p>{tooltip}</p>\n\t\t</TooltipContent>\n\t</Tooltip>\n</TooltipProvider>\n",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewNavigationButton.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getWebPreviewContext } from \"./web-preview-context.svelte.js\";\n\n\tlet {\n\t\tvalue = $bindable(\"\"),\n\t\tonchange,\n\t\tonkeydown,\n\t\tclass: className,\n\t\t...restProps\n\t}: {\n\t\tvalue?: string;\n\t\tonchange?: (event: Event) => void;\n\t\tonkeydown?: (event: KeyboardEvent) => void;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t} = $props();\n\n\tlet context = getWebPreviewContext();\n\n\tfunction handleKeyDown(event: KeyboardEvent) {\n\t\tif (event.key === \"Enter\") {\n\t\t\tlet target = event.target as HTMLInputElement;\n\t\t\tcontext.setUrl(target.value);\n\t\t\tif (value !== undefined) {\n\t\t\t\tvalue = target.value;\n\t\t\t}\n\t\t}\n\t\tonkeydown?.(event);\n\t}\n\n\tfunction handleChange(event: Event) {\n\t\tlet target = event.target as HTMLInputElement;\n\t\tif (value !== undefined) {\n\t\t\tvalue = target.value;\n\t\t}\n\t\tonchange?.(event);\n\t}\n\n\tlet displayValue = $derived.by(() => value ?? context.url);\n</script>\n\n<input\n\tclass={cn(\n\t\t\"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-8 flex-1 rounded-md border px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n\t\tclassName\n\t)}\n\tonchange={handleChange}\n\tonkeydown={handleKeyDown}\n\tplaceholder=\"Enter URL...\"\n\tvalue={displayValue}\n\t{...restProps}\n/>\n",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewUrl.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getWebPreviewContext } from \"./web-preview-context.svelte.js\";\n\n\tlet {\n\t\tloading,\n\t\tsrc,\n\t\tclass: className,\n\t\t...restProps\n\t}: {\n\t\tloading?: import(\"svelte\").Snippet;\n\t\tsrc?: string;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t} = $props();\n\n\tlet context = getWebPreviewContext();\n\n\tlet finalSrc = $derived.by(() => (src ?? context.url) || undefined);\n</script>\n\n<div class=\"flex-1\">\n\t<iframe\n\t\tclass={cn(\"size-full\", className)}\n\t\tsandbox=\"allow-scripts allow-same-origin allow-forms allow-popups allow-presentation\"\n\t\tsrc={finalSrc}\n\t\ttitle=\"Preview\"\n\t\t{...restProps}\n\t></iframe>\n\t{#if loading}\n\t\t{@render loading()}\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewBody.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { Button } from \"$COMPONENTS$/ui/button/index.js\";\n\timport {\n\t\tCollapsible,\n\t\tCollapsibleContent,\n\t\tCollapsibleTrigger,\n\t} from \"$COMPONENTS$/ui/collapsible/index.js\";\n\timport { getWebPreviewContext, type LogEntry } from \"./web-preview-context.svelte.js\";\n\timport ChevronDown from \"@lucide/svelte/icons/chevron-down\";\n\n\tlet {\n\t\tlogs = [],\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: {\n\t\tlogs?: LogEntry[];\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\t[key: string]: any;\n\t} = $props();\n\n\tlet context = getWebPreviewContext();\n\n\t// Generate unique IDs for each log entry using crypto.randomUUID()\n\tlet logsWithIds = $derived.by(() =>\n\t\tlogs.map((log) => ({\n\t\t\t...log,\n\t\t\tid: crypto.randomUUID(),\n\t\t}))\n\t);\n</script>\n\n<Collapsible\n\tclass={cn(\"bg-muted/50 border-t font-mono text-sm\", className)}\n\tonOpenChange={context.setConsoleOpen.bind(context)}\n\topen={context.consoleOpen}\n\t{...restProps}\n>\n\t<CollapsibleTrigger>\n\t\t<Button\n\t\t\tclass=\"hover:bg-muted/50 flex w-full items-center justify-between p-4 text-left font-medium\"\n\t\t\tvariant=\"ghost\"\n\t\t>\n\t\t\tConsole\n\t\t\t<ChevronDown\n\t\t\t\tclass={cn(\n\t\t\t\t\t\"h-4 w-4 transition-transform duration-200\",\n\t\t\t\t\tcontext.consoleOpen && \"rotate-180\"\n\t\t\t\t)}\n\t\t\t/>\n\t\t</Button>\n\t</CollapsibleTrigger>\n\t<CollapsibleContent\n\t\tclass={cn(\n\t\t\t\"px-4 pb-4\",\n\t\t\t\"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 data-[state=closed]:animate-out data-[state=open]:animate-in outline-none\"\n\t\t)}\n\t>\n\t\t<div class=\"max-h-48 space-y-1 overflow-y-auto\">\n\t\t\t{#if logsWithIds.length === 0}\n\t\t\t\t<p class=\"text-muted-foreground\">No console output</p>\n\t\t\t{:else}\n\t\t\t\t{#each logsWithIds as log (log.id)}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass={cn(\n\t\t\t\t\t\t\t\"text-xs\",\n\t\t\t\t\t\t\tlog.level === \"error\" && \"text-destructive\",\n\t\t\t\t\t\t\tlog.level === \"warn\" && \"text-yellow-600\",\n\t\t\t\t\t\t\tlog.level === \"log\" && \"text-foreground\"\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span class=\"text-muted-foreground\">\n\t\t\t\t\t\t\t{log.timestamp.toLocaleTimeString()}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t{log.message}\n\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\t\t\t{/if}\n\t\t\t{#if children}\n\t\t\t\t{@render children()}\n\t\t\t{/if}\n\t\t</div>\n\t</CollapsibleContent>\n</Collapsible>\n",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewConsole.svelte"
		},
		{
			"content": "import { getContext, setContext } from \"svelte\";\n\nconst WEB_PREVIEW_CONTEXT_KEY = Symbol(\"web-preview\");\n\nexport type LogLevel = \"log\" | \"warn\" | \"error\";\n\nexport type LogEntry = {\n\tlevel: LogLevel;\n\tmessage: string;\n\ttimestamp: Date;\n};\n\nexport class WebPreviewContext {\n\t#url = $state(\"\");\n\t#consoleOpen = $state(false);\n\t#onUrlChange?: (url: string) => void;\n\n\tconstructor(defaultUrl: string = \"\", onUrlChange?: (url: string) => void) {\n\t\tthis.#url = defaultUrl;\n\t\tthis.#onUrlChange = onUrlChange;\n\t}\n\n\tget url() {\n\t\treturn this.#url;\n\t}\n\n\tsetUrl(newUrl: string) {\n\t\tthis.#url = newUrl;\n\t\tthis.#onUrlChange?.(newUrl);\n\t}\n\n\tget consoleOpen() {\n\t\treturn this.#consoleOpen;\n\t}\n\n\tsetConsoleOpen(open: boolean) {\n\t\tthis.#consoleOpen = open;\n\t}\n}\n\nexport function setWebPreviewContext(context: WebPreviewContext) {\n\treturn setContext(WEB_PREVIEW_CONTEXT_KEY, context);\n}\n\nexport function getWebPreviewContext(): WebPreviewContext {\n\tlet context = getContext<WebPreviewContext>(WEB_PREVIEW_CONTEXT_KEY);\n\tif (!context) {\n\t\tthrow new Error(\"WebPreview components must be used within a WebPreview\");\n\t}\n\treturn context;\n}\n",
			"type": "registry:file",
			"target": "ai-elements/web-preview/web-preview-context.svelte.ts"
		},
		{
			"content": "export { default as WebPreview } from \"./WebPreview.svelte\";\nexport { default as WebPreviewNavigation } from \"./WebPreviewNavigation.svelte\";\nexport { default as WebPreviewNavigationButton } from \"./WebPreviewNavigationButton.svelte\";\nexport { default as WebPreviewUrl } from \"./WebPreviewUrl.svelte\";\nexport { default as WebPreviewBody } from \"./WebPreviewBody.svelte\";\nexport { default as WebPreviewConsole } from \"./WebPreviewConsole.svelte\";\n\nexport {\n\tWebPreviewContext,\n\tgetWebPreviewContext,\n\tsetWebPreviewContext,\n} from \"./web-preview-context.svelte.js\";\nexport type { LogEntry, LogLevel } from \"./web-preview-context.svelte.js\";\n",
			"type": "registry:file",
			"target": "ai-elements/web-preview/index.ts"
		}
	]
}
