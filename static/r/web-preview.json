{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "web-preview",
	"type": "registry:block",
	"description": "The WebPreview component provides an interactive web browser interface for displaying and navigating web content with console logging capabilities.",
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"button",
		"input"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$/utils.js';\r\n\timport { WebPreviewContext, setWebPreviewContext } from './web-preview-context.svelte.js';\r\n\r\n\tlet {\r\n\t\tdefaultUrl = '',\r\n\t\tonUrlChange,\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tdefaultUrl?: string;\r\n\t\tonUrlChange?: (url: string) => void;\r\n\t\tclass?: string;\r\n\t\tchildren: import('svelte').Snippet;\r\n\t\t[key: string]: any;\r\n\t} = $props();\r\n\r\n\t// Create and set the context\r\n\tlet context = new WebPreviewContext(defaultUrl, onUrlChange);\r\n\tsetWebPreviewContext(context);\r\n</script>\r\n\r\n<div\r\n\tclass={cn(\r\n\t\t\"flex size-full flex-col rounded-lg border bg-card\",\r\n\t\tclassName\r\n\t)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreview.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$/utils.js';\r\n\r\n\tlet {\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tclass?: string;\r\n\t\tchildren: import('svelte').Snippet;\r\n\t\t[key: string]: any;\r\n\t} = $props();\r\n</script>\r\n\r\n<div\r\n\tclass={cn(\"flex items-center gap-1 border-b p-2\", className)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewNavigation.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { Button } from '$lib/components/ui/button/index.js';\r\n\timport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '$lib/components/ui/tooltip/index.js';\r\n\r\n\tlet {\r\n\t\tonclick,\r\n\t\tdisabled,\r\n\t\ttooltip,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tonclick?: (event: MouseEvent) => void;\r\n\t\tdisabled?: boolean;\r\n\t\ttooltip?: string;\r\n\t\tchildren: import('svelte').Snippet;\r\n\t\t[key: string]: any;\r\n\t} = $props();\r\n</script>\r\n\r\n<TooltipProvider>\r\n\t<Tooltip>\r\n\t\t<TooltipTrigger>\r\n\t\t\t<Button\r\n\t\t\t\tclass=\"h-8 w-8 p-0 hover:text-foreground\"\r\n\t\t\t\t{disabled}\r\n\t\t\t\t{onclick}\r\n\t\t\t\tsize=\"sm\"\r\n\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t{...restProps}\r\n\t\t\t>\r\n\t\t\t\t{@render children()}\r\n\t\t\t</Button>\r\n\t\t</TooltipTrigger>\r\n\t\t<TooltipContent>\r\n\t\t\t<p>{tooltip}</p>\r\n\t\t</TooltipContent>\r\n\t</Tooltip>\r\n</TooltipProvider>",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewNavigationButton.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$/utils.js';\r\n\timport { getWebPreviewContext } from './web-preview-context.svelte.js';\r\n\r\n\tlet {\r\n\t\tvalue = $bindable(''),\r\n\t\tonchange,\r\n\t\tonkeydown,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tvalue?: string;\r\n\t\tonchange?: (event: Event) => void;\r\n\t\tonkeydown?: (event: KeyboardEvent) => void;\r\n\t\tclass?: string;\r\n\t\t[key: string]: any;\r\n\t} = $props();\r\n\r\n\tlet context = getWebPreviewContext();\r\n\r\n\tfunction handleKeyDown(event: KeyboardEvent) {\r\n\t\tif (event.key === 'Enter') {\r\n\t\t\tlet target = event.target as HTMLInputElement;\r\n\t\t\tcontext.setUrl(target.value);\r\n\t\t\tif (value !== undefined) {\r\n\t\t\t\tvalue = target.value;\r\n\t\t\t}\r\n\t\t}\r\n\t\tonkeydown?.(event);\r\n\t}\r\n\r\n\tfunction handleChange(event: Event) {\r\n\t\tlet target = event.target as HTMLInputElement;\r\n\t\tif (value !== undefined) {\r\n\t\t\tvalue = target.value;\r\n\t\t}\r\n\t\tonchange?.(event);\r\n\t}\r\n\r\n\tlet displayValue = $derived.by(() => value ?? context.url);\r\n</script>\r\n\r\n<input\r\n\tclass={cn(\r\n\t\t\"flex h-8 flex-1 rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n\t\tclassName\r\n\t)}\r\n\tonchange={handleChange}\r\n\tonkeydown={handleKeyDown}\r\n\tplaceholder=\"Enter URL...\"\r\n\tvalue={displayValue}\r\n\t{...restProps}\r\n/>",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewUrl.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$/utils.js';\r\n\timport { getWebPreviewContext } from './web-preview-context.svelte.js';\r\n\r\n\tlet {\r\n\t\tloading,\r\n\t\tsrc,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tloading?: import('svelte').Snippet;\r\n\t\tsrc?: string;\r\n\t\tclass?: string;\r\n\t\t[key: string]: any;\r\n\t} = $props();\r\n\r\n\tlet context = getWebPreviewContext();\r\n\r\n\tlet finalSrc = $derived.by(() => (src ?? context.url) || undefined);\r\n</script>\r\n\r\n<div class=\"flex-1\">\r\n\t<iframe\r\n\t\tclass={cn(\"size-full\", className)}\r\n\t\tsandbox=\"allow-scripts allow-same-origin allow-forms allow-popups allow-presentation\"\r\n\t\tsrc={finalSrc}\r\n\t\ttitle=\"Preview\"\r\n\t\t{...restProps}\r\n\t></iframe>\r\n\t{#if loading}\r\n\t\t{@render loading()}\r\n\t{/if}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewBody.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$/utils.js';\r\n\timport { Button } from '$lib/components/ui/button/index.js';\r\n\timport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '$lib/components/ui/collapsible/index.js';\r\n\timport { getWebPreviewContext, type LogEntry } from './web-preview-context.svelte.js';\r\n\timport { ChevronDown } from '@lucide/svelte';\r\n\r\n\tlet {\r\n\t\tlogs = [],\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tlogs?: LogEntry[];\r\n\t\tclass?: string;\r\n\t\tchildren?: import('svelte').Snippet;\r\n\t\t[key: string]: any;\r\n\t} = $props();\r\n\r\n\tlet context = getWebPreviewContext();\r\n\r\n\t// Generate unique IDs for each log entry using crypto.randomUUID()\r\n\tlet logsWithIds = $derived.by(() =>\r\n\t\tlogs.map(log => ({\r\n\t\t\t...log,\r\n\t\t\tid: crypto.randomUUID()\r\n\t\t}))\r\n\t);\r\n</script>\r\n\r\n<Collapsible\r\n\tclass={cn(\"border-t bg-muted/50 font-mono text-sm\", className)}\r\n\tonOpenChange={context.setConsoleOpen.bind(context)}\r\n\topen={context.consoleOpen}\r\n\t{...restProps}\r\n>\r\n\t<CollapsibleTrigger>\r\n\t\t<Button\r\n\t\t\tclass=\"flex w-full items-center justify-between p-4 text-left font-medium hover:bg-muted/50\"\r\n\t\t\tvariant=\"ghost\"\r\n\t\t>\r\n\t\t\tConsole\r\n\t\t\t<ChevronDown\r\n\t\t\t\tclass={cn(\r\n\t\t\t\t\t\"h-4 w-4 transition-transform duration-200\",\r\n\t\t\t\t\tcontext.consoleOpen && \"rotate-180\"\r\n\t\t\t\t)}\r\n\t\t\t/>\r\n\t\t</Button>\r\n\t</CollapsibleTrigger>\r\n\t<CollapsibleContent\r\n\t\tclass={cn(\r\n\t\t\t\"px-4 pb-4\",\r\n\t\t\t\"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 outline-none data-[state=closed]:animate-out data-[state=open]:animate-in\"\r\n\t\t)}\r\n\t>\r\n\t\t<div class=\"max-h-48 space-y-1 overflow-y-auto\">\r\n\t\t\t{#if logsWithIds.length === 0}\r\n\t\t\t\t<p class=\"text-muted-foreground\">No console output</p>\r\n\t\t\t{:else}\r\n\t\t\t\t{#each logsWithIds as log (log.id)}\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclass={cn(\r\n\t\t\t\t\t\t\t\"text-xs\",\r\n\t\t\t\t\t\t\tlog.level === \"error\" && \"text-destructive\",\r\n\t\t\t\t\t\t\tlog.level === \"warn\" && \"text-yellow-600\",\r\n\t\t\t\t\t\t\tlog.level === \"log\" && \"text-foreground\"\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<span class=\"text-muted-foreground\">\r\n\t\t\t\t\t\t\t{log.timestamp.toLocaleTimeString()}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t{log.message}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t{/each}\r\n\t\t\t{/if}\r\n\t\t\t{#if children}\r\n\t\t\t\t{@render children()}\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\t</CollapsibleContent>\r\n</Collapsible>",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewConsole.svelte"
		},
		{
			"content": "import { getContext, setContext } from 'svelte';\r\n\r\nconst WEB_PREVIEW_CONTEXT_KEY = Symbol('web-preview');\r\n\r\nexport type LogLevel = 'log' | 'warn' | 'error';\r\n\r\nexport type LogEntry = {\r\n\tlevel: LogLevel;\r\n\tmessage: string;\r\n\ttimestamp: Date;\r\n};\r\n\r\nexport class WebPreviewContext {\r\n\t#url = $state('');\r\n\t#consoleOpen = $state(false);\r\n\t#onUrlChange?: (url: string) => void;\r\n\r\n\tconstructor(defaultUrl: string = '', onUrlChange?: (url: string) => void) {\r\n\t\tthis.#url = defaultUrl;\r\n\t\tthis.#onUrlChange = onUrlChange;\r\n\t}\r\n\r\n\tget url() {\r\n\t\treturn this.#url;\r\n\t}\r\n\r\n\tsetUrl(newUrl: string) {\r\n\t\tthis.#url = newUrl;\r\n\t\tthis.#onUrlChange?.(newUrl);\r\n\t}\r\n\r\n\tget consoleOpen() {\r\n\t\treturn this.#consoleOpen;\r\n\t}\r\n\r\n\tsetConsoleOpen(open: boolean) {\r\n\t\tthis.#consoleOpen = open;\r\n\t}\r\n}\r\n\r\nexport function setWebPreviewContext(context: WebPreviewContext) {\r\n\treturn setContext(WEB_PREVIEW_CONTEXT_KEY, context);\r\n}\r\n\r\nexport function getWebPreviewContext(): WebPreviewContext {\r\n\tlet context = getContext<WebPreviewContext>(WEB_PREVIEW_CONTEXT_KEY);\r\n\tif (!context) {\r\n\t\tthrow new Error('WebPreview components must be used within a WebPreview');\r\n\t}\r\n\treturn context;\r\n}",
			"type": "registry:file",
			"target": "ai-elements/web-preview/web-preview-context.svelte.ts"
		},
		{
			"content": "export { default as WebPreview } from './WebPreview.svelte';\r\nexport { default as WebPreviewNavigation } from './WebPreviewNavigation.svelte';\r\nexport { default as WebPreviewNavigationButton } from './WebPreviewNavigationButton.svelte';\r\nexport { default as WebPreviewUrl } from './WebPreviewUrl.svelte';\r\nexport { default as WebPreviewBody } from './WebPreviewBody.svelte';\r\nexport { default as WebPreviewConsole } from './WebPreviewConsole.svelte';\r\n\r\nexport { WebPreviewContext, getWebPreviewContext, setWebPreviewContext } from './web-preview-context.svelte.js';\r\nexport type { LogEntry, LogLevel } from './web-preview-context.svelte.js';",
			"type": "registry:file",
			"target": "ai-elements/web-preview/index.ts"
		}
	]
}