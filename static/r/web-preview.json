{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "web-preview",
	"title": "Web Preview",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The WebPreview component provides an interactive web browser interface for displaying and navigating web content with console logging capabilities.",
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"button",
		"input"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport { WebPreviewContext, setWebPreviewContext } from './web-preview-context.svelte.js';\r\n\r\n\tlet {\r\n\t\tdefaultUrl = '',\r\n\t\tonUrlChange,\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tdefaultUrl?: string;\r\n\t\tonUrlChange?: (url: string) => void;\r\n\t\tclass?: string;\r\n\t\tchildren: import('svelte').Snippet;\r\n\t\t[key: string]: any;\r\n\t} = $props();\r\n\r\n\t// Create and set the context\r\n\tlet context = new WebPreviewContext(defaultUrl, onUrlChange);\r\n\tsetWebPreviewContext(context);\r\n</script>\r\n\r\n<div\r\n\tclass={cn(\r\n\t\t\"flex size-full flex-col rounded-lg border bg-card\",\r\n\t\tclassName\r\n\t)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreview.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\r\n\tlet {\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tclass?: string;\r\n\t\tchildren: import('svelte').Snippet;\r\n\t\t[key: string]: any;\r\n\t} = $props();\r\n</script>\r\n\r\n<div\r\n\tclass={cn(\"flex items-center gap-1 border-b p-2\", className)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewNavigation.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { Button } from \"$COMPONENTS$/ui/button/index.js\";\r\n  import {\r\n    Tooltip,\r\n    TooltipContent,\r\n    TooltipProvider,\r\n    TooltipTrigger,\r\n  } from \"$COMPONENTS$/ui/tooltip/index.js\";\r\n\r\n  let {\r\n    onclick,\r\n    disabled,\r\n    tooltip,\r\n    children,\r\n    ...restProps\r\n  }: {\r\n    onclick?: (event: MouseEvent) => void;\r\n    disabled?: boolean;\r\n    tooltip?: string;\r\n    children: import(\"svelte\").Snippet;\r\n    [key: string]: any;\r\n  } = $props();\r\n</script>\r\n\r\n<TooltipProvider>\r\n  <Tooltip>\r\n    <TooltipTrigger>\r\n      <Button\r\n        class=\"h-8 w-8 p-0 hover:text-foreground\"\r\n        {disabled}\r\n        {onclick}\r\n        size=\"sm\"\r\n        variant=\"ghost\"\r\n        {...restProps}\r\n      >\r\n        {@render children()}\r\n      </Button>\r\n    </TooltipTrigger>\r\n    <TooltipContent>\r\n      <p>{tooltip}</p>\r\n    </TooltipContent>\r\n  </Tooltip>\r\n</TooltipProvider>\r\n",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewNavigationButton.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { getWebPreviewContext } from \"./web-preview-context.svelte.js\";\r\n\r\n  let {\r\n    value = $bindable(\"\"),\r\n    onchange,\r\n    onkeydown,\r\n    class: className,\r\n    ...restProps\r\n  }: {\r\n    value?: string;\r\n    onchange?: (event: Event) => void;\r\n    onkeydown?: (event: KeyboardEvent) => void;\r\n    class?: string;\r\n    [key: string]: any;\r\n  } = $props();\r\n\r\n  let context = getWebPreviewContext();\r\n\r\n  function handleKeyDown(event: KeyboardEvent) {\r\n    if (event.key === \"Enter\") {\r\n      let target = event.target as HTMLInputElement;\r\n      context.setUrl(target.value);\r\n      if (value !== undefined) {\r\n        value = target.value;\r\n      }\r\n    }\r\n    onkeydown?.(event);\r\n  }\r\n\r\n  function handleChange(event: Event) {\r\n    let target = event.target as HTMLInputElement;\r\n    if (value !== undefined) {\r\n      value = target.value;\r\n    }\r\n    onchange?.(event);\r\n  }\r\n\r\n  let displayValue = $derived.by(() => value ?? context.url);\r\n</script>\r\n\r\n<input\r\n  class={cn(\r\n    \"flex h-8 flex-1 rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n    className\r\n  )}\r\n  onchange={handleChange}\r\n  onkeydown={handleKeyDown}\r\n  placeholder=\"Enter URL...\"\r\n  value={displayValue}\r\n  {...restProps}\r\n/>\r\n",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewUrl.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport { getWebPreviewContext } from './web-preview-context.svelte.js';\r\n\r\n\tlet {\r\n\t\tloading,\r\n\t\tsrc,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tloading?: import('svelte').Snippet;\r\n\t\tsrc?: string;\r\n\t\tclass?: string;\r\n\t\t[key: string]: any;\r\n\t} = $props();\r\n\r\n\tlet context = getWebPreviewContext();\r\n\r\n\tlet finalSrc = $derived.by(() => (src ?? context.url) || undefined);\r\n</script>\r\n\r\n<div class=\"flex-1\">\r\n\t<iframe\r\n\t\tclass={cn(\"size-full\", className)}\r\n\t\tsandbox=\"allow-scripts allow-same-origin allow-forms allow-popups allow-presentation\"\r\n\t\tsrc={finalSrc}\r\n\t\ttitle=\"Preview\"\r\n\t\t{...restProps}\r\n\t></iframe>\r\n\t{#if loading}\r\n\t\t{@render loading()}\r\n\t{/if}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewBody.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { Button } from \"$COMPONENTS$/ui/button/index.js\";\r\n  import {\r\n    Collapsible,\r\n    CollapsibleContent,\r\n    CollapsibleTrigger,\r\n  } from \"$COMPONENTS$/ui/collapsible/index.js\";\r\n  import {\r\n    getWebPreviewContext,\r\n    type LogEntry,\r\n  } from \"./web-preview-context.svelte.js\";\r\n  import ChevronDown from \"@lucide/svelte/icons/chevron-down\";\r\n\r\n  let {\r\n    logs = [],\r\n    class: className,\r\n    children,\r\n    ...restProps\r\n  }: {\r\n    logs?: LogEntry[];\r\n    class?: string;\r\n    children?: import(\"svelte\").Snippet;\r\n    [key: string]: any;\r\n  } = $props();\r\n\r\n  let context = getWebPreviewContext();\r\n\r\n  // Generate unique IDs for each log entry using crypto.randomUUID()\r\n  let logsWithIds = $derived.by(() =>\r\n    logs.map((log) => ({\r\n      ...log,\r\n      id: crypto.randomUUID(),\r\n    }))\r\n  );\r\n</script>\r\n\r\n<Collapsible\r\n  class={cn(\"border-t bg-muted/50 font-mono text-sm\", className)}\r\n  onOpenChange={context.setConsoleOpen.bind(context)}\r\n  open={context.consoleOpen}\r\n  {...restProps}\r\n>\r\n  <CollapsibleTrigger>\r\n    <Button\r\n      class=\"flex w-full items-center justify-between p-4 text-left font-medium hover:bg-muted/50\"\r\n      variant=\"ghost\"\r\n    >\r\n      Console\r\n      <ChevronDown\r\n        class={cn(\r\n          \"h-4 w-4 transition-transform duration-200\",\r\n          context.consoleOpen && \"rotate-180\"\r\n        )}\r\n      />\r\n    </Button>\r\n  </CollapsibleTrigger>\r\n  <CollapsibleContent\r\n    class={cn(\r\n      \"px-4 pb-4\",\r\n      \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 outline-none data-[state=closed]:animate-out data-[state=open]:animate-in\"\r\n    )}\r\n  >\r\n    <div class=\"max-h-48 space-y-1 overflow-y-auto\">\r\n      {#if logsWithIds.length === 0}\r\n        <p class=\"text-muted-foreground\">No console output</p>\r\n      {:else}\r\n        {#each logsWithIds as log (log.id)}\r\n          <div\r\n            class={cn(\r\n              \"text-xs\",\r\n              log.level === \"error\" && \"text-destructive\",\r\n              log.level === \"warn\" && \"text-yellow-600\",\r\n              log.level === \"log\" && \"text-foreground\"\r\n            )}\r\n          >\r\n            <span class=\"text-muted-foreground\">\r\n              {log.timestamp.toLocaleTimeString()}\r\n            </span>\r\n            {log.message}\r\n          </div>\r\n        {/each}\r\n      {/if}\r\n      {#if children}\r\n        {@render children()}\r\n      {/if}\r\n    </div>\r\n  </CollapsibleContent>\r\n</Collapsible>\r\n",
			"type": "registry:component",
			"target": "ai-elements/web-preview/WebPreviewConsole.svelte"
		},
		{
			"content": "import { getContext, setContext } from 'svelte';\r\n\r\nconst WEB_PREVIEW_CONTEXT_KEY = Symbol('web-preview');\r\n\r\nexport type LogLevel = 'log' | 'warn' | 'error';\r\n\r\nexport type LogEntry = {\r\n\tlevel: LogLevel;\r\n\tmessage: string;\r\n\ttimestamp: Date;\r\n};\r\n\r\nexport class WebPreviewContext {\r\n\t#url = $state('');\r\n\t#consoleOpen = $state(false);\r\n\t#onUrlChange?: (url: string) => void;\r\n\r\n\tconstructor(defaultUrl: string = '', onUrlChange?: (url: string) => void) {\r\n\t\tthis.#url = defaultUrl;\r\n\t\tthis.#onUrlChange = onUrlChange;\r\n\t}\r\n\r\n\tget url() {\r\n\t\treturn this.#url;\r\n\t}\r\n\r\n\tsetUrl(newUrl: string) {\r\n\t\tthis.#url = newUrl;\r\n\t\tthis.#onUrlChange?.(newUrl);\r\n\t}\r\n\r\n\tget consoleOpen() {\r\n\t\treturn this.#consoleOpen;\r\n\t}\r\n\r\n\tsetConsoleOpen(open: boolean) {\r\n\t\tthis.#consoleOpen = open;\r\n\t}\r\n}\r\n\r\nexport function setWebPreviewContext(context: WebPreviewContext) {\r\n\treturn setContext(WEB_PREVIEW_CONTEXT_KEY, context);\r\n}\r\n\r\nexport function getWebPreviewContext(): WebPreviewContext {\r\n\tlet context = getContext<WebPreviewContext>(WEB_PREVIEW_CONTEXT_KEY);\r\n\tif (!context) {\r\n\t\tthrow new Error('WebPreview components must be used within a WebPreview');\r\n\t}\r\n\treturn context;\r\n}",
			"type": "registry:file",
			"target": "ai-elements/web-preview/web-preview-context.svelte.ts"
		},
		{
			"content": "export { default as WebPreview } from './WebPreview.svelte';\r\nexport { default as WebPreviewNavigation } from './WebPreviewNavigation.svelte';\r\nexport { default as WebPreviewNavigationButton } from './WebPreviewNavigationButton.svelte';\r\nexport { default as WebPreviewUrl } from './WebPreviewUrl.svelte';\r\nexport { default as WebPreviewBody } from './WebPreviewBody.svelte';\r\nexport { default as WebPreviewConsole } from './WebPreviewConsole.svelte';\r\n\r\nexport { WebPreviewContext, getWebPreviewContext, setWebPreviewContext } from './web-preview-context.svelte.js';\r\nexport type { LogEntry, LogLevel } from './web-preview-context.svelte.js';",
			"type": "registry:file",
			"target": "ai-elements/web-preview/index.ts"
		}
	]
}