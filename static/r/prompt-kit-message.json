{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "prompt-kit-message",
	"type": "registry:block",
	"description": "The Message component displays chat messages with avatar, content, and action buttons. Features context-based state management for flexible message layouts in AI chat interfaces. Includes Message, MessageAvatar, MessageContent, MessageAction, and MessageActions components.",
	"devDependencies": [
		"bits-ui@^2.14.1",
		"@internationalized/date@^3.8.1"
	],
	"registryDependencies": [
		"avatar",
		"button"
	],
	"meta": {
		"author": "SikandarJODD",
		"version": "1.0.0",
		"tags": [
			"prompt-kit",
			"message",
			"chat",
			"avatar",
			"actions",
			"conversation"
		],
		"category": "Prompt Kit",
		"documentation": "https://ai-elements.vercel.app/prompt-kit/message",
		"repository": "https://github.com/SikandarJODD/ai-elements",
		"complexity": "intermediate",
		"updated": "2025-10-19",
		"featured": true
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport {\n\t\tMessageClass,\n\t\tsetMessageContext,\n\t\ttype MessageSchema,\n\t} from \"./message-context.svelte.js\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: MessageSchema & {\n\t\tclass?: string;\n\t\tchildren: Snippet;\n\t} & HTMLAttributes<HTMLDivElement> = $props();\n\n\tconst contextInstance = new MessageClass();\n\tsetMessageContext(contextInstance);\n</script>\n\n<div class={cn(\"flex gap-3\", className)} {...restProps}>\n\t{@render children()}\n</div>\n",
			"type": "registry:component",
			"target": "prompt-kit/message/Message.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { Avatar, AvatarFallback, AvatarImage } from \"$COMPONENTS$/ui/avatar/index.js\";\n\timport { cn } from \"$UTILS$\";\n\n\tlet {\n\t\tsrc,\n\t\talt,\n\t\tfallback,\n\t\tclass: className,\n\t}: {\n\t\tsrc: string;\n\t\talt: string;\n\t\tfallback?: string;\n\t\tclass?: string;\n\t} = $props();\n</script>\n\n<Avatar class={cn(\"h-8 w-8 shrink-0\", className)}>\n\t<AvatarImage {src} {alt} />\n\t{#if fallback}\n\t\t<AvatarFallback>{fallback}</AvatarFallback>\n\t{/if}\n</Avatar>\n",
			"type": "registry:component",
			"target": "prompt-kit/message/MessageAvatar.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tmarkdown = false,\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: {\n\t\tmarkdown?: boolean;\n\t\tclass?: string;\n\t\tchildren: Snippet;\n\t} & HTMLAttributes<HTMLDivElement> = $props();\n\n\tconst classNames = cn(\n\t\t\"text-foreground bg-secondary prose rounded-lg p-2 break-words whitespace-normal\",\n\t\tclassName\n\t);\n</script>\n\n{#if markdown}\n\t<!-- Markdown rendering can be added here when needed -->\n\t<!-- For now, we'll render as plain div -->\n\t<div class={classNames} {...restProps}>\n\t\t{@render children()}\n\t</div>\n{:else}\n\t<div class={classNames} {...restProps}>\n\t\t{@render children()}\n\t</div>\n{/if}\n",
			"type": "registry:component",
			"target": "prompt-kit/message/MessageContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport {\n\t\tTooltip,\n\t\tTooltipContent,\n\t\tTooltipProvider,\n\t\tTooltipTrigger,\n\t} from \"$COMPONENTS$/ui/tooltip/index.js\";\n\timport type { Snippet } from \"svelte\";\n\timport type { Tooltip as TooltipPrimitive } from \"bits-ui\";\n\n\tlet {\n\t\ttooltip,\n\t\tside = \"top\",\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: {\n\t\ttooltip: Snippet;\n\t\tside?: \"top\" | \"bottom\" | \"left\" | \"right\";\n\t\tclass?: string;\n\t\tchildren: Snippet;\n\t} & TooltipPrimitive.RootProps = $props();\n</script>\n\n<TooltipProvider>\n\t<Tooltip {...restProps}>\n\t\t<TooltipTrigger>\n\t\t\t{@render children()}\n\t\t</TooltipTrigger>\n\t\t<TooltipContent {side} class={className}>\n\t\t\t{@render tooltip()}\n\t\t</TooltipContent>\n\t</Tooltip>\n</TooltipProvider>\n",
			"type": "registry:component",
			"target": "prompt-kit/message/MessageAction.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tlet {\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: {\n\t\tclass?: string;\n\t\tchildren: Snippet;\n\t} & HTMLAttributes<HTMLDivElement> = $props();\n</script>\n\n<div class={cn(\"text-muted-foreground flex items-center gap-2\", className)} {...restProps}>\n\t{@render children()}\n</div>\n",
			"type": "registry:component",
			"target": "prompt-kit/message/MessageActions.svelte"
		},
		{
			"content": "import { getContext, setContext } from \"svelte\";\n\nexport type MessageSchema = {\n\t// Add any shared state if needed in the future\n};\n\nexport class MessageClass {\n\t// Placeholder for shared state management\n\t// Currently the Message component is mostly presentational\n\t// but this allows for future extensibility\n\n\tconstructor(props?: MessageSchema) {\n\t\t// Initialize any shared state here if needed\n\t}\n}\n\nconst MESSAGE_KEY = Symbol(\"message\");\n\nexport function setMessageContext(contextInstance: MessageClass) {\n\tsetContext(MESSAGE_KEY, contextInstance);\n}\n\nexport function getMessageContext(): MessageClass {\n\tconst context = getContext<MessageClass>(MESSAGE_KEY);\n\n\tif (!context) {\n\t\tthrow new Error(\"Message subcomponents must be used within Message\");\n\t}\n\n\treturn context;\n}\n",
			"type": "registry:file",
			"target": "prompt-kit/message/message-context.svelte.ts"
		},
		{
			"content": "export { default as Message } from \"./Message.svelte\";\nexport { default as MessageAvatar } from \"./MessageAvatar.svelte\";\nexport { default as MessageContent } from \"./MessageContent.svelte\";\nexport { default as MessageActions } from \"./MessageActions.svelte\";\nexport { default as MessageAction } from \"./MessageAction.svelte\";\n\nexport * from \"./message-context.svelte.js\";\n",
			"type": "registry:file",
			"target": "prompt-kit/message/index.ts"
		}
	]
}