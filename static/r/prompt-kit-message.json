{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "prompt-kit-message",
	"type": "registry:block",
	"description": "The Message component displays chat messages with avatar, content, and action buttons. Features context-based state management for flexible message layouts in AI chat interfaces. Includes Message, MessageAvatar, MessageContent, MessageAction, and MessageActions components.",
	"devDependencies": [
		"bits-ui@^2.11.4",
		"@internationalized/date@^3.8.1"
	],
	"registryDependencies": [
		"avatar",
		"button"
	],
	"meta": {
		"author": "SikandarJODD",
		"version": "1.0.0",
		"tags": [
			"prompt-kit",
			"message",
			"chat",
			"avatar",
			"actions",
			"conversation"
		],
		"category": "Prompt Kit",
		"documentation": "https://ai-elements.vercel.app/prompt-kit/message",
		"repository": "https://github.com/SikandarJODD/ai-elements",
		"complexity": "intermediate",
		"updated": "2025-10-19",
		"featured": true
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport { MessageClass, setMessageContext, type MessageSchema } from './message-context.svelte.js';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\tlet {\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: MessageSchema & {\r\n\t\tclass?: string;\r\n\t\tchildren: Snippet;\r\n\t} & HTMLAttributes<HTMLDivElement> = $props();\r\n\r\n\tconst contextInstance = new MessageClass();\r\n\tsetMessageContext(contextInstance);\r\n</script>\r\n\r\n<div class={cn('flex gap-3', className)} {...restProps}>\r\n\t{@render children()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "prompt-kit/message/Message.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { Avatar, AvatarFallback, AvatarImage } from '$COMPONENTS$/ui/avatar/index.js';\r\n\timport { cn } from '$UTILS$';\r\n\r\n\tlet {\r\n\t\tsrc,\r\n\t\talt,\r\n\t\tfallback,\r\n\t\tclass: className\r\n\t}: {\r\n\t\tsrc: string;\r\n\t\talt: string;\r\n\t\tfallback?: string;\r\n\t\tclass?: string;\r\n\t} = $props();\r\n</script>\r\n\r\n<Avatar class={cn('h-8 w-8 shrink-0', className)}>\r\n\t<AvatarImage {src} {alt} />\r\n\t{#if fallback}\r\n\t\t<AvatarFallback>{fallback}</AvatarFallback>\r\n\t{/if}\r\n</Avatar>\r\n",
			"type": "registry:component",
			"target": "prompt-kit/message/MessageAvatar.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\tlet {\r\n\t\tmarkdown = false,\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tmarkdown?: boolean;\r\n\t\tclass?: string;\r\n\t\tchildren: Snippet;\r\n\t} & HTMLAttributes<HTMLDivElement> = $props();\r\n\r\n\tconst classNames = cn(\r\n\t\t'rounded-lg p-2 text-foreground bg-secondary prose break-words whitespace-normal',\r\n\t\tclassName\r\n\t);\r\n</script>\r\n\r\n{#if markdown}\r\n\t<!-- Markdown rendering can be added here when needed -->\r\n\t<!-- For now, we'll render as plain div -->\r\n\t<div class={classNames} {...restProps}>\r\n\t\t{@render children()}\r\n\t</div>\r\n{:else}\r\n\t<div class={classNames} {...restProps}>\r\n\t\t{@render children()}\r\n\t</div>\r\n{/if}\r\n",
			"type": "registry:component",
			"target": "prompt-kit/message/MessageContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport {\r\n\t\tTooltip,\r\n\t\tTooltipContent,\r\n\t\tTooltipProvider,\r\n\t\tTooltipTrigger\r\n\t} from '$COMPONENTS$/ui/tooltip/index.js';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { Tooltip as TooltipPrimitive } from 'bits-ui';\r\n\r\n\tlet {\r\n\t\ttooltip,\r\n\t\tside = 'top',\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: {\r\n\t\ttooltip: Snippet;\r\n\t\tside?: 'top' | 'bottom' | 'left' | 'right';\r\n\t\tclass?: string;\r\n\t\tchildren: Snippet;\r\n\t} & TooltipPrimitive.RootProps = $props();\r\n</script>\r\n\r\n<TooltipProvider>\r\n\t<Tooltip {...restProps}>\r\n\t\t<TooltipTrigger>\r\n\t\t\t{@render children()}\r\n\t\t</TooltipTrigger>\r\n\t\t<TooltipContent {side} class={className}>\r\n\t\t\t{@render tooltip()}\r\n\t\t</TooltipContent>\r\n\t</Tooltip>\r\n</TooltipProvider>\r\n",
			"type": "registry:component",
			"target": "prompt-kit/message/MessageAction.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\tlet {\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tclass?: string;\r\n\t\tchildren: Snippet;\r\n\t} & HTMLAttributes<HTMLDivElement> = $props();\r\n</script>\r\n\r\n<div class={cn('text-muted-foreground flex items-center gap-2', className)} {...restProps}>\r\n\t{@render children()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "prompt-kit/message/MessageActions.svelte"
		},
		{
			"content": "import { getContext, setContext } from 'svelte';\r\n\r\nexport type MessageSchema = {\r\n\t// Add any shared state if needed in the future\r\n};\r\n\r\nexport class MessageClass {\r\n\t// Placeholder for shared state management\r\n\t// Currently the Message component is mostly presentational\r\n\t// but this allows for future extensibility\r\n\r\n\tconstructor(props?: MessageSchema) {\r\n\t\t// Initialize any shared state here if needed\r\n\t}\r\n}\r\n\r\nconst MESSAGE_KEY = Symbol('message');\r\n\r\nexport function setMessageContext(contextInstance: MessageClass) {\r\n\tsetContext(MESSAGE_KEY, contextInstance);\r\n}\r\n\r\nexport function getMessageContext(): MessageClass {\r\n\tconst context = getContext<MessageClass>(MESSAGE_KEY);\r\n\r\n\tif (!context) {\r\n\t\tthrow new Error('Message subcomponents must be used within Message');\r\n\t}\r\n\r\n\treturn context;\r\n}\r\n",
			"type": "registry:file",
			"target": "prompt-kit/message/message-context.svelte.ts"
		},
		{
			"content": "export { default as Message } from './Message.svelte';\r\nexport { default as MessageAvatar } from './MessageAvatar.svelte';\r\nexport { default as MessageContent } from './MessageContent.svelte';\r\nexport { default as MessageActions } from './MessageActions.svelte';\r\nexport { default as MessageAction } from './MessageAction.svelte';\r\n\r\nexport * from './message-context.svelte.js';\r\n",
			"type": "registry:file",
			"target": "prompt-kit/message/index.ts"
		}
	]
}