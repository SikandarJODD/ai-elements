[
	{
		"name": "action",
		"type": "registry:block",
		"description": "The Actions component provides a flexible row of action buttons for AI responses with common actions like retry, like, dislike, copy, and share.",
		"registryDependencies": [
			"button",
			"tooltip"
		],
		"meta": {
			"author": "SikandarJODD",
			"version": "1.0.0",
			"tags": [
				"actions",
				"buttons",
				"ai-response",
				"interactive",
				"feedback"
			],
			"category": "AI Response",
			"documentation": "https://ai-elements.vercel.app/components/actions",
			"repository": "https://github.com/SikandarJODD/ai-elements",
			"complexity": "beginner",
			"updated": "2025-09-24",
			"featured": true
		},
		"relativeUrl": "action.json"
	},
	{
		"name": "artifact",
		"type": "registry:block",
		"description": "The Artifact component provides a structured container for displaying generated content like code, documents, or other outputs with built-in header actions.",
		"registryDependencies": [
			"button",
			"tooltip"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "artifact.json"
	},
	{
		"name": "chain-of-thought",
		"type": "registry:block",
		"description": "The ChainOfThought component provides a visual representation of an AI's reasoning process, showing step-by-step thinking with support for search results, images, and progress indicators. It helps users understand how AI arrives at conclusions.",
		"dependencies": [
			"ai",
			"@lucidesvelte"
		],
		"registryDependencies": [
			"badge",
			"collapsible"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "chain-of-thought.json"
	},
	{
		"name": "code",
		"type": "registry:block",
		"description": "The Code component displays formatted code snippets with syntax highlighting, line numbers, and a copy-to-clipboard feature. It supports multiple programming languages and themes for better readability.",
		"dependencies": [
			"svelte-toolbelt",
			"isomorphic-dompurify",
			"shiki",
			"runed",
			"@shikijs/langs",
			"@shikijs/themes"
		],
		"registryDependencies": [
			"copy-button",
			"button",
			"tooltip"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "code.json"
	},
	{
		"name": "context",
		"type": "registry:block",
		"description": "The Context component provides a comprehensive view of AI model usage, displaying token consumption, costs, and performance metrics through an interactive hover card interface.",
		"registryDependencies": [
			"hover-card"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "context.json"
	},
	{
		"name": "conversation",
		"type": "registry:block",
		"description": "The Conversation component provides a structured layout for displaying a series of chat messages between a user and an AI. It supports features like message grouping, typing indicators, and customizable avatars.",
		"registryDependencies": [
			"button"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "conversation.json"
	},
	{
		"name": "copy-button",
		"type": "registry:block",
		"description": "The CopyButton component provides a button that allows users to copy text to their clipboard with visual feedback indicating success or failure.",
		"dependencies": [
			"@lucide/svelte"
		],
		"registryDependencies": [
			"button",
			"tooltip"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "copy-button.json"
	},
	{
		"name": "image",
		"type": "registry:block",
		"description": "The Image component displays AI-generated images from base64 encoded data with proper styling and accessibility features.",
		"dependencies": [
			"ai"
		],
		"registryDependencies": [],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "image.json"
	},
	{
		"name": "inline-citation",
		"type": "registry:block",
		"description": "The InlineCitation component displays a citation or reference within text, typically used to attribute sources in AI-generated content. It includes a tooltip for additional information.",
		"dependencies": [
			"@lucide/svelte"
		],
		"registryDependencies": [
			"tooltip",
			"hover-card",
			"badge",
			"button",
			"carousel"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "inline-citation.json"
	},
	{
		"name": "loader",
		"type": "registry:block",
		"description": "The Loader component provides a visual indicator of loading or processing states in an AI application. It includes various styles and animations to enhance user experience during wait times.",
		"registryDependencies": [],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "loader.json"
	},
	{
		"name": "message",
		"type": "registry:block",
		"description": "The Message component displays a chat interface message from either a user or an AI. It includes an avatar, a name, and a message content.",
		"dependencies": [
			"ai",
			"tailwind-variants"
		],
		"registryDependencies": [
			"avatar"
		],
		"relativeUrl": "message.json"
	},
	{
		"name": "open-in-chat",
		"type": "registry:block",
		"description": "The OpenIn component provides a dropdown menu that allows users to open queries in different AI chat platforms (ChatGPT, Claude, V0, etc.) with a single click.",
		"dependencies": [
			"@lucide/svelte"
		],
		"registryDependencies": [
			"button",
			"dropdown-menu",
			"tooltip"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "open-in-chat.json"
	},
	{
		"name": "prompt-input",
		"type": "registry:block",
		"description": "A comprehensive prompt input component for AI chat interfaces with file attachments, drag-and-drop support, model selection, and advanced state management. Features include PromptInputProvider for external state control, async error handling, automatic blob-to-data URL conversion, grouped attachment rendering, and paste image support. Perfect for building ChatGPT-like interfaces.",
		"dependencies": [
			"runed"
		],
		"registryDependencies": [
			"button",
			"textarea",
			"select",
			"dropdown-menu",
			"tooltip"
		],
		"meta": {
			"author": "SikandarJODD",
			"version": "2.0.0",
			"tags": [
				"prompt",
				"input",
				"chat",
				"attachments",
				"upload",
				"ai-interface",
				"provider",
				"state-management",
				"drag-drop",
				"async"
			],
			"category": "AI Input",
			"documentation": "https://ai-elements.vercel.app/components/prompt-input",
			"repository": "https://github.com/SikandarJODD/ai-elements",
			"complexity": "intermediate",
			"updated": "2025-10-15",
			"featured": true,
			"features": [
				"PromptInputProvider for external state management",
				"Async error handling with data preservation",
				"Automatic blob-to-data URL conversion",
				"Grouped attachment rendering (files/images)",
				"File tooltips with full details",
				"Paste image support",
				"Drag and drop file upload",
				"Global drop zone support",
				"Model selection dropdown",
				"File validation (size, type, count)",
				"Svelte 5 runes with watch() from runed"
			],
			"improvements": [
				"Added PromptInputProvider for global state control",
				"Enhanced async submit with proper error handling",
				"Blob URL conversion for API compatibility",
				"Separate rendering for files and images",
				"File attachment tooltips showing full filename and media type",
				"Prevent data loss on submission errors"
			]
		},
		"relativeUrl": "prompt-input.json"
	},
	{
		"name": "reasoning",
		"type": "registry:block",
		"description": "The Reasoning component displays AI reasoning content, automatically opening during streaming and closing when finished.",
		"dependencies": [
			"runed"
		],
		"registryDependencies": [
			"collapsible"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "reasoning.json"
	},
	{
		"name": "response",
		"type": "registry:block",
		"description": "The Response component provides a structured container for displaying AI responses with consistent formatting and styling.",
		"registryDependencies": [],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "response.json"
	},
	{
		"name": "sources",
		"type": "registry:block",
		"description": "The Sources component displays a collapsible list of sources and references used in AI responses, with expandable content and visual indicators.",
		"registryDependencies": [
			"collapsible"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "sources.json"
	},
	{
		"name": "suggestion",
		"type": "registry:block",
		"description": "The Suggestion component provides interactive suggestions for user input, offering quick actions and prompts to enhance the conversation experience.",
		"registryDependencies": [
			"button"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "suggestion.json"
	},
	{
		"name": "task",
		"type": "registry:block",
		"description": "The Task component displays structured task information with collapsible content, file attachments, and progress indicators for AI-generated tasks.",
		"registryDependencies": [
			"collapsible",
			"badge"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "task.json"
	},
	{
		"name": "tool",
		"type": "registry:block",
		"description": "The Tool component provides a comprehensive interface for displaying AI tool usage, including input parameters, execution status, and output results with collapsible sections.",
		"registryDependencies": [
			"code",
			"collapsible",
			"badge"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "tool.json"
	},
	{
		"name": "web-preview",
		"type": "registry:block",
		"description": "The WebPreview component provides an interactive web browser interface for displaying and navigating web content with console logging capabilities.",
		"registryDependencies": [
			"button",
			"input"
		],
		"meta": {
			"author": "SikandarJODD"
		},
		"relativeUrl": "web-preview.json"
	},
	{
		"name": "canvas",
		"type": "registry:block",
		"description": "The Canvas component provides the main container for rendering workflow diagrams with nodes and edges. It wraps @xyflow/svelte's SvelteFlow component with custom styling and configuration for AI workflow visualization.",
		"dependencies": [
			"@xyflow/svelte"
		],
		"registryDependencies": [
			"controls"
		],
		"meta": {
			"author": "SikandarJODD",
			"version": "1.0.0",
			"tags": [
				"workflow",
				"canvas",
				"flow",
				"diagram",
				"visualization"
			],
			"category": "AI Workflow",
			"documentation": "https://ai-elements.vercel.app/components/workflow",
			"repository": "https://github.com/SikandarJODD/ai-elements",
			"complexity": "intermediate",
			"updated": "2025-10-10",
			"featured": false
		},
		"relativeUrl": "canvas.json"
	},
	{
		"name": "connection",
		"type": "registry:block",
		"description": "The Connection component displays the connection line preview when dragging to create new edges between nodes in the workflow. It provides visual feedback during node connection operations.",
		"dependencies": [
			"@xyflow/svelte"
		],
		"registryDependencies": [],
		"meta": {
			"author": "SikandarJODD",
			"version": "1.0.0",
			"tags": [
				"workflow",
				"connection",
				"edge",
				"drag",
				"preview"
			],
			"category": "AI Workflow",
			"documentation": "https://ai-elements.vercel.app/components/workflow",
			"repository": "https://github.com/SikandarJODD/ai-elements",
			"complexity": "intermediate",
			"updated": "2025-10-10",
			"featured": false
		},
		"relativeUrl": "connection.json"
	},
	{
		"name": "controls",
		"type": "registry:block",
		"description": "The Controls component provides interactive controls for manipulating the workflow canvas, including zoom in, zoom out, fit view, and other navigation controls for better workflow visualization.",
		"dependencies": [
			"@xyflow/svelte"
		],
		"registryDependencies": [
			"button"
		],
		"meta": {
			"author": "SikandarJODD",
			"version": "1.0.0",
			"tags": [
				"workflow",
				"controls",
				"zoom",
				"navigation",
				"viewport"
			],
			"category": "AI Workflow",
			"documentation": "https://ai-elements.vercel.app/components/workflow",
			"repository": "https://github.com/SikandarJODD/ai-elements",
			"complexity": "beginner",
			"updated": "2025-10-10",
			"featured": false
		},
		"relativeUrl": "controls.json"
	},
	{
		"name": "edge",
		"type": "registry:block",
		"description": "The Edge component provides custom edge types for workflow connections. Includes Animated edges for active connections and Temporary edges for conditional or inactive paths, with smooth transitions and visual styling.",
		"dependencies": [
			"@xyflow/svelte"
		],
		"registryDependencies": [],
		"meta": {
			"author": "SikandarJODD",
			"version": "1.0.0",
			"tags": [
				"workflow",
				"edge",
				"connection",
				"animated",
				"path"
			],
			"category": "AI Workflow",
			"documentation": "https://ai-elements.vercel.app/components/workflow",
			"repository": "https://github.com/SikandarJODD/ai-elements",
			"complexity": "intermediate",
			"updated": "2025-10-10",
			"featured": false
		},
		"relativeUrl": "edge.json"
	},
	{
		"name": "node",
		"type": "registry:block",
		"description": "The Node component provides a comprehensive set of sub-components for building workflow nodes. Includes Node container with handle management, Header, Title, Description, Action buttons, Content area, and Footer for displaying workflow step information with full customization.",
		"dependencies": [
			"@xyflow/svelte"
		],
		"registryDependencies": [
			"card"
		],
		"meta": {
			"author": "SikandarJODD",
			"version": "1.0.0",
			"tags": [
				"workflow",
				"node",
				"step",
				"card",
				"process"
			],
			"category": "AI Workflow",
			"documentation": "https://ai-elements.vercel.app/components/workflow",
			"repository": "https://github.com/SikandarJODD/ai-elements",
			"complexity": "intermediate",
			"updated": "2025-10-10",
			"featured": true
		},
		"relativeUrl": "node.json"
	},
	{
		"name": "panel",
		"type": "registry:block",
		"description": "The Panel component provides an overlay panel for displaying additional workflow information, settings, or controls. It can be positioned at various locations on the canvas for contextual information display.",
		"dependencies": [
			"@xyflow/svelte"
		],
		"registryDependencies": [
			"card"
		],
		"meta": {
			"author": "SikandarJODD",
			"version": "1.0.0",
			"tags": [
				"workflow",
				"panel",
				"overlay",
				"information",
				"settings"
			],
			"category": "AI Workflow",
			"documentation": "https://ai-elements.vercel.app/components/workflow",
			"repository": "https://github.com/SikandarJODD/ai-elements",
			"complexity": "beginner",
			"updated": "2025-10-10",
			"featured": false
		},
		"relativeUrl": "panel.json"
	},
	{
		"name": "toolbar",
		"type": "registry:block",
		"description": "The Toolbar component provides an action toolbar that appears on hover over workflow nodes. It contains quick action buttons for common node operations like edit, delete, duplicate, or other custom actions.",
		"dependencies": [
			"@xyflow/svelte"
		],
		"registryDependencies": [
			"button"
		],
		"meta": {
			"author": "SikandarJODD",
			"version": "1.0.0",
			"tags": [
				"workflow",
				"toolbar",
				"actions",
				"node-actions",
				"hover"
			],
			"category": "AI Workflow",
			"documentation": "https://ai-elements.vercel.app/components/workflow",
			"repository": "https://github.com/SikandarJODD/ai-elements",
			"complexity": "beginner",
			"updated": "2025-10-10",
			"featured": false
		},
		"relativeUrl": "toolbar.json"
	}
]