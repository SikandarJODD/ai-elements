{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "code",
	"type": "registry:block",
	"description": "The Code component displays formatted code snippets with syntax highlighting, line numbers, and a copy-to-clipboard feature. It supports multiple programming languages and themes for better readability.",
	"dependencies": [
		"svelte-toolbelt",
		"isomorphic-dompurify",
		"shiki",
		"runed",
		"@shikijs/langs",
		"@shikijs/themes"
	],
	"devDependencies": [
		"bits-ui@^2.11.4",
		"@internationalized/date@^3.8.1",
		"tailwind-variants@^1.0.0"
	],
	"registryDependencies": [
		"copy-button",
		"button",
		"tooltip"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$/utils.js\";\r\n  import { codeVariants } from \".\";\r\n  import type { CodeRootProps } from \"./types\";\r\n  import { useCode } from \"./code.svelte.js\";\r\n  import { box } from \"svelte-toolbelt\";\r\n  // import \"../../../../app.css\";\r\n\r\n  let {\r\n    ref = $bindable(null),\r\n    variant = \"default\",\r\n    lang = \"typescript\",\r\n    code,\r\n    class: className,\r\n    hideLines = false,\r\n    highlight = [],\r\n    children,\r\n    ...rest\r\n  }: CodeRootProps = $props();\r\n\r\n  const codeState = useCode({\r\n    code: box.with(() => code),\r\n    hideLines: box.with(() => hideLines),\r\n    highlight: box.with(() => highlight),\r\n    lang: box.with(() => lang),\r\n  });\r\n</script>\r\n\r\n<div {...rest} bind:this={ref} class={cn(codeVariants({ variant }), className)}>\r\n  <div class=\"ai-code-wrapper\">\r\n    {@html codeState.highlighted}\r\n    {@render children?.()}\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  @reference '../../../../app.css';\r\n\r\n  /* Scoped global styles - only affect elements within .ai-code-wrapper */\r\n  /* Dark mode: check dark class on parent, then scope to wrapper */\r\n  :global(.dark) .ai-code-wrapper :global(.shiki),\r\n  :global(.dark) .ai-code-wrapper :global(.shiki span) {\r\n    color: var(--shiki-dark) !important;\r\n    font-style: var(--shiki-dark-font-style) !important;\r\n    font-weight: var(--shiki-dark-font-weight) !important;\r\n    text-decoration: var(--shiki-dark-text-decoration) !important;\r\n  }\r\n\r\n  /* Shiki see: https://shiki.matsu.io/guide/dual-themes#class-based-dark-mode */\r\n  :global(html.dark) .ai-code-wrapper :global(.shiki),\r\n  :global(html.dark) .ai-code-wrapper :global(.shiki span) {\r\n    color: var(--shiki-dark) !important;\r\n    font-style: var(--shiki-dark-font-style) !important;\r\n    font-weight: var(--shiki-dark-font-weight) !important;\r\n    text-decoration: var(--shiki-dark-text-decoration) !important;\r\n  }\r\n\r\n  .ai-code-wrapper :global(pre.shiki) {\r\n    @apply overflow-x-auto rounded-lg bg-inherit py-4 text-sm;\r\n  }\r\n\r\n  .ai-code-wrapper :global(pre.shiki:not([data-code-overflow] *):not([data-code-overflow])) {\r\n    @apply overflow-y-auto;\r\n    max-height: min(100%, 650px);\r\n  }\r\n\r\n  .ai-code-wrapper :global(pre.shiki code) {\r\n    @apply grid min-w-full rounded-none border-0 bg-transparent p-0 break-words;\r\n    counter-reset: line;\r\n    box-decoration-break: clone;\r\n  }\r\n\r\n  .ai-code-wrapper :global(pre.line-numbers) {\r\n    counter-reset: step;\r\n    counter-increment: step 0;\r\n  }\r\n\r\n  .ai-code-wrapper :global(pre.line-numbers .line::before) {\r\n    content: counter(step);\r\n    counter-increment: step;\r\n    display: inline-block;\r\n    width: 1.8rem;\r\n    margin-right: 1.4rem;\r\n    text-align: right;\r\n  }\r\n\r\n  .ai-code-wrapper :global(pre.line-numbers .line::before) {\r\n    @apply text-muted-foreground;\r\n  }\r\n\r\n  .ai-code-wrapper :global(pre .line.line--highlighted) {\r\n    @apply bg-secondary;\r\n    /* border-l-2 border-primary/40 if needed */\r\n  }\r\n\r\n  .ai-code-wrapper :global(pre .line.line--highlighted span) {\r\n    @apply relative;\r\n  }\r\n\r\n  .ai-code-wrapper :global(pre .line) {\r\n    @apply inline-block min-h-4 w-full px-4 py-0.5;\r\n  }\r\n\r\n  .ai-code-wrapper :global(pre.line-numbers .line) {\r\n    @apply px-2;\r\n  }\r\n</style>\r\n",
			"type": "registry:component",
			"target": "ai-elements/code/Code.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import CopyButton  from \"../copy-button/CopyButton.svelte\";\r\n  import { cn } from \"$UTILS$/utils.js\";\r\n  import { useCodeCopyButton } from \"./code.svelte.js\";\r\n  import type { CodeCopyButtonProps } from \"./types.js\";\r\n\r\n  let {\r\n    ref = $bindable(null),\r\n    variant = \"ghost\",\r\n    size = \"icon\",\r\n    class: className,\r\n    ...rest\r\n  }: CodeCopyButtonProps = $props();\r\n\r\n  const copyButton = useCodeCopyButton();\r\n</script>\r\n\r\n<CopyButton\r\n  class={cn(\"absolute top-2 right-2\", className)}\r\n  text={copyButton.code}\r\n  {variant}\r\n  {size}\r\n  {...rest}\r\n/>\r\n",
			"type": "registry:component",
			"target": "ai-elements/code/CodeCopyButton.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { useCodeOverflow } from './code.svelte.js';\r\n\timport { box } from 'svelte-toolbelt';\r\n\timport type { CodeOverflowProps } from './types';\r\n\timport { cn } from '$UTILS$/utils.js';\r\n  import Button from '$lib/components/ui/button/button.svelte';\r\n\r\n\tlet {\r\n\t\tcollapsed = $bindable(true),\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...props\r\n\t}: CodeOverflowProps = $props();\r\n\r\n\tconst state = useCodeOverflow({\r\n\t\tcollapsed: box.with(\r\n\t\t\t() => collapsed,\r\n\t\t\t(v) => (collapsed = v)\r\n\t\t)\r\n\t});\r\n</script>\r\n\r\n<div\r\n\t{...props}\r\n\tdata-code-overflow\r\n\tdata-collapsed={collapsed}\r\n\tclass={cn('relative overflow-y-hidden data-[collapsed=true]:max-h-[300px]', className)}\r\n>\r\n\t{@render children?.()}\r\n\t{#if collapsed}\r\n\t\t<div\r\n\t\t\tclass=\"from-background absolute bottom-0 left-0 z-10 h-full w-full bg-gradient-to-t to-transparent\"\r\n\t\t></div>\r\n\t{/if}\r\n\t{#if collapsed}\r\n\t\t<Button\r\n\t\t\tvariant=\"secondary\"\r\n\t\t\tsize=\"sm\"\r\n\t\t\tclass=\"absolute bottom-0 left-1/2 z-20 w-fit -translate-x-1/2\"\r\n\t\t\tonclick={state.toggleCollapsed}\r\n\t\t>\r\n\t\t\tExpand\r\n\t\t</Button>\r\n\t\t{:else}\r\n\t\t<Button\r\n\t\t\tvariant=\"secondary\"\r\n\t\t\tsize=\"sm\"\r\n\t\t\tclass=\"absolute bottom-6 left-1/2 z-20 w-fit -translate-x-1/2\"\r\n\t\t\tonclick={state.toggleCollapsed}\r\n\t\t>\r\n\t\t\tCollapse\r\n\t\t</Button>\r\n\t{/if}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/code/CodeOverflow.svelte"
		},
		{
			"content": "import { Context } from 'runed';\r\nimport type { ReadableBoxedValues, WritableBoxedValues } from 'svelte-toolbelt';\r\nimport type { CodeRootProps } from './types';\r\nimport { highlighter } from './shiki';\r\nimport DOMPurify from 'isomorphic-dompurify';\r\nimport type { HighlighterCore } from 'shiki';\r\n\r\ntype CodeOverflowStateProps = WritableBoxedValues<{\r\n\tcollapsed: boolean;\r\n}>;\r\n\r\nclass CodeOverflowState {\r\n\tconstructor(readonly opts: CodeOverflowStateProps) {\r\n\t\tthis.toggleCollapsed = this.toggleCollapsed.bind(this);\r\n\t}\r\n\r\n\ttoggleCollapsed() {\r\n\t\tthis.opts.collapsed.current = !this.opts.collapsed.current;\r\n\t}\r\n\r\n\tget collapsed() {\r\n\t\treturn this.opts.collapsed.current;\r\n\t}\r\n}\r\n\r\ntype CodeRootStateProps = ReadableBoxedValues<{\r\n\tcode: string;\r\n\tlang: NonNullable<CodeRootProps['lang']>;\r\n\thideLines: boolean;\r\n\thighlight: CodeRootProps['highlight'];\r\n}>;\r\n\r\nclass CodeRootState {\r\n\thighlighter: HighlighterCore | null = $state(null);\r\n\r\n\tconstructor(\r\n\t\treadonly opts: CodeRootStateProps,\r\n\t\treadonly overflow?: CodeOverflowState\r\n\t) {\r\n\t\thighlighter.then((hl) => (this.highlighter = hl));\r\n\t}\r\n\r\n\thighlight(code: string) {\r\n\t\treturn this.highlighter?.codeToHtml(code, {\r\n\t\t\tlang: this.opts.lang.current,\r\n\t\t\tthemes: {\r\n\t\t\t\tlight: 'github-light-default',\r\n\t\t\t\tdark: 'github-dark-default'\r\n\t\t\t},\r\n\t\t\ttransformers: [\r\n\t\t\t\t{\r\n\t\t\t\t\tpre: (el) => {\r\n\t\t\t\t\t\tel.properties.style = '';\r\n\r\n\t\t\t\t\t\tif (!this.opts.hideLines.current) {\r\n\t\t\t\t\t\t\tel.properties.class += ' line-numbers';\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn el;\r\n\t\t\t\t\t},\r\n\t\t\t\t\tline: (node, line) => {\r\n\t\t\t\t\t\tif (within(line, this.opts.highlight.current)) {\r\n\t\t\t\t\t\t\tnode.properties.class = node.properties.class + ' line--highlighted';\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn node;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\tget code() {\r\n\t\treturn this.opts.code.current;\r\n\t}\r\n\r\n\thighlighted = $derived(DOMPurify.sanitize(this.highlight(this.code) ?? ''));\r\n}\r\n\r\nfunction within(num: number, range: CodeRootProps['highlight']) {\r\n\tif (!range) return false;\r\n\r\n\tlet within = false;\r\n\r\n\tfor (const r of range) {\r\n\t\tif (typeof r === 'number') {\r\n\t\t\tif (num === r) {\r\n\t\t\t\twithin = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif (r[0] <= num && num <= r[1]) {\r\n\t\t\twithin = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn within;\r\n}\r\n\r\nclass CodeCopyButtonState {\r\n\tconstructor(readonly root: CodeRootState) {}\r\n\r\n\tget code() {\r\n\t\treturn this.root.opts.code.current;\r\n\t}\r\n}\r\n\r\nconst overflowCtx = new Context<CodeOverflowState>('code-overflow-state');\r\n\r\nconst ctx = new Context<CodeRootState>('code-root-state');\r\n\r\nexport function useCodeOverflow(props: CodeOverflowStateProps) {\r\n\treturn overflowCtx.set(new CodeOverflowState(props));\r\n}\r\n\r\nexport function useCode(props: CodeRootStateProps) {\r\n\treturn ctx.set(new CodeRootState(props, overflowCtx.getOr(undefined)));\r\n}\r\n\r\nexport function useCodeCopyButton() {\r\n\treturn new CodeCopyButtonState(ctx.get());\r\n}",
			"type": "registry:file",
			"target": "ai-elements/code/code.svelte.ts"
		},
		{
			"content": "// Follows the best practices established in https://shiki.matsu.io/guide/best-performance\r\nimport { createJavaScriptRegexEngine } from \"shiki/engine/javascript\";\r\nimport { createHighlighterCore } from \"shiki/core\";\r\n\r\nconst bundledLanguages = {\r\n  bash: () => import(\"@shikijs/langs/bash\"),\r\n  diff: () => import(\"@shikijs/langs/diff\"),\r\n  javascript: () => import(\"@shikijs/langs/javascript\"),\r\n  json: () => import(\"@shikijs/langs/json\"),\r\n  svelte: () => import(\"@shikijs/langs/svelte\"),\r\n  typescript: () => import(\"@shikijs/langs/typescript\"),\r\n  python: () => import(\"@shikijs/langs/python\"),\r\n  tsx: () => import(\"@shikijs/langs/tsx\"),\r\n  jsx: () => import(\"@shikijs/langs/jsx\"),\r\n  css: () => import(\"@shikijs/langs/css\"),\r\n  text: () => import(\"@shikijs/langs/markdown\"),\r\n};\r\n\r\n/** The languages configured for the highlighter */\r\nexport type SupportedLanguage = keyof typeof bundledLanguages;\r\n\r\n/** A preloaded highlighter instance. */\r\nexport const highlighter = createHighlighterCore({\r\n  themes: [\r\n    import(\"@shikijs/themes/github-light-default\"),\r\n    import(\"@shikijs/themes/github-dark-default\"),\r\n  ],\r\n  langs: Object.entries(bundledLanguages).map(([_, lang]) => lang),\r\n  engine: createJavaScriptRegexEngine(),\r\n});\r\n",
			"type": "registry:file",
			"target": "ai-elements/code/shiki.ts"
		},
		{
			"content": "import type { WithChildren, WithoutChildren } from \"bits-ui\";\r\nimport type { CodeVariant } from \".\";\r\nimport type { SupportedLanguage } from \"./shiki\";\r\nimport type { HTMLAttributes } from \"svelte/elements\";\r\nimport type { CopyButtonPropsWithoutHTML } from \"../copy-button/types\";\r\n\r\nexport type CodeRootPropsWithoutHTML = WithChildren<{\r\n  ref?: HTMLDivElement | null;\r\n  variant?: CodeVariant;\r\n  lang?: SupportedLanguage;\r\n  code: string;\r\n  class?: string;\r\n  hideLines?: boolean;\r\n  highlight?: (number | [number, number])[];\r\n}>;\r\n\r\nexport type CodeRootProps = CodeRootPropsWithoutHTML &\r\n  WithoutChildren<HTMLAttributes<HTMLDivElement>>;\r\n\r\nexport type CodeCopyButtonPropsWithoutHTML = Omit<\r\n  CopyButtonPropsWithoutHTML,\r\n  \"text\"\r\n>;\r\n\r\nexport type CodeCopyButtonProps = CodeCopyButtonPropsWithoutHTML &\r\n  WithoutChildren<HTMLAttributes<HTMLButtonElement>>;\r\n\r\nexport type CodeOverflowPropsWithoutHTML = WithChildren<{\r\n  collapsed?: boolean;\r\n}>;\r\n\r\nexport type CodeOverflowProps = CodeOverflowPropsWithoutHTML &\r\n  WithoutChildren<HTMLAttributes<HTMLDivElement>>;\r\n",
			"type": "registry:file",
			"target": "ai-elements/code/types.ts"
		},
		{
			"content": "import { tv, type VariantProps } from 'tailwind-variants';\r\nimport Root from './Code.svelte';\r\nimport Overflow from './CodeOverflow.svelte';\r\nimport CopyButton from './CodeCopyButton.svelte';\r\nimport type { CodeCopyButtonProps, CodeRootProps } from './types';\r\n\r\nexport const codeVariants = tv({\r\n\tbase: 'not-prose relative h-full overflow-auto rounded-lg border',\r\n\tvariants: {\r\n\t\tvariant: {\r\n\t\t\tdefault: 'border-border bg-card',\r\n\t\t\tsecondary: 'bg-secondary/50 border-transparent'\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport type CodeVariant = VariantProps<typeof codeVariants>['variant'];\r\n\r\nexport {\r\n\tRoot,\r\n\tCopyButton,\r\n\tOverflow,\r\n\ttype CodeRootProps as RootProps,\r\n\ttype CodeCopyButtonProps as CopyButtonProps\r\n};",
			"type": "registry:file",
			"target": "ai-elements/code/index.ts"
		}
	]
}