{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "code",
	"title": "Code Block",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The Code component displays formatted code snippets with syntax highlighting, line numbers, and a copy-to-clipboard feature. It supports multiple programming languages and themes for better readability.",
	"dependencies": [
		"svelte-toolbelt",
		"isomorphic-dompurify",
		"shiki",
		"runed",
		"@shikijs/langs",
		"@shikijs/themes"
	],
	"devDependencies": [
		"bits-ui@^2.14.1",
		"@internationalized/date@^3.8.1",
		"tailwind-variants@^1.0.0"
	],
	"registryDependencies": [
		"./copy-button.json",
		"button",
		"tooltip"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { codeVariants } from \".\";\n\timport type { CodeRootProps } from \"./types\";\n\timport { useCode } from \"./code.svelte.js\";\n\timport { box } from \"svelte-toolbelt\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tvariant = \"default\",\n\t\tlang = \"typescript\",\n\t\tcode,\n\t\tclass: className,\n\t\thideLines = false,\n\t\thighlight = [],\n\t\tchildren,\n\t\t...rest\n\t}: CodeRootProps = $props();\n\n\tconst codeState = useCode({\n\t\tcode: box.with(() => code),\n\t\thideLines: box.with(() => hideLines),\n\t\thighlight: box.with(() => highlight),\n\t\tlang: box.with(() => lang),\n\t});\n</script>\n\n<div {...rest} bind:this={ref} class={cn(codeVariants({ variant }), className)}>\n\t<div class=\"ai-code-wrapper\">\n\t\t{@html codeState.highlighted}\n\t\t{@render children?.()}\n\t</div>\n</div>\n\n<style>\n\t@reference '../../../../app.css';\n\n\t/* Scoped global styles - only affect elements within .ai-code-wrapper */\n\t/* Dark mode: check dark class on parent, then scope to wrapper */\n\t:global(.dark) .ai-code-wrapper :global(.shiki),\n\t:global(.dark) .ai-code-wrapper :global(.shiki span) {\n\t\tcolor: var(--shiki-dark) !important;\n\t\tfont-style: var(--shiki-dark-font-style) !important;\n\t\tfont-weight: var(--shiki-dark-font-weight) !important;\n\t\ttext-decoration: var(--shiki-dark-text-decoration) !important;\n\t}\n\n\t/* Shiki see: https://shiki.matsu.io/guide/dual-themes#class-based-dark-mode */\n\t:global(html.dark) .ai-code-wrapper :global(.shiki),\n\t:global(html.dark) .ai-code-wrapper :global(.shiki span) {\n\t\tcolor: var(--shiki-dark) !important;\n\t\tfont-style: var(--shiki-dark-font-style) !important;\n\t\tfont-weight: var(--shiki-dark-font-weight) !important;\n\t\ttext-decoration: var(--shiki-dark-text-decoration) !important;\n\t}\n\n\t.ai-code-wrapper :global(pre.shiki) {\n\t\t@apply overflow-x-auto rounded-lg bg-inherit py-4 text-sm;\n\t}\n\n\t.ai-code-wrapper :global(pre.shiki:not([data-code-overflow] *):not([data-code-overflow])) {\n\t\t@apply overflow-y-auto;\n\t\tmax-height: min(100%, 650px);\n\t}\n\n\t.ai-code-wrapper :global(pre.shiki code) {\n\t\t@apply grid min-w-full rounded-none border-0 bg-transparent p-0 break-words;\n\t\tcounter-reset: line;\n\t\tbox-decoration-break: clone;\n\t}\n\n\t.ai-code-wrapper :global(pre.line-numbers) {\n\t\tcounter-reset: step;\n\t\tcounter-increment: step 0;\n\t}\n\n\t.ai-code-wrapper :global(pre.line-numbers .line::before) {\n\t\tcontent: counter(step);\n\t\tcounter-increment: step;\n\t\tdisplay: inline-block;\n\t\twidth: 1.8rem;\n\t\tmargin-right: 1.4rem;\n\t\ttext-align: right;\n\t}\n\n\t.ai-code-wrapper :global(pre.line-numbers .line::before) {\n\t\t@apply text-muted-foreground;\n\t}\n\n\t.ai-code-wrapper :global(pre .line.line--highlighted) {\n\t\t@apply bg-secondary;\n\t\t/* border-l-2 border-primary/40 if needed */\n\t}\n\n\t.ai-code-wrapper :global(pre .line.line--highlighted span) {\n\t\t@apply relative;\n\t}\n\n\t.ai-code-wrapper :global(pre .line) {\n\t\t@apply inline-block min-h-4 w-full px-4 py-0.5;\n\t}\n\n\t.ai-code-wrapper :global(pre.line-numbers .line) {\n\t\t@apply px-2;\n\t}\n</style>\n",
			"type": "registry:component",
			"target": "ai-elements/code/Code.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { CopyButton } from \"$COMPONENTS$/ai-elements/copy-button/index.js\";\n\timport { cn } from \"$UTILS$\";\n\timport { useCodeCopyButton } from \"./code.svelte.js\";\n\timport type { CodeCopyButtonProps } from \"./types.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tvariant = \"ghost\",\n\t\tsize = \"icon\",\n\t\tclass: className,\n\t\t...rest\n\t}: CodeCopyButtonProps = $props();\n\n\tconst copyButton = useCodeCopyButton();\n</script>\n\n<CopyButton\n\tclass={cn(\"absolute top-2 right-2\", className)}\n\ttext={copyButton.code}\n\t{variant}\n\t{size}\n\t{...rest}\n/>\n",
			"type": "registry:component",
			"target": "ai-elements/code/CodeCopyButton.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { useCodeOverflow } from \"./code.svelte.js\";\n\timport { box } from \"svelte-toolbelt\";\n\timport type { CodeOverflowProps } from \"./types\";\n\timport { cn } from \"$UTILS$\";\n\timport { Button } from \"$COMPONENTS$/ui/button\";\n\n\tlet {\n\t\tcollapsed = $bindable(true),\n\t\tclass: className,\n\t\tchildren,\n\t\t...props\n\t}: CodeOverflowProps = $props();\n\n\tconst state = useCodeOverflow({\n\t\tcollapsed: box.with(\n\t\t\t() => collapsed,\n\t\t\t(v) => (collapsed = v)\n\t\t),\n\t});\n</script>\n\n<div\n\t{...props}\n\tdata-code-overflow\n\tdata-collapsed={collapsed}\n\tclass={cn(\"relative overflow-y-hidden data-[collapsed=true]:max-h-[300px]\", className)}\n>\n\t{@render children?.()}\n\t{#if collapsed}\n\t\t<div\n\t\t\tclass=\"from-background absolute bottom-0 left-0 z-10 h-full w-full bg-gradient-to-t to-transparent\"\n\t\t></div>\n\t{/if}\n\t{#if collapsed}\n\t\t<Button\n\t\t\tvariant=\"secondary\"\n\t\t\tsize=\"sm\"\n\t\t\tclass=\"absolute bottom-0 left-1/2 z-20 w-fit -translate-x-1/2\"\n\t\t\tonclick={state.toggleCollapsed}\n\t\t>\n\t\t\tExpand\n\t\t</Button>\n\t{:else}\n\t\t<Button\n\t\t\tvariant=\"secondary\"\n\t\t\tsize=\"sm\"\n\t\t\tclass=\"absolute bottom-6 left-1/2 z-20 w-fit -translate-x-1/2\"\n\t\t\tonclick={state.toggleCollapsed}\n\t\t>\n\t\t\tCollapse\n\t\t</Button>\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/code/CodeOverflow.svelte"
		},
		{
			"content": "import { Context } from \"runed\";\nimport type { ReadableBoxedValues, WritableBoxedValues } from \"svelte-toolbelt\";\nimport type { CodeRootProps } from \"./types\";\nimport { highlighter } from \"./shiki\";\nimport DOMPurify from \"isomorphic-dompurify\";\nimport type { HighlighterCore } from \"shiki\";\n\ntype CodeOverflowStateProps = WritableBoxedValues<{\n\tcollapsed: boolean;\n}>;\n\nclass CodeOverflowState {\n\tconstructor(readonly opts: CodeOverflowStateProps) {\n\t\tthis.toggleCollapsed = this.toggleCollapsed.bind(this);\n\t}\n\n\ttoggleCollapsed() {\n\t\tthis.opts.collapsed.current = !this.opts.collapsed.current;\n\t}\n\n\tget collapsed() {\n\t\treturn this.opts.collapsed.current;\n\t}\n}\n\ntype CodeRootStateProps = ReadableBoxedValues<{\n\tcode: string;\n\tlang: NonNullable<CodeRootProps[\"lang\"]>;\n\thideLines: boolean;\n\thighlight: CodeRootProps[\"highlight\"];\n}>;\n\nclass CodeRootState {\n\thighlighter: HighlighterCore | null = $state(null);\n\n\tconstructor(\n\t\treadonly opts: CodeRootStateProps,\n\t\treadonly overflow?: CodeOverflowState\n\t) {\n\t\thighlighter.then((hl) => (this.highlighter = hl));\n\t}\n\n\thighlight(code: string) {\n\t\treturn this.highlighter?.codeToHtml(code, {\n\t\t\tlang: this.opts.lang.current,\n\t\t\tthemes: {\n\t\t\t\tlight: \"github-light-default\",\n\t\t\t\tdark: \"github-dark-default\",\n\t\t\t},\n\t\t\ttransformers: [\n\t\t\t\t{\n\t\t\t\t\tpre: (el) => {\n\t\t\t\t\t\tel.properties.style = \"\";\n\n\t\t\t\t\t\tif (!this.opts.hideLines.current) {\n\t\t\t\t\t\t\tel.properties.class += \" line-numbers\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn el;\n\t\t\t\t\t},\n\t\t\t\t\tline: (node, line) => {\n\t\t\t\t\t\tif (within(line, this.opts.highlight.current)) {\n\t\t\t\t\t\t\tnode.properties.class = node.properties.class + \" line--highlighted\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tget code() {\n\t\treturn this.opts.code.current;\n\t}\n\n\thighlighted = $derived(DOMPurify.sanitize(this.highlight(this.code) ?? \"\"));\n}\n\nfunction within(num: number, range: CodeRootProps[\"highlight\"]) {\n\tif (!range) return false;\n\n\tlet within = false;\n\n\tfor (const r of range) {\n\t\tif (typeof r === \"number\") {\n\t\t\tif (num === r) {\n\t\t\t\twithin = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (r[0] <= num && num <= r[1]) {\n\t\t\twithin = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn within;\n}\n\nclass CodeCopyButtonState {\n\tconstructor(readonly root: CodeRootState) {}\n\n\tget code() {\n\t\treturn this.root.opts.code.current;\n\t}\n}\n\nconst overflowCtx = new Context<CodeOverflowState>(\"code-overflow-state\");\n\nconst ctx = new Context<CodeRootState>(\"code-root-state\");\n\nexport function useCodeOverflow(props: CodeOverflowStateProps) {\n\treturn overflowCtx.set(new CodeOverflowState(props));\n}\n\nexport function useCode(props: CodeRootStateProps) {\n\treturn ctx.set(new CodeRootState(props, overflowCtx.getOr(undefined)));\n}\n\nexport function useCodeCopyButton() {\n\treturn new CodeCopyButtonState(ctx.get());\n}\n",
			"type": "registry:file",
			"target": "ai-elements/code/code.svelte.ts"
		},
		{
			"content": "// Follows the best practices established in https://shiki.matsu.io/guide/best-performance\nimport { createJavaScriptRegexEngine } from \"shiki/engine/javascript\";\nimport { createHighlighterCore } from \"shiki/core\";\n\nconst bundledLanguages = {\n\tbash: () => import(\"@shikijs/langs/bash\"),\n\tdiff: () => import(\"@shikijs/langs/diff\"),\n\tjavascript: () => import(\"@shikijs/langs/javascript\"),\n\tjson: () => import(\"@shikijs/langs/json\"),\n\tsvelte: () => import(\"@shikijs/langs/svelte\"),\n\ttypescript: () => import(\"@shikijs/langs/typescript\"),\n\tpython: () => import(\"@shikijs/langs/python\"),\n\ttsx: () => import(\"@shikijs/langs/tsx\"),\n\tjsx: () => import(\"@shikijs/langs/jsx\"),\n\tcss: () => import(\"@shikijs/langs/css\"),\n\ttext: () => import(\"@shikijs/langs/markdown\"),\n};\n\n/** The languages configured for the highlighter */\nexport type SupportedLanguage = keyof typeof bundledLanguages;\n\n/** A preloaded highlighter instance. */\nexport const highlighter = createHighlighterCore({\n\tthemes: [\n\t\timport(\"@shikijs/themes/github-light-default\"),\n\t\timport(\"@shikijs/themes/github-dark-default\"),\n\t],\n\tlangs: Object.entries(bundledLanguages).map(([_, lang]) => lang),\n\tengine: createJavaScriptRegexEngine(),\n});\n",
			"type": "registry:file",
			"target": "ai-elements/code/shiki.ts"
		},
		{
			"content": "import type { WithChildren, WithoutChildren } from \"bits-ui\";\nimport type { CodeVariant } from \".\";\nimport type { SupportedLanguage } from \"./shiki\";\nimport type { HTMLAttributes } from \"svelte/elements\";\nimport type { CopyButtonPropsWithoutHTML } from \"../copy-button/types\";\n\nexport type CodeRootPropsWithoutHTML = WithChildren<{\n\tref?: HTMLDivElement | null;\n\tvariant?: CodeVariant;\n\tlang?: SupportedLanguage;\n\tcode: string;\n\tclass?: string;\n\thideLines?: boolean;\n\thighlight?: (number | [number, number])[];\n}>;\n\nexport type CodeRootProps = CodeRootPropsWithoutHTML &\n\tWithoutChildren<HTMLAttributes<HTMLDivElement>>;\n\nexport type CodeCopyButtonPropsWithoutHTML = Omit<CopyButtonPropsWithoutHTML, \"text\">;\n\nexport type CodeCopyButtonProps = CodeCopyButtonPropsWithoutHTML &\n\tWithoutChildren<HTMLAttributes<HTMLButtonElement>>;\n\nexport type CodeOverflowPropsWithoutHTML = WithChildren<{\n\tcollapsed?: boolean;\n}>;\n\nexport type CodeOverflowProps = CodeOverflowPropsWithoutHTML &\n\tWithoutChildren<HTMLAttributes<HTMLDivElement>>;\n",
			"type": "registry:file",
			"target": "ai-elements/code/types.ts"
		},
		{
			"content": "import { tv, type VariantProps } from \"tailwind-variants\";\nimport Root from \"./Code.svelte\";\nimport Overflow from \"./CodeOverflow.svelte\";\nimport CopyButton from \"./CodeCopyButton.svelte\";\nimport type { CodeCopyButtonProps, CodeRootProps } from \"./types\";\n\nexport const codeVariants = tv({\n\tbase: \"not-prose relative h-full overflow-auto rounded-lg border\",\n\tvariants: {\n\t\tvariant: {\n\t\t\tdefault: \"border-border bg-card\",\n\t\t\tsecondary: \"bg-secondary/50 border-transparent\",\n\t\t},\n\t},\n});\n\nexport type CodeVariant = VariantProps<typeof codeVariants>[\"variant\"];\n\nexport {\n\tRoot,\n\tCopyButton,\n\tOverflow,\n\ttype CodeRootProps as RootProps,\n\ttype CodeCopyButtonProps as CopyButtonProps,\n};\n",
			"type": "registry:file",
			"target": "ai-elements/code/index.ts"
		}
	]
}