{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "tool",
	"type": "registry:block",
	"description": "The Tool component provides a comprehensive interface for displaying AI tool usage, including input parameters, execution status, and output results with collapsible sections.",
	"dependencies": [
		"runed@^0.31.1"
	],
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"code",
		"collapsible",
		"badge"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n  import { Collapsible } from \"$lib/components/ui/collapsible/index.js\";\r\n  import { cn } from \"$UTILS$/utils.js\";\r\n  import type { Snippet } from \"svelte\";\r\n\r\n  interface ToolProps {\r\n    class?: string;\r\n    children?: Snippet;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let { class: className = \"\", children, ...restProps }: ToolProps = $props();\r\n\r\n  let id = $derived.by(() => crypto.randomUUID());\r\n</script>\r\n\r\n<Collapsible\r\n  {id}\r\n  class={cn(\"not-prose mb-4 w-full rounded-md border\", className)}\r\n  {...restProps}\r\n>\r\n  {@render children?.()}\r\n</Collapsible>\r\n",
			"type": "registry:component",
			"target": "ai-elements/tool/Tool.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { CollapsibleTrigger } from \"$lib/components/ui/collapsible/index.js\";\r\n  import { Badge } from \"$lib/components/ui/badge/index.js\";\r\n  import { cn } from \"$UTILS$/utils.js\";\r\n  import {\r\n    CheckCircleIcon,\r\n    ChevronDownIcon,\r\n    CircleIcon,\r\n    ClockIcon,\r\n    WrenchIcon,\r\n    XCircleIcon,\r\n  } from \"@lucide/svelte\";\r\n\r\n  type ToolUIPartType = string;\r\n  type ToolUIPartState =\r\n    | \"input-streaming\"\r\n    | \"input-available\"\r\n    | \"output-available\"\r\n    | \"output-error\";\r\n\r\n  interface ToolHeaderProps {\r\n    type: ToolUIPartType;\r\n    state: ToolUIPartState;\r\n    class?: string;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let {\r\n    type,\r\n    state,\r\n    class: className = \"\",\r\n    ...restProps\r\n  }: ToolHeaderProps = $props();\r\n\r\n  let getStatusBadge = $derived.by(() => {\r\n    let labels = {\r\n      \"input-streaming\": \"Pending\",\r\n      \"input-available\": \"Running\",\r\n      \"output-available\": \"Completed\",\r\n      \"output-error\": \"Error\",\r\n    } as const;\r\n\r\n    let icons = {\r\n      \"input-streaming\": CircleIcon,\r\n      \"input-available\": ClockIcon,\r\n      \"output-available\": CheckCircleIcon,\r\n      \"output-error\": XCircleIcon,\r\n    } as const;\r\n\r\n    let IconComponent = icons[state];\r\n    let label = labels[state];\r\n\r\n    return { IconComponent, label };\r\n  });\r\n  let IconComponent = $derived(getStatusBadge.IconComponent);\r\n\r\n  let id = $props.id();\r\n</script>\r\n\r\n<CollapsibleTrigger\r\n  {id}\r\n  class={cn(\"flex w-full items-center justify-between gap-4 p-3\", className)}\r\n  {...restProps}\r\n>\r\n  <div class=\"flex items-center gap-2\">\r\n    <WrenchIcon class=\"size-4 text-muted-foreground\" />\r\n    <span class=\"font-medium text-sm\">{type}</span>\r\n    <Badge class=\"gap-1.5 rounded-full text-xs\" variant=\"secondary\">\r\n      <!-- <svelte:component\r\n        this={getStatusBadge.IconComponent}\r\n        class={cn(\r\n          \"size-4\",\r\n          state === \"input-available\" && \"animate-pulse\",\r\n          state === \"output-available\" && \"text-green-600\",\r\n          state === \"output-error\" && \"text-red-600\"\r\n        )}\r\n      /> -->\r\n      <IconComponent\r\n        class={cn(\r\n          \"size-4\",\r\n          state === \"input-available\" && \"animate-pulse\",\r\n          state === \"output-available\" && \"text-green-600\",\r\n          state === \"output-error\" && \"text-red-600\"\r\n        )}\r\n      />\r\n\r\n      {getStatusBadge.label}\r\n    </Badge>\r\n  </div>\r\n  <ChevronDownIcon\r\n    class=\"size-4 text-muted-foreground transition-transform group-data-[state=open]:rotate-180\"\r\n  />\r\n</CollapsibleTrigger>\r\n",
			"type": "registry:component",
			"target": "ai-elements/tool/ToolHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { CollapsibleContent } from \"$lib/components/ui/collapsible/index.js\";\r\n  import { cn } from \"$UTILS$/utils.js\";\r\n  import type { Snippet } from \"svelte\";\r\n\r\n  interface ToolContentProps {\r\n    class?: string;\r\n    children?: Snippet;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let { class: className = \"\", children, ...restProps }: ToolContentProps = $props();\r\n\r\n  let id = $props.id();;\r\n</script>\r\n\r\n<CollapsibleContent\r\n  {id}\r\n  class={cn(\r\n    \"data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in\",\r\n    className\r\n  )}\r\n  {...restProps}\r\n>\r\n  {@render children?.()}\r\n</CollapsibleContent>",
			"type": "registry:component",
			"target": "ai-elements/tool/ToolContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$/utils.js\";\r\n  import * as Code from \"$lib/components/ai-elements/code/index.js\";\r\n\r\n  interface ToolInputProps {\r\n    class?: string;\r\n    input: any;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let { class: className = \"\", input, ...restProps }: ToolInputProps = $props();\r\n\r\n  let formattedInput = $derived.by(() => {\r\n    return JSON.stringify(input, null, 2);\r\n  });\r\n\r\n  let id = $props.id();\r\n</script>\r\n\r\n<div\r\n  {id}\r\n  class={cn(\"space-y-2 overflow-hidden p-4\", className)}\r\n  {...restProps}\r\n>\r\n  <h4 class=\"font-medium text-muted-foreground text-xs uppercase tracking-wide\">\r\n    Parameters\r\n  </h4>\r\n  <div class=\"rounded-md bg-muted/50\">\r\n    <Code.Root code={formattedInput} lang=\"json\" hideLines>\r\n      <Code.CopyButton />\r\n    </Code.Root>\r\n  </div>\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/tool/ToolInput.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$/utils.js\";\r\n  import * as Code from \"$lib/components/ai-elements/code/index.js\";\r\n  import type { Snippet } from \"svelte\";\r\n  import type { SupportedLanguage } from \"../code/shiki\";\r\n\r\n  interface ToolOutputProps {\r\n    class?: string;\r\n    output?: any;\r\n    errorText?: string;\r\n    children?: Snippet;\r\n    [key: string]: any;\r\n  }\r\n\r\n  let {\r\n    class: className = \"\",\r\n    output,\r\n    errorText,\r\n    children,\r\n    ...restProps\r\n  }: ToolOutputProps = $props();\r\n\r\n  let shouldRender = $derived.by(() => {\r\n    return !!(output || errorText);\r\n  });\r\n  type OutputComp = {\r\n    type: \"code\" | \"text\";\r\n    content: string;\r\n    language: SupportedLanguage;\r\n  };\r\n\r\n  let outputComponent: OutputComp | null = $derived.by(() => {\r\n    if (!output) return null;\r\n\r\n    if (typeof output === \"object\") {\r\n      return {\r\n        type: \"code\",\r\n        content: JSON.stringify(output, null, 2),\r\n        language: \"json\",\r\n      };\r\n    } else if (typeof output === \"string\") {\r\n      return {\r\n        type: \"code\",\r\n        content: output,\r\n        language: \"json\",\r\n      };\r\n    } else {\r\n      return {\r\n        type: \"text\",\r\n        content: String(output),\r\n        language: \"text\",\r\n      };\r\n    }\r\n  });\r\n\r\n  let id = $props.id();\r\n</script>\r\n\r\n{#if shouldRender}\r\n  <div {id} class={cn(\"space-y-2 p-4\", className)} {...restProps}>\r\n    <h4\r\n      class=\"font-medium text-muted-foreground text-xs uppercase tracking-wide\"\r\n    >\r\n      {errorText ? \"Error\" : \"Result\"}\r\n    </h4>\r\n    <div\r\n      class={cn(\r\n        \"overflow-x-auto rounded-md text-xs [&_table]:w-full\",\r\n        errorText\r\n          ? \"bg-destructive/10 text-destructive\"\r\n          : \"bg-muted/50 text-foreground\"\r\n      )}\r\n    >\r\n      {#if errorText}\r\n        <div class=\"p-3\">{errorText}</div>\r\n      {:else if outputComponent}\r\n        {#if outputComponent.type === \"code\"}\r\n          <Code.Root\r\n            code={outputComponent.content}\r\n            lang={outputComponent.language}\r\n            hideLines\r\n          >\r\n            <Code.CopyButton />\r\n          </Code.Root>\r\n        {:else}\r\n          <div class=\"p-3\">{outputComponent.content}</div>\r\n        {/if}\r\n      {/if}\r\n    </div>\r\n  </div>\r\n{/if}\r\n",
			"type": "registry:component",
			"target": "ai-elements/tool/ToolOutput.svelte"
		},
		{
			"content": "import { getContext, setContext } from 'svelte';\r\nimport { watch } from 'runed';\r\n\r\nexport type ToolUIPartType = string;\r\nexport type ToolUIPartState = \"input-streaming\" | \"input-available\" | \"output-available\" | \"output-error\";\r\n\r\nexport type ToolSchema = {\r\n  type: ToolUIPartType;\r\n  state: ToolUIPartState;\r\n  input?: any;\r\n  output?: any;\r\n  errorText?: string;\r\n  isOpen?: boolean;\r\n};\r\n\r\nexport class ToolClass {\r\n  type = $state<ToolUIPartType>('');\r\n  state = $state<ToolUIPartState>('input-streaming');\r\n  input = $state<any>(undefined);\r\n  output = $state<any>(undefined);\r\n  errorText = $state<string | undefined>(undefined);\r\n  isOpen = $state<boolean>(false);\r\n\r\n  constructor(props: ToolSchema) {\r\n    this.type = props.type;\r\n    this.state = props.state;\r\n    this.input = props.input;\r\n    this.output = props.output;\r\n    this.errorText = props.errorText;\r\n    this.isOpen = props.isOpen ?? false;\r\n\r\n    // Watch for state changes and automatically handle tool opening/closing\r\n    watch(\r\n      () => this.state,\r\n      (currentState, previousState) => {\r\n        // Auto-open when tool starts processing\r\n        if (currentState === 'input-available' && !this.isOpen) {\r\n          this.isOpen = true;\r\n        }\r\n\r\n        // Auto-close when tool completes with error (optional behavior)\r\n        // Uncomment if you want this behavior:\r\n        // if (currentState === 'output-error' && previousState !== 'output-error') {\r\n        //   setTimeout(() => {\r\n        //     this.isOpen = false;\r\n        //   }, 3000);\r\n        // }\r\n      }\r\n    );\r\n  }\r\n\r\n  get statusBadge() {\r\n    let labels = {\r\n      \"input-streaming\": \"Pending\",\r\n      \"input-available\": \"Running\",\r\n      \"output-available\": \"Completed\",\r\n      \"output-error\": \"Error\",\r\n    } as const;\r\n\r\n    return {\r\n      label: labels[this.state],\r\n      variant: this.state === 'output-error' ? 'destructive' : 'secondary'\r\n    };\r\n  }\r\n\r\n  get hasOutput() {\r\n    return !!(this.output || this.errorText);\r\n  }\r\n\r\n  get isComplete() {\r\n    return this.state === 'output-available' || this.state === 'output-error';\r\n  }\r\n\r\n  get isRunning() {\r\n    return this.state === 'input-available';\r\n  }\r\n\r\n  get isPending() {\r\n    return this.state === 'input-streaming';\r\n  }\r\n\r\n  // Method to update tool state\r\n  updateState(newState: ToolUIPartState) {\r\n    this.state = newState;\r\n  }\r\n\r\n  // Method to set output\r\n  setOutput(output: any) {\r\n    this.output = output;\r\n    this.errorText = undefined;\r\n    this.state = 'output-available';\r\n  }\r\n\r\n  // Method to set error\r\n  setError(errorText: string) {\r\n    this.errorText = errorText;\r\n    this.output = undefined;\r\n    this.state = 'output-error';\r\n  }\r\n\r\n  // Method to toggle open state\r\n  toggle() {\r\n    this.isOpen = !this.isOpen;\r\n  }\r\n\r\n  // Method to open tool\r\n  open() {\r\n    this.isOpen = true;\r\n  }\r\n\r\n  // Method to close tool\r\n  close() {\r\n    this.isOpen = false;\r\n  }\r\n}\r\n\r\nlet TOOL_CONTEXT_KEY = Symbol('tool');\r\n\r\nexport function setToolContext(toolInstance: ToolClass) {\r\n  return setContext(TOOL_CONTEXT_KEY, toolInstance);\r\n}\r\n\r\nexport function getToolContext(): ToolClass {\r\n  let context = getContext<ToolClass>(TOOL_CONTEXT_KEY);\r\n  if (!context) {\r\n    throw new Error('Tool components must be used within a Tool context provider');\r\n  }\r\n  return context;\r\n}",
			"type": "registry:file",
			"target": "ai-elements/tool/tool-context.svelte.ts"
		},
		{
			"content": "export { default as Tool } from './Tool.svelte';\r\nexport { default as ToolHeader } from './ToolHeader.svelte';\r\nexport { default as ToolContent } from './ToolContent.svelte';\r\nexport { default as ToolInput } from './ToolInput.svelte';\r\nexport { default as ToolOutput } from './ToolOutput.svelte';\r\n\r\nexport {\r\n  ToolClass,\r\n  setToolContext,\r\n  getToolContext,\r\n  type ToolSchema,\r\n  type ToolUIPartType,\r\n  type ToolUIPartState\r\n} from './tool-context.svelte.js';",
			"type": "registry:file",
			"target": "ai-elements/tool/index.ts"
		}
	]
}