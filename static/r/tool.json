{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "tool",
	"title": "Tool",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The Tool component provides a comprehensive interface for displaying AI tool usage, including input parameters, execution status, and output results with collapsible sections.",
	"dependencies": [
		"runed@^0.31.1"
	],
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"./code.json",
		"collapsible",
		"badge"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport { Collapsible } from \"$COMPONENTS$/ui/collapsible/index.js\";\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\n\tinterface ToolProps {\n\t\tclass?: string;\n\t\tchildren?: Snippet;\n\t\t[key: string]: any;\n\t}\n\n\tlet { class: className = \"\", children, ...restProps }: ToolProps = $props();\n\n\tlet id = $derived.by(() => crypto.randomUUID());\n</script>\n\n<Collapsible {id} class={cn(\"not-prose mb-4 w-full rounded-md border\", className)} {...restProps}>\n\t{@render children?.()}\n</Collapsible>\n",
			"type": "registry:component",
			"target": "ai-elements/tool/Tool.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { CollapsibleTrigger } from \"$COMPONENTS$/ui/collapsible/index.js\";\n\timport { Badge } from \"$COMPONENTS$/ui/badge/index.js\";\n\timport { cn } from \"$UTILS$\";\n\timport {\n\t\tCheckCircleIcon,\n\t\tChevronDownIcon,\n\t\tCircleIcon,\n\t\tClockIcon,\n\t\tWrenchIcon,\n\t\tXCircleIcon,\n\t} from \"@lucide/svelte\";\n\n\ttype ToolUIPartType = string;\n\ttype ToolUIPartState =\n\t\t| \"input-streaming\"\n\t\t| \"input-available\"\n\t\t| \"output-available\"\n\t\t| \"output-error\";\n\n\tinterface ToolHeaderProps {\n\t\ttype: ToolUIPartType;\n\t\tstate: ToolUIPartState;\n\t\tclass?: string;\n\t\t[key: string]: any;\n\t}\n\n\tlet { type, state, class: className = \"\", ...restProps }: ToolHeaderProps = $props();\n\n\tlet getStatusBadge = $derived.by(() => {\n\t\tlet labels = {\n\t\t\t\"input-streaming\": \"Pending\",\n\t\t\t\"input-available\": \"Running\",\n\t\t\t\"output-available\": \"Completed\",\n\t\t\t\"output-error\": \"Error\",\n\t\t} as const;\n\n\t\tlet icons = {\n\t\t\t\"input-streaming\": CircleIcon,\n\t\t\t\"input-available\": ClockIcon,\n\t\t\t\"output-available\": CheckCircleIcon,\n\t\t\t\"output-error\": XCircleIcon,\n\t\t} as const;\n\n\t\tlet IconComponent = icons[state];\n\t\tlet label = labels[state];\n\n\t\treturn { IconComponent, label };\n\t});\n\tlet IconComponent = $derived(getStatusBadge.IconComponent);\n\n\tlet id = $props.id();\n</script>\n\n<CollapsibleTrigger\n\t{id}\n\tclass={cn(\"flex w-full items-center justify-between gap-4 p-3\", className)}\n\t{...restProps}\n>\n\t<div class=\"flex items-center gap-2\">\n\t\t<WrenchIcon class=\"text-muted-foreground size-4\" />\n\t\t<span class=\"text-sm font-medium\">{type}</span>\n\t\t<Badge class=\"gap-1.5 rounded-full text-xs\" variant=\"secondary\">\n\t\t\t<!-- <svelte:component\n        this={getStatusBadge.IconComponent}\n        class={cn(\n          \"size-4\",\n          state === \"input-available\" && \"animate-pulse\",\n          state === \"output-available\" && \"text-green-600\",\n          state === \"output-error\" && \"text-red-600\"\n        )}\n      /> -->\n\t\t\t<IconComponent\n\t\t\t\tclass={cn(\n\t\t\t\t\t\"size-4\",\n\t\t\t\t\tstate === \"input-available\" && \"animate-pulse\",\n\t\t\t\t\tstate === \"output-available\" && \"text-green-600\",\n\t\t\t\t\tstate === \"output-error\" && \"text-red-600\"\n\t\t\t\t)}\n\t\t\t/>\n\n\t\t\t{getStatusBadge.label}\n\t\t</Badge>\n\t</div>\n\t<ChevronDownIcon\n\t\tclass=\"text-muted-foreground size-4 transition-transform group-data-[state=open]:rotate-180\"\n\t/>\n</CollapsibleTrigger>\n",
			"type": "registry:component",
			"target": "ai-elements/tool/ToolHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { CollapsibleContent } from \"$COMPONENTS$/ui/collapsible/index.js\";\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\n\tinterface ToolContentProps {\n\t\tclass?: string;\n\t\tchildren?: Snippet;\n\t\t[key: string]: any;\n\t}\n\n\tlet { class: className = \"\", children, ...restProps }: ToolContentProps = $props();\n\n\tlet id = $props.id();\n</script>\n\n<CollapsibleContent\n\t{id}\n\tclass={cn(\n\t\t\"data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground data-[state=closed]:animate-out data-[state=open]:animate-in outline-none\",\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</CollapsibleContent>\n",
			"type": "registry:component",
			"target": "ai-elements/tool/ToolContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport * as Code from \"$COMPONENTS$/ai-elements/code/index.js\";\n\n\tinterface ToolInputProps {\n\t\tclass?: string;\n\t\tinput: any;\n\t\t[key: string]: any;\n\t}\n\n\tlet { class: className = \"\", input, ...restProps }: ToolInputProps = $props();\n\n\tlet formattedInput = $derived.by(() => {\n\t\treturn JSON.stringify(input, null, 2);\n\t});\n\n\tlet id = $props.id();\n</script>\n\n<div {id} class={cn(\"space-y-2 overflow-hidden p-4\", className)} {...restProps}>\n\t<h4 class=\"text-muted-foreground text-xs font-medium tracking-wide uppercase\">Parameters</h4>\n\t<div class=\"bg-muted/50 rounded-md\">\n\t\t<Code.Root code={formattedInput} lang=\"json\" hideLines>\n\t\t\t<Code.CopyButton />\n\t\t</Code.Root>\n\t</div>\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/tool/ToolInput.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport * as Code from \"$COMPONENTS$/ai-elements/code/index.js\";\n\timport type { Snippet } from \"svelte\";\n\timport type { SupportedLanguage } from \"../code/shiki\";\n\n\tinterface ToolOutputProps {\n\t\tclass?: string;\n\t\toutput?: any;\n\t\terrorText?: string;\n\t\tchildren?: Snippet;\n\t\t[key: string]: any;\n\t}\n\n\tlet {\n\t\tclass: className = \"\",\n\t\toutput,\n\t\terrorText,\n\t\tchildren,\n\t\t...restProps\n\t}: ToolOutputProps = $props();\n\n\tlet shouldRender = $derived.by(() => {\n\t\treturn !!(output || errorText);\n\t});\n\ttype OutputComp = {\n\t\ttype: \"code\" | \"text\";\n\t\tcontent: string;\n\t\tlanguage: SupportedLanguage;\n\t};\n\n\tlet outputComponent: OutputComp | null = $derived.by(() => {\n\t\tif (!output) return null;\n\n\t\tif (typeof output === \"object\") {\n\t\t\treturn {\n\t\t\t\ttype: \"code\",\n\t\t\t\tcontent: JSON.stringify(output, null, 2),\n\t\t\t\tlanguage: \"json\",\n\t\t\t};\n\t\t} else if (typeof output === \"string\") {\n\t\t\treturn {\n\t\t\t\ttype: \"code\",\n\t\t\t\tcontent: output,\n\t\t\t\tlanguage: \"json\",\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttype: \"text\",\n\t\t\t\tcontent: String(output),\n\t\t\t\tlanguage: \"text\",\n\t\t\t};\n\t\t}\n\t});\n\n\tlet id = $props.id();\n</script>\n\n{#if shouldRender}\n\t<div {id} class={cn(\"space-y-2 p-4\", className)} {...restProps}>\n\t\t<h4 class=\"text-muted-foreground text-xs font-medium tracking-wide uppercase\">\n\t\t\t{errorText ? \"Error\" : \"Result\"}\n\t\t</h4>\n\t\t<div\n\t\t\tclass={cn(\n\t\t\t\t\"overflow-x-auto rounded-md text-xs [&_table]:w-full\",\n\t\t\t\terrorText ? \"bg-destructive/10 text-destructive\" : \"bg-muted/50 text-foreground\"\n\t\t\t)}\n\t\t>\n\t\t\t{#if errorText}\n\t\t\t\t<div class=\"p-3\">{errorText}</div>\n\t\t\t{:else if outputComponent}\n\t\t\t\t{#if outputComponent.type === \"code\"}\n\t\t\t\t\t<Code.Root\n\t\t\t\t\t\tcode={outputComponent.content}\n\t\t\t\t\t\tlang={outputComponent.language}\n\t\t\t\t\t\thideLines\n\t\t\t\t\t>\n\t\t\t\t\t\t<Code.CopyButton />\n\t\t\t\t\t</Code.Root>\n\t\t\t\t{:else}\n\t\t\t\t\t<div class=\"p-3\">{outputComponent.content}</div>\n\t\t\t\t{/if}\n\t\t\t{/if}\n\t\t</div>\n\t</div>\n{/if}\n",
			"type": "registry:component",
			"target": "ai-elements/tool/ToolOutput.svelte"
		},
		{
			"content": "import { getContext, setContext } from \"svelte\";\nimport { watch } from \"runed\";\n\nexport type ToolUIPartType = string;\nexport type ToolUIPartState =\n\t| \"input-streaming\"\n\t| \"input-available\"\n\t| \"output-available\"\n\t| \"output-error\";\n\nexport type ToolSchema = {\n\ttype: ToolUIPartType;\n\tstate: ToolUIPartState;\n\tinput?: any;\n\toutput?: any;\n\terrorText?: string;\n\tisOpen?: boolean;\n};\n\nexport class ToolClass {\n\ttype = $state<ToolUIPartType>(\"\");\n\tstate = $state<ToolUIPartState>(\"input-streaming\");\n\tinput = $state<any>(undefined);\n\toutput = $state<any>(undefined);\n\terrorText = $state<string | undefined>(undefined);\n\tisOpen = $state<boolean>(false);\n\n\tconstructor(props: ToolSchema) {\n\t\tthis.type = props.type;\n\t\tthis.state = props.state;\n\t\tthis.input = props.input;\n\t\tthis.output = props.output;\n\t\tthis.errorText = props.errorText;\n\t\tthis.isOpen = props.isOpen ?? false;\n\n\t\t// Watch for state changes and automatically handle tool opening/closing\n\t\twatch(\n\t\t\t() => this.state,\n\t\t\t(currentState, previousState) => {\n\t\t\t\t// Auto-open when tool starts processing\n\t\t\t\tif (currentState === \"input-available\" && !this.isOpen) {\n\t\t\t\t\tthis.isOpen = true;\n\t\t\t\t}\n\n\t\t\t\t// Auto-close when tool completes with error (optional behavior)\n\t\t\t\t// Uncomment if you want this behavior:\n\t\t\t\t// if (currentState === 'output-error' && previousState !== 'output-error') {\n\t\t\t\t//   setTimeout(() => {\n\t\t\t\t//     this.isOpen = false;\n\t\t\t\t//   }, 3000);\n\t\t\t\t// }\n\t\t\t}\n\t\t);\n\t}\n\n\tget statusBadge() {\n\t\tlet labels = {\n\t\t\t\"input-streaming\": \"Pending\",\n\t\t\t\"input-available\": \"Running\",\n\t\t\t\"output-available\": \"Completed\",\n\t\t\t\"output-error\": \"Error\",\n\t\t} as const;\n\n\t\treturn {\n\t\t\tlabel: labels[this.state],\n\t\t\tvariant: this.state === \"output-error\" ? \"destructive\" : \"secondary\",\n\t\t};\n\t}\n\n\tget hasOutput() {\n\t\treturn !!(this.output || this.errorText);\n\t}\n\n\tget isComplete() {\n\t\treturn this.state === \"output-available\" || this.state === \"output-error\";\n\t}\n\n\tget isRunning() {\n\t\treturn this.state === \"input-available\";\n\t}\n\n\tget isPending() {\n\t\treturn this.state === \"input-streaming\";\n\t}\n\n\t// Method to update tool state\n\tupdateState(newState: ToolUIPartState) {\n\t\tthis.state = newState;\n\t}\n\n\t// Method to set output\n\tsetOutput(output: any) {\n\t\tthis.output = output;\n\t\tthis.errorText = undefined;\n\t\tthis.state = \"output-available\";\n\t}\n\n\t// Method to set error\n\tsetError(errorText: string) {\n\t\tthis.errorText = errorText;\n\t\tthis.output = undefined;\n\t\tthis.state = \"output-error\";\n\t}\n\n\t// Method to toggle open state\n\ttoggle() {\n\t\tthis.isOpen = !this.isOpen;\n\t}\n\n\t// Method to open tool\n\topen() {\n\t\tthis.isOpen = true;\n\t}\n\n\t// Method to close tool\n\tclose() {\n\t\tthis.isOpen = false;\n\t}\n}\n\nlet TOOL_CONTEXT_KEY = Symbol(\"tool\");\n\nexport function setToolContext(toolInstance: ToolClass) {\n\treturn setContext(TOOL_CONTEXT_KEY, toolInstance);\n}\n\nexport function getToolContext(): ToolClass {\n\tlet context = getContext<ToolClass>(TOOL_CONTEXT_KEY);\n\tif (!context) {\n\t\tthrow new Error(\"Tool components must be used within a Tool context provider\");\n\t}\n\treturn context;\n}\n",
			"type": "registry:file",
			"target": "ai-elements/tool/tool-context.svelte.ts"
		},
		{
			"content": "export { default as Tool } from \"./Tool.svelte\";\nexport { default as ToolHeader } from \"./ToolHeader.svelte\";\nexport { default as ToolContent } from \"./ToolContent.svelte\";\nexport { default as ToolInput } from \"./ToolInput.svelte\";\nexport { default as ToolOutput } from \"./ToolOutput.svelte\";\n\nexport {\n\tToolClass,\n\tsetToolContext,\n\tgetToolContext,\n\ttype ToolSchema,\n\ttype ToolUIPartType,\n\ttype ToolUIPartState,\n} from \"./tool-context.svelte.js\";\n",
			"type": "registry:file",
			"target": "ai-elements/tool/index.ts"
		}
	]
}