{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "prompt-kit-reasoning",
	"type": "registry:block",
	"description": "The Reasoning component displays AI reasoning and thinking process with collapsible content. Features trigger, content, and context management for showing step-by-step AI reasoning in responses.",
	"dependencies": [
		"runed@^0.31.1"
	],
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"collapsible",
		"button"
	],
	"meta": {
		"author": "SikandarJODD",
		"version": "1.0.0",
		"tags": [
			"prompt-kit",
			"reasoning",
			"thinking",
			"ai-process",
			"collapsible"
		],
		"category": "Prompt Kit",
		"documentation": "https://ai-elements.vercel.app/prompt-kit/reasoning",
		"repository": "https://github.com/SikandarJODD/ai-elements",
		"complexity": "intermediate",
		"updated": "2025-10-19",
		"featured": true
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n\timport { setContext } from 'svelte';\r\n\timport { createReasoningContext } from './reasoning-context.svelte.js';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\tinterface Props extends HTMLAttributes<HTMLDivElement> {\r\n\t\tchildren: Snippet;\r\n\t\topen?: boolean;\r\n\t\tonOpenChange?: (open: boolean) => void;\r\n\t\tisStreaming?: boolean;\r\n\t}\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\topen = $bindable(),\r\n\t\tonOpenChange,\r\n\t\tisStreaming = false,\r\n\t\t...rest\r\n\t}: Props = $props();\r\n\r\n\tconst context = createReasoningContext(open, onOpenChange, isStreaming);\r\n\tsetContext('reasoning', context);\r\n\r\n\t// Bind context state to open prop if controlled\r\n\t$effect(() => {\r\n\t\tif (open !== undefined) {\r\n\t\t\tcontext.setOpen(open);\r\n\t\t}\r\n\t});\r\n\r\n\t// Handle streaming auto-open/close\r\n\t$effect(() => {\r\n\t\tif (isStreaming && !context.wasAutoOpened) {\r\n\t\t\tcontext.setOpen(true);\r\n\t\t\tcontext.wasAutoOpened = true;\r\n\t\t}\r\n\r\n\t\tif (!isStreaming && context.wasAutoOpened) {\r\n\t\t\tcontext.setOpen(false);\r\n\t\t\tcontext.wasAutoOpened = false;\r\n\t\t}\r\n\t});\r\n</script>\r\n\r\n<div class={className} {...rest}>\r\n\t{@render children()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "prompt-kit/reasoning/reasoning.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { ChevronDown } from '@lucide/svelte';\r\n\timport { getReasoningContext } from './reasoning-context.svelte.js';\r\n\timport { cn } from '$UTILS$';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLButtonAttributes } from 'svelte/elements';\r\n\r\n\tinterface Props extends HTMLButtonAttributes {\r\n\t\tchildren: Snippet;\r\n\t}\r\n\r\n\tlet { children, class: className, onclick, ...rest }: Props = $props();\r\n\r\n\tconst context = getReasoningContext();\r\n\r\n\tfunction handleClick(e: MouseEvent & { currentTarget: EventTarget & HTMLButtonElement }) {\r\n\t\tcontext.toggle();\r\n\t\tonclick?.(e);\r\n\t}\r\n</script>\r\n\r\n<button\r\n\tclass={cn('flex cursor-pointer items-center gap-2', className)}\r\n\tonclick={handleClick}\r\n\t{...rest}\r\n>\r\n\t<span class=\"text-primary\">\r\n\t\t{@render children()}\r\n\t</span>\r\n\t<div\r\n\t\tclass={cn('transform transition-transform', context.isOpen ? 'rotate-180' : '')}\r\n\t>\r\n\t\t<ChevronDown class=\"size-4\" />\r\n\t</div>\r\n</button>\r\n",
			"type": "registry:component",
			"target": "prompt-kit/reasoning/reasoning-trigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { getReasoningContext } from './reasoning-context.svelte.js';\r\n\timport { cn } from '$UTILS$';\r\n\timport { watch } from 'runed';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\tinterface Props {\r\n\t\tchildren: Snippet | string;\r\n\t\tclass?: string;\r\n\t\tcontentClassName?: string;\r\n\t\tmarkdown?: boolean;\r\n\t\t[key: string]: any;\r\n\t}\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\tcontentClassName,\r\n\t\tmarkdown = false,\r\n\t\t...rest\r\n\t}: Props = $props();\r\n\r\n\tconst context = getReasoningContext();\r\n\r\n\tlet contentRef: HTMLDivElement | undefined = $state();\r\n\tlet innerRef: HTMLDivElement | undefined = $state();\r\n\r\n\t// Watch for isOpen changes and resize observer\r\n\twatch(\r\n\t\t() => [context.isOpen, innerRef] as const,\r\n\t\t([isOpen, inner]) => {\r\n\t\t\tif (!contentRef || !inner) return;\r\n\r\n\t\t\tconst observer = new ResizeObserver(() => {\r\n\t\t\t\tif (contentRef && inner && isOpen) {\r\n\t\t\t\t\tcontentRef.style.maxHeight = `${inner.scrollHeight}px`;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tobserver.observe(inner);\r\n\r\n\t\t\tif (isOpen) {\r\n\t\t\t\tcontentRef.style.maxHeight = `${inner.scrollHeight}px`;\r\n\t\t\t}\r\n\r\n\t\t\treturn () => observer.disconnect();\r\n\t\t}\r\n\t);\r\n\r\n\t// Compute max height reactively\r\n\tlet maxHeight = $derived(\r\n\t\tcontext.isOpen && contentRef ? `${contentRef.scrollHeight}px` : '0px'\r\n\t);\r\n</script>\r\n\r\n<div\r\n\tbind:this={contentRef}\r\n\tclass={cn(\r\n\t\t'overflow-hidden transition-[max-height] duration-150 ease-out',\r\n\t\tclassName\r\n\t)}\r\n\tstyle:max-height={maxHeight}\r\n\t{...rest}\r\n>\r\n\t<div\r\n\t\tbind:this={innerRef}\r\n\t\tclass={cn(\r\n\t\t\t'text-muted-foreground prose prose-sm dark:prose-invert',\r\n\t\t\tcontentClassName\r\n\t\t)}\r\n\t>\r\n\t\t{#if markdown && typeof children === 'string'}\r\n\t\t\t<!-- TODO: Add Markdown component if available -->\r\n\t\t\t{@html children}\r\n\t\t{:else if typeof children === 'function'}\r\n\t\t\t{@render children()}\r\n\t\t{:else}\r\n\t\t\t{children}\r\n\t\t{/if}\r\n\t</div>\r\n</div>\r\n",
			"type": "registry:component",
			"target": "prompt-kit/reasoning/reasoning-content.svelte"
		},
		{
			"content": "import { getContext } from 'svelte';\r\n\r\nclass ReasoningContext {\r\n\tprivate _isOpen = $state(false);\r\n\tprivate _onOpenChange?: (open: boolean) => void;\r\n\tprivate _isControlled = false;\r\n\twasAutoOpened = $state(false);\r\n\r\n\tconstructor(open?: boolean, onOpenChange?: (open: boolean) => void, isStreaming?: boolean) {\r\n\t\tthis._isControlled = open !== undefined;\r\n\t\tthis._isOpen = open ?? false;\r\n\t\tthis._onOpenChange = onOpenChange;\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\treturn this._isOpen;\r\n\t}\r\n\r\n\tsetOpen(newOpen: boolean) {\r\n\t\tif (!this._isControlled) {\r\n\t\t\tthis._isOpen = newOpen;\r\n\t\t}\r\n\t\tthis._onOpenChange?.(newOpen);\r\n\t}\r\n\r\n\ttoggle() {\r\n\t\tthis.setOpen(!this._isOpen);\r\n\t}\r\n}\r\n\r\nexport function createReasoningContext(\r\n\topen?: boolean,\r\n\tonOpenChange?: (open: boolean) => void,\r\n\tisStreaming?: boolean\r\n) {\r\n\treturn new ReasoningContext(open, onOpenChange, isStreaming);\r\n}\r\n\r\nexport function getReasoningContext(): ReasoningContext {\r\n\tconst context = getContext<ReasoningContext>('reasoning');\r\n\tif (!context) {\r\n\t\tthrow new Error('getReasoningContext must be used within a Reasoning component');\r\n\t}\r\n\treturn context;\r\n}\r\n",
			"type": "registry:file",
			"target": "prompt-kit/reasoning/reasoning-context.svelte.ts"
		},
		{
			"content": "export { default as Reasoning } from './reasoning.svelte';\r\nexport { default as ReasoningTrigger } from './reasoning-trigger.svelte';\r\nexport { default as ReasoningContent } from './reasoning-content.svelte';\r\nexport { createReasoningContext, getReasoningContext } from './reasoning-context.svelte.js';\r\n",
			"type": "registry:file",
			"target": "prompt-kit/reasoning/index.ts"
		}
	]
}