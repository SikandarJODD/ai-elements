{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "reasoning",
	"type": "registry:block",
	"description": "The Reasoning component displays AI reasoning content, automatically opening during streaming and closing when finished.",
	"dependencies": [
		"runed"
	],
	"devDependencies": [
		"@lucide/svelte@^0.515.0"
	],
	"registryDependencies": [
		"collapsible"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$.js';\r\n\timport { watch } from 'runed';\r\n\timport { Collapsible } from '$lib/components/ui/collapsible/index.js';\r\n\timport { ReasoningContext, setReasoningContext } from './reasoning-context.svelte';\r\n\r\n\tinterface Props {\r\n\t\tclass?: string;\r\n\t\tisStreaming?: boolean;\r\n\t\topen?: boolean;\r\n\t\tdefaultOpen?: boolean;\r\n\t\tonOpenChange?: (open: boolean) => void;\r\n\t\tduration?: number;\r\n\t\tchildren?: import('svelte').Snippet;\r\n\t}\r\n\r\n\tlet {\r\n\t\tclass: className = '',\r\n\t\tisStreaming = false,\r\n\t\topen = $bindable(),\r\n\t\tdefaultOpen = true,\r\n\t\tonOpenChange,\r\n\t\tduration = $bindable(),\r\n\t\tchildren,\r\n\t\t...props\r\n\t}: Props = $props();\r\n\r\n\tlet AUTO_CLOSE_DELAY = 1000;\r\n\tlet MS_IN_S = 1000;\r\n\r\n\t// Create the reasoning context\r\n\tlet reasoningContext = new ReasoningContext({\r\n\t\tisStreaming,\r\n\t\tisOpen: open ?? defaultOpen,\r\n\t\tduration: duration ?? 0\r\n\t});\r\n\r\n\t// Set up controllable state for open\r\n\tlet isOpen = $state(open ?? defaultOpen);\r\n\tlet currentDuration = $state(duration ?? 0);\r\n\tlet hasAutoClosed = $state(false);\r\n\tlet startTime = $state<number | null>(null);\r\n\r\n\t// Sync external props to context and local state\r\n\t$effect(() => {\r\n\t\treasoningContext.isStreaming = isStreaming;\r\n\t});\r\n\r\n\t$effect(() => {\r\n\t\tif (open !== undefined) {\r\n\t\t\tisOpen = open;\r\n\t\t\treasoningContext.isOpen = open;\r\n\t\t}\r\n\t});\r\n\r\n\t$effect(() => {\r\n\t\tif (duration !== undefined) {\r\n\t\t\tcurrentDuration = duration;\r\n\t\t\treasoningContext.duration = duration;\r\n\t\t}\r\n\t});\r\n\r\n\t// Track duration when streaming starts and ends\r\n\twatch(\r\n\t\t() => isStreaming,\r\n\t\t(isStreamingValue) => {\r\n\t\t\tif (isStreamingValue) {\r\n\t\t\t\tif (startTime === null) {\r\n\t\t\t\t\tstartTime = Date.now();\r\n\t\t\t\t}\r\n\t\t\t} else if (startTime !== null) {\r\n\t\t\t\tlet newDuration = Math.ceil((Date.now() - startTime) / MS_IN_S);\r\n\t\t\t\tcurrentDuration = newDuration;\r\n\t\t\t\treasoningContext.duration = newDuration;\r\n\t\t\t\tif (duration !== undefined) {\r\n\t\t\t\t\tduration = newDuration;\r\n\t\t\t\t}\r\n\t\t\t\tstartTime = null;\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// Auto-open when streaming starts, auto-close when streaming ends (once only)\r\n\twatch(\r\n\t\t() => [isStreaming, isOpen, defaultOpen, hasAutoClosed] as const,\r\n\t\t([isStreamingValue, isOpenValue, defaultOpenValue, hasAutoClosedValue]) => {\r\n\t\t\tif (defaultOpenValue && !isStreamingValue && isOpenValue && !hasAutoClosedValue) {\r\n\t\t\t\t// Add a small delay before closing to allow user to see the content\r\n\t\t\t\tlet timer = setTimeout(() => {\r\n\t\t\t\t\thandleOpenChange(false);\r\n\t\t\t\t\thasAutoClosed = true;\r\n\t\t\t\t}, AUTO_CLOSE_DELAY);\r\n\r\n\t\t\t\treturn () => clearTimeout(timer);\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\tlet handleOpenChange = (newOpen: boolean) => {\r\n\t\tisOpen = newOpen;\r\n\t\treasoningContext.setIsOpen(newOpen);\r\n\r\n\t\tif (open !== undefined) {\r\n\t\t\topen = newOpen;\r\n\t\t}\r\n\r\n\t\tonOpenChange?.(newOpen);\r\n\t};\r\n\r\n\t// Set the context for child components\r\n\tsetReasoningContext(reasoningContext);\r\n</script>\r\n\r\n<Collapsible\r\n\tclass={cn('not-prose mb-4', className)}\r\n\tbind:open={isOpen}\r\n\tonOpenChange={handleOpenChange}\r\n\t{...props}\r\n>\r\n\t{@render children?.()}\r\n</Collapsible>",
			"type": "registry:component",
			"target": "ai-elements/reasoning/Reasoning.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$.js';\r\n\timport { CollapsibleTrigger } from '$lib/components/ui/collapsible/index.js';\r\n\timport { getReasoningContext } from './reasoning-context.svelte.js';\r\n\t// import BrainIcon from './BrainIcon.svelte';\r\n\timport ChevronDownIcon from './ChevronDownIcon.svelte';\r\n  import  BrainIcon  from '@lucide/svelte/icons/brain';\r\n\r\n\tinterface Props {\r\n\t\tclass?: string;\r\n\t\tchildren?: import('svelte').Snippet;\r\n\t}\r\n\r\n\tlet { class: className = '', children, ...props }: Props = $props();\r\n\r\n\tlet reasoningContext = getReasoningContext();\r\n\r\n\tlet getThinkingMessage = $derived.by(() => {\r\n\t\tlet { isStreaming, duration } = reasoningContext;\r\n\r\n\t\tif (isStreaming || duration === 0) {\r\n\t\t\treturn 'Thinking...';\r\n\t\t}\r\n\t\tif (duration === undefined) {\r\n\t\t\treturn 'Thought for a few seconds';\r\n\t\t}\r\n\t\treturn `Thought for ${duration} seconds`;\r\n\t});\r\n</script>\r\n\r\n<CollapsibleTrigger\r\n\tclass={cn(\r\n\t\t'flex w-full items-center gap-2 text-muted-foreground text-sm transition-colors hover:text-foreground',\r\n\t\tclassName\r\n\t)}\r\n\t{...props}\r\n>\r\n\t{#if children}\r\n\t\t{@render children()}\r\n\t{:else}\r\n\t\t<BrainIcon class=\"size-4\" />\r\n\t\t<p>{getThinkingMessage}</p>\r\n\t\t<ChevronDownIcon\r\n\t\t\tclass={cn(\r\n\t\t\t\t'size-4 transition-transform',\r\n\t\t\t\treasoningContext.isOpen ? 'rotate-180' : 'rotate-0'\r\n\t\t\t)}\r\n\t\t/>\r\n\t{/if}\r\n</CollapsibleTrigger>",
			"type": "registry:component",
			"target": "ai-elements/reasoning/ReasoningTrigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$.js\";\r\n  import { CollapsibleContent } from \"$lib/components/ui/collapsible/index.js\";\r\n  import Response from \"./Response.svelte\";\r\n\r\n  interface Props {\r\n    class?: string;\r\n    children?: import(\"svelte\").Snippet;\r\n  }\r\n\r\n  let { class: className = \"\", children, ...props }: Props = $props();\r\n</script>\r\n\r\n<CollapsibleContent\r\n  class={cn(\r\n    \"mt-4 text-sm\",\r\n    \"data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-muted-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in\",\r\n    className\r\n  )}\r\n  {...props}\r\n>\r\n  <Response class=\"grid gap-2\">\r\n    {@render children?.()}\r\n  </Response>\r\n</CollapsibleContent>\r\n",
			"type": "registry:component",
			"target": "ai-elements/reasoning/ReasoningContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$.js';\r\n\r\n\tinterface Props {\r\n\t\tclass?: string;\r\n\t\tchildren?: import('svelte').Snippet;\r\n\t}\r\n\r\n\tlet { class: className = '', children, ...props }: Props = $props();\r\n</script>\r\n\r\n<div class={cn('prose prose-sm max-w-none', className)} {...props}>\r\n\t{@render children?.()}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/reasoning/Response.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\tinterface Props {\r\n\t\tclass?: string;\r\n\t\tsize?: number | string;\r\n\t}\r\n\r\n\tlet { class: className = '', size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n\txmlns=\"http://www.w3.org/2000/svg\"\r\n\twidth={size}\r\n\theight={size}\r\n\tviewBox=\"0 0 24 24\"\r\n\tfill=\"none\"\r\n\tstroke=\"currentColor\"\r\n\tstroke-width=\"2\"\r\n\tstroke-linecap=\"round\"\r\n\tstroke-linejoin=\"round\"\r\n\tclass={className}\r\n\t{...restProps}\r\n>\r\n\t<path d=\"M12 5a3 3 0 1 0-5.997.142 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588 4 4 0 0 0 7.636 2.106 3.2 3.2 0 0 0 .164-.546c.071-.264.142-.538.142-.828a3 3 0 0 0-.546-1.736 3 3 0 0 0 .546-1.734 3 3 0 0 0-.546-1.735A3 3 0 0 0 12 5Z\"/>\r\n\t<path d=\"M12 5a3 3 0 1 1 5.997.142 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588 4 4 0 0 1-7.636 2.106 3.2 3.2 0 0 1-.164-.546c-.071-.264-.142-.538-.142-.828a3 3 0 0 1 .546-1.736 3 3 0 0 1-.546-1.734 3 3 0 0 1 .546-1.735A3 3 0 0 1 12 5Z\"/>\r\n\t<path d=\"M15.7 13a3 3 0 1 1-7.4 0\"/>\r\n\t<path d=\"M9.4 10.8 12 13l2.6-2.2\"/>\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/reasoning/BrainIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\tinterface Props {\r\n\t\tclass?: string;\r\n\t\tsize?: number | string;\r\n\t}\r\n\r\n\tlet { class: className = '', size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n\txmlns=\"http://www.w3.org/2000/svg\"\r\n\twidth={size}\r\n\theight={size}\r\n\tviewBox=\"0 0 24 24\"\r\n\tfill=\"none\"\r\n\tstroke=\"currentColor\"\r\n\tstroke-width=\"2\"\r\n\tstroke-linecap=\"round\"\r\n\tstroke-linejoin=\"round\"\r\n\tclass={className}\r\n\t{...restProps}\r\n>\r\n\t<path d=\"m6 9 6 6 6-6\"/>\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/reasoning/ChevronDownIcon.svelte"
		},
		{
			"content": "import { getContext, setContext } from 'svelte';\r\n\r\nconst REASONING_CONTEXT_KEY = 'reasoning-context';\r\n\r\nexport class ReasoningContext {\r\n\t#isStreaming = $state(false);\r\n\t#isOpen = $state(true);\r\n\t#duration = $state(0);\r\n\r\n\tconstructor(options: {\r\n\t\tisStreaming?: boolean;\r\n\t\tisOpen?: boolean;\r\n\t\tduration?: number;\r\n\t} = {}) {\r\n\t\tthis.#isStreaming = options.isStreaming ?? false;\r\n\t\tthis.#isOpen = options.isOpen ?? true;\r\n\t\tthis.#duration = options.duration ?? 0;\r\n\t}\r\n\r\n\tget isStreaming() {\r\n\t\treturn this.#isStreaming;\r\n\t}\r\n\r\n\tset isStreaming(value: boolean) {\r\n\t\tthis.#isStreaming = value;\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\treturn this.#isOpen;\r\n\t}\r\n\r\n\tset isOpen(value: boolean) {\r\n\t\tthis.#isOpen = value;\r\n\t}\r\n\r\n\tget duration() {\r\n\t\treturn this.#duration;\r\n\t}\r\n\r\n\tset duration(value: number) {\r\n\t\tthis.#duration = value;\r\n\t}\r\n\r\n\tsetIsOpen(open: boolean) {\r\n\t\tthis.#isOpen = open;\r\n\t}\r\n}\r\n\r\nexport function setReasoningContext(context: ReasoningContext) {\r\n\tsetContext(REASONING_CONTEXT_KEY, context);\r\n}\r\n\r\nexport function getReasoningContext(): ReasoningContext {\r\n\tlet context = getContext<ReasoningContext | undefined>(REASONING_CONTEXT_KEY);\r\n\tif (!context) {\r\n\t\tthrow new Error('Reasoning components must be used within Reasoning');\r\n\t}\r\n\treturn context;\r\n}",
			"type": "registry:file",
			"target": "ai-elements/reasoning/reasoning-context.svelte.ts"
		},
		{
			"content": "export { default as Reasoning } from './Reasoning.svelte';\r\nexport { default as ReasoningTrigger } from './ReasoningTrigger.svelte';\r\nexport { default as ReasoningContent } from './ReasoningContent.svelte';\r\nexport { default as BrainIcon } from './BrainIcon.svelte';\r\nexport { default as ChevronDownIcon } from './ChevronDownIcon.svelte';\r\nexport { default as Response } from './Response.svelte';\r\nexport * from './reasoning-context.svelte.js';",
			"type": "registry:file",
			"target": "ai-elements/reasoning/index.ts"
		}
	]
}