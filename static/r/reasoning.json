{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "reasoning",
	"title": "Reasoning",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The Reasoning component displays AI reasoning content, automatically opening during streaming and closing when finished.",
	"dependencies": [
		"runed",
		"@lucide/svelte"
	],
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"collapsible"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { watch } from \"runed\";\r\n  import { Collapsible } from \"$COMPONENTS$/ui/collapsible/index.js\";\r\n  import {\r\n    ReasoningContext,\r\n    setReasoningContext,\r\n  } from \"./reasoning-context.svelte\";\r\n\r\n  interface Props {\r\n    class?: string;\r\n    isStreaming?: boolean;\r\n    open?: boolean;\r\n    defaultOpen?: boolean;\r\n    onOpenChange?: (open: boolean) => void;\r\n    duration?: number;\r\n    children?: import(\"svelte\").Snippet;\r\n  }\r\n\r\n  let {\r\n    class: className = \"\",\r\n    isStreaming = false,\r\n    open = $bindable(),\r\n    defaultOpen = true,\r\n    onOpenChange,\r\n    duration = $bindable(),\r\n    children,\r\n    ...props\r\n  }: Props = $props();\r\n\r\n  let AUTO_CLOSE_DELAY = 1000;\r\n  let MS_IN_S = 1000;\r\n\r\n  // Create the reasoning context\r\n  let reasoningContext = new ReasoningContext({\r\n    isStreaming,\r\n    isOpen: open ?? defaultOpen,\r\n    duration: duration ?? 0,\r\n  });\r\n\r\n  // Set up controllable state for open\r\n  let isOpen = $state(open ?? defaultOpen);\r\n  let currentDuration = $state(duration ?? 0);\r\n  let hasAutoClosed = $state(false);\r\n  let startTime = $state<number | null>(null);\r\n\r\n  // Sync external props to context and local state\r\n  $effect(() => {\r\n    reasoningContext.isStreaming = isStreaming;\r\n  });\r\n\r\n  $effect(() => {\r\n    if (open !== undefined) {\r\n      isOpen = open;\r\n      reasoningContext.isOpen = open;\r\n    }\r\n  });\r\n\r\n  $effect(() => {\r\n    if (duration !== undefined) {\r\n      currentDuration = duration;\r\n      reasoningContext.duration = duration;\r\n    }\r\n  });\r\n\r\n  // Track duration when streaming starts and ends\r\n  watch(\r\n    () => isStreaming,\r\n    (isStreamingValue) => {\r\n      if (isStreamingValue) {\r\n        if (startTime === null) {\r\n          startTime = Date.now();\r\n        }\r\n      } else if (startTime !== null) {\r\n        let newDuration = Math.ceil((Date.now() - startTime) / MS_IN_S);\r\n        currentDuration = newDuration;\r\n        reasoningContext.duration = newDuration;\r\n        if (duration !== undefined) {\r\n          duration = newDuration;\r\n        }\r\n        startTime = null;\r\n      }\r\n    }\r\n  );\r\n\r\n  // Auto-open when streaming starts, auto-close when streaming ends (once only)\r\n  watch(\r\n    () => [isStreaming, isOpen, defaultOpen, hasAutoClosed] as const,\r\n    ([isStreamingValue, isOpenValue, defaultOpenValue, hasAutoClosedValue]) => {\r\n      if (\r\n        defaultOpenValue &&\r\n        !isStreamingValue &&\r\n        isOpenValue &&\r\n        !hasAutoClosedValue\r\n      ) {\r\n        // Add a small delay before closing to allow user to see the content\r\n        let timer = setTimeout(() => {\r\n          handleOpenChange(false);\r\n          hasAutoClosed = true;\r\n        }, AUTO_CLOSE_DELAY);\r\n\r\n        return () => clearTimeout(timer);\r\n      }\r\n    }\r\n  );\r\n\r\n  let handleOpenChange = (newOpen: boolean) => {\r\n    isOpen = newOpen;\r\n    reasoningContext.setIsOpen(newOpen);\r\n\r\n    if (open !== undefined) {\r\n      open = newOpen;\r\n    }\r\n\r\n    onOpenChange?.(newOpen);\r\n  };\r\n\r\n  // Set the context for child components\r\n  setReasoningContext(reasoningContext);\r\n</script>\r\n\r\n<Collapsible\r\n  class={cn(\"not-prose mb-4\", className)}\r\n  bind:open={isOpen}\r\n  onOpenChange={handleOpenChange}\r\n  {...props}\r\n>\r\n  {@render children?.()}\r\n</Collapsible>\r\n",
			"type": "registry:component",
			"target": "ai-elements/reasoning/Reasoning.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { CollapsibleTrigger } from \"$COMPONENTS$/ui/collapsible/index.js\";\r\n  import { getReasoningContext } from \"./reasoning-context.svelte.js\";\r\n  import BrainIcon from \"@lucide/svelte/icons/brain\";\r\n  import ChevronDownIcon from \"@lucide/svelte/icons/chevron-down\";\r\n\r\n  interface Props {\r\n    class?: string;\r\n    children?: import(\"svelte\").Snippet;\r\n  }\r\n\r\n  let { class: className = \"\", children, ...props }: Props = $props();\r\n\r\n  let reasoningContext = getReasoningContext();\r\n\r\n  let getThinkingMessage = $derived.by(() => {\r\n    let { isStreaming, duration } = reasoningContext;\r\n\r\n    if (isStreaming || duration === 0) {\r\n      return \"Thinking...\";\r\n    }\r\n    if (duration === undefined) {\r\n      return \"Thought for a few seconds\";\r\n    }\r\n    return `Thought for ${duration} seconds`;\r\n  });\r\n</script>\r\n\r\n<CollapsibleTrigger\r\n  class={cn(\r\n    \"flex w-full items-center gap-2 text-muted-foreground text-sm transition-colors hover:text-foreground\",\r\n    className\r\n  )}\r\n  {...props}\r\n>\r\n  {#if children}\r\n    {@render children()}\r\n  {:else}\r\n    <BrainIcon class=\"size-4\" />\r\n    <p>{getThinkingMessage}</p>\r\n    <ChevronDownIcon\r\n      class={cn(\r\n        \"size-4 transition-transform\",\r\n        reasoningContext.isOpen ? \"rotate-180\" : \"rotate-0\"\r\n      )}\r\n    />\r\n  {/if}\r\n</CollapsibleTrigger>\r\n",
			"type": "registry:component",
			"target": "ai-elements/reasoning/ReasoningTrigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { CollapsibleContent } from \"$COMPONENTS$/ui/collapsible/index.js\";\r\n  import Response from \"./Response.svelte\";\r\n\r\n  interface Props {\r\n    class?: string;\r\n    children?: import(\"svelte\").Snippet;\r\n  }\r\n\r\n  let { class: className = \"\", children, ...props }: Props = $props();\r\n</script>\r\n\r\n<CollapsibleContent\r\n  class={cn(\r\n    \"mt-4 text-sm\",\r\n    \"data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-muted-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in\",\r\n    className\r\n  )}\r\n  {...props}\r\n>\r\n  <Response class=\"grid gap-2\">\r\n    {@render children?.()}\r\n  </Response>\r\n</CollapsibleContent>\r\n",
			"type": "registry:component",
			"target": "ai-elements/reasoning/ReasoningContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n\r\n  interface Props {\r\n    class?: string;\r\n    children?: import(\"svelte\").Snippet;\r\n  }\r\n\r\n  let { class: className = \"\", children, ...props }: Props = $props();\r\n</script>\r\n\r\n<div class={cn(\"prose prose-sm max-w-none\", className)} {...props}>\r\n  {@render children?.()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "ai-elements/reasoning/Response.svelte"
		},
		{
			"content": "import { getContext, setContext } from \"svelte\";\r\n\r\nconst REASONING_CONTEXT_KEY = Symbol(\"reasoning-context\");\r\n\r\nexport class ReasoningContext {\r\n  #isStreaming = $state(false);\r\n  #isOpen = $state(true);\r\n  #duration = $state(0);\r\n\r\n  constructor(\r\n    options: {\r\n      isStreaming?: boolean;\r\n      isOpen?: boolean;\r\n      duration?: number;\r\n    } = {}\r\n  ) {\r\n    this.#isStreaming = options.isStreaming ?? false;\r\n    this.#isOpen = options.isOpen ?? true;\r\n    this.#duration = options.duration ?? 0;\r\n  }\r\n\r\n  get isStreaming() {\r\n    return this.#isStreaming;\r\n  }\r\n\r\n  set isStreaming(value: boolean) {\r\n    this.#isStreaming = value;\r\n  }\r\n\r\n  get isOpen() {\r\n    return this.#isOpen;\r\n  }\r\n\r\n  set isOpen(value: boolean) {\r\n    this.#isOpen = value;\r\n  }\r\n\r\n  get duration() {\r\n    return this.#duration;\r\n  }\r\n\r\n  set duration(value: number) {\r\n    this.#duration = value;\r\n  }\r\n\r\n  setIsOpen(open: boolean) {\r\n    this.#isOpen = open;\r\n  }\r\n}\r\n\r\nexport function setReasoningContext(context: ReasoningContext) {\r\n  setContext(REASONING_CONTEXT_KEY, context);\r\n}\r\n\r\nexport function getReasoningContext(): ReasoningContext {\r\n  let context = getContext<ReasoningContext | undefined>(REASONING_CONTEXT_KEY);\r\n  if (!context) {\r\n    throw new Error(\"Reasoning components must be used within Reasoning\");\r\n  }\r\n  return context;\r\n}\r\n",
			"type": "registry:file",
			"target": "ai-elements/reasoning/reasoning-context.svelte.ts"
		},
		{
			"content": "export { default as Reasoning } from './Reasoning.svelte';\r\nexport { default as ReasoningTrigger } from './ReasoningTrigger.svelte';\r\nexport { default as ReasoningContent } from './ReasoningContent.svelte';\r\nexport { default as Response } from './Response.svelte';\r\nexport * from './reasoning-context.svelte.js';",
			"type": "registry:file",
			"target": "ai-elements/reasoning/index.ts"
		}
	]
}