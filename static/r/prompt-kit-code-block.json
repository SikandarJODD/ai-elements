{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "prompt-kit-code-block",
	"type": "registry:block",
	"description": "The CodeBlock component displays formatted code snippets with syntax highlighting, copy functionality, and language detection. Supports multiple code blocks with group context management for consistent styling.",
	"dependencies": [
		"shiki",
		"@shikijs/langs",
		"@shikijs/themes"
	],
	"registryDependencies": [
		"button",
		"./copy-button.json"
	],
	"meta": {
		"author": "SikandarJODD",
		"version": "1.0.0",
		"tags": [
			"prompt-kit",
			"code",
			"syntax-highlighting",
			"copy",
			"code-block"
		],
		"category": "Prompt Kit",
		"documentation": "https://ai-elements.vercel.app/prompt-kit/code-block",
		"repository": "https://github.com/SikandarJODD/ai-elements",
		"complexity": "intermediate",
		"updated": "2025-10-19",
		"featured": true
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import {\r\n    CodeBlockClass,\r\n    setCodeBlockContext,\r\n    type CodeBlockSchema,\r\n  } from \"./code-block-context.svelte.js\";\r\n  import type { Snippet } from \"svelte\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  let {\r\n    class: className,\r\n    children,\r\n    ...restProps\r\n  }: CodeBlockSchema & {\r\n    class?: string;\r\n    children: Snippet;\r\n  } & HTMLAttributes<HTMLDivElement> = $props();\r\n\r\n  let contextInstance = new CodeBlockClass();\r\n  setCodeBlockContext(contextInstance);\r\n</script>\r\n\r\n<div\r\n  class={cn(\r\n    \"not-prose flex w-full flex-col overflow-clip border\",\r\n    \"border-border bg-card text-card-foreground rounded-xl\",\r\n    className\r\n  )}\r\n  {...restProps}\r\n>\r\n  {@render children()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "prompt-kit/code-block/CodeBlock.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { codeToHtml, type bundledThemes } from \"shiki\";\r\n  import { watch } from \"runed\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n  // import '../../../../app.css'\r\n\r\n  let {\r\n    code,\r\n    language = \"tsx\",\r\n    theme = \"github-light\",\r\n    class: className,\r\n    ...restProps\r\n  }: {\r\n    code: string;\r\n    language?: string;\r\n    theme?: keyof typeof bundledThemes;\r\n    class?: string;\r\n  } & HTMLAttributes<HTMLDivElement> = $props();\r\n\r\n  let highlightedHtml = $state<string | null>(null);\r\n\r\n  async function highlight() {\r\n    if (!code) {\r\n      highlightedHtml = \"<pre><code></code></pre>\";\r\n      return;\r\n    }\r\n\r\n    let html = await codeToHtml(code, {\r\n      lang: language,\r\n      theme: theme,\r\n    });\r\n    highlightedHtml = html;\r\n  }\r\n\r\n  // Watch for changes in code, language, or theme\r\n  watch([() => code, () => language, () => theme], () => {\r\n    highlight();\r\n  });\r\n\r\n  let classNames = cn(\r\n    \"w-full overflow-x-auto text-[13px] [&>pre]:px-4 [&>pre]:py-4\",\r\n    className\r\n  );\r\n</script>\r\n\r\n<!-- SSR fallback: render plain code if not hydrated yet -->\r\n{#if highlightedHtml}\r\n  <div class={classNames} {...restProps}>\r\n    {@html highlightedHtml}\r\n  </div>\r\n{:else}\r\n  <div class={classNames} {...restProps}>\r\n    <pre><code>{code}</code></pre>\r\n  </div>\r\n{/if}\r\n",
			"type": "registry:component",
			"target": "prompt-kit/code-block/CodeBlockCode.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\tlet {\r\n\t\tclass: className,\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: {\r\n\t\tclass?: string;\r\n\t\tchildren: Snippet;\r\n\t} & HTMLAttributes<HTMLDivElement> = $props();\r\n</script>\r\n\r\n<div class={cn('flex items-center justify-between', className)} {...restProps}>\r\n\t{@render children()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "prompt-kit/code-block/CodeBlockGroup.svelte"
		},
		{
			"content": "import { getContext, setContext } from 'svelte';\r\n\r\nexport type CodeBlockSchema = {\r\n\t// Add any shared state if needed in the future\r\n};\r\n\r\nexport class CodeBlockClass {\r\n\t// Placeholder for shared state management\r\n\t// Currently the CodeBlock component is mostly presentational\r\n\t// but this allows for future extensibility\r\n\r\n\tconstructor(props?: CodeBlockSchema) {\r\n\t\t// Initialize any shared state here if needed\r\n\t}\r\n}\r\n\r\nconst CODE_BLOCK_KEY = Symbol('code-block');\r\n\r\nexport function setCodeBlockContext(contextInstance: CodeBlockClass) {\r\n\tsetContext(CODE_BLOCK_KEY, contextInstance);\r\n}\r\n\r\nexport function getCodeBlockContext(): CodeBlockClass {\r\n\tconst context = getContext<CodeBlockClass>(CODE_BLOCK_KEY);\r\n\r\n\tif (!context) {\r\n\t\tthrow new Error('CodeBlock subcomponents must be used within CodeBlock');\r\n\t}\r\n\r\n\treturn context;\r\n}\r\n",
			"type": "registry:file",
			"target": "prompt-kit/code-block/code-block-context.svelte.ts"
		},
		{
			"content": "export { default as CodeBlock } from './CodeBlock.svelte';\r\nexport { default as CodeBlockCode } from './CodeBlockCode.svelte';\r\nexport { default as CodeBlockGroup } from './CodeBlockGroup.svelte';\r\nexport * from './code-block-context.svelte.js';\r\n",
			"type": "registry:file",
			"target": "prompt-kit/code-block/index.ts"
		}
	]
}