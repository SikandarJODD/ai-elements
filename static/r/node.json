{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "node",
	"title": "Workflow Node",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The Node component provides a comprehensive set of sub-components for building workflow nodes. Includes Node container with handle management, Header, Title, Description, Action buttons, Content area, and Footer for displaying workflow step information with full customization.",
	"dependencies": ["@xyflow/svelte"],
	"registryDependencies": ["card"],
	"meta": {
		"author": "SikandarJODD",
		"version": "1.0.0",
		"tags": ["workflow", "node", "step", "card", "process"],
		"category": "AI Workflow",
		"documentation": "https://svelte-ai-elements.vercel.app//components/workflow",
		"repository": "https://github.com/SikandarJODD/ai-elements",
		"complexity": "intermediate",
		"updated": "2025-10-10",
		"featured": true
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport { Card } from \"$COMPONENTS$/ui/card\";\n\timport { Handle, Position } from \"@xyflow/svelte\";\n\timport { cn, type WithElementRef } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = WithElementRef<HTMLAttributes<HTMLDivElement>> & {\n\t\thandles: {\n\t\t\ttarget: boolean;\n\t\t\tsource: boolean;\n\t\t};\n\t};\n\n\tlet {\n\t\tref = $bindable(null),\n\t\thandles,\n\t\tclass: className,\n\t\tchildren,\n\t\t...restProps\n\t}: Props = $props();\n</script>\n\n<Card\n\tbind:ref\n\tclass={cn(\"node-container relative size-full h-auto w-sm gap-0 rounded-md p-0\", className)}\n\t{...restProps}\n>\n\t{#if handles.target}\n\t\t<Handle position={Position.Left} type=\"target\" isConnectable />\n\t{/if}\n\t{#if handles.source}\n\t\t<Handle position={Position.Right} type=\"source\" isConnectable />\n\t{/if}\n\t{@render children?.()}\n</Card>\n",
			"type": "registry:component",
			"target": "ai-elements/workflow/node/node.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { CardHeader } from \"$COMPONENTS$/ui/card\";\n\timport { cn, type WithElementRef } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = WithElementRef<HTMLAttributes<HTMLDivElement>>;\n\n\tlet { ref = $bindable(null), class: className, children, ...restProps }: Props = $props();\n</script>\n\n<CardHeader\n\tbind:ref\n\tclass={cn(\"bg-secondary gap-0.5 rounded-t-md border-b p-3!\", className)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</CardHeader>\n",
			"type": "registry:component",
			"target": "ai-elements/workflow/node/node-header.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { CardTitle } from \"$COMPONENTS$/ui/card\";\n\timport type { WithElementRef } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = WithElementRef<HTMLAttributes<HTMLDivElement>>;\n\n\tlet { ref = $bindable(null), class: className, children, ...restProps }: Props = $props();\n</script>\n\n<CardTitle bind:ref class={className} {...restProps}>\n\t{@render children?.()}\n</CardTitle>\n",
			"type": "registry:component",
			"target": "ai-elements/workflow/node/node-title.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { CardDescription } from \"$COMPONENTS$/ui/card\";\n\timport type { WithElementRef } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = WithElementRef<HTMLAttributes<HTMLParagraphElement>>;\n\n\tlet { ref = $bindable(null), class: className, children, ...restProps }: Props = $props();\n</script>\n\n<CardDescription bind:ref class={className} {...restProps}>\n\t{@render children?.()}\n</CardDescription>\n",
			"type": "registry:component",
			"target": "ai-elements/workflow/node/node-description.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { CardAction } from \"$COMPONENTS$/ui/card\";\n\timport type { WithElementRef } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = WithElementRef<HTMLAttributes<HTMLDivElement>>;\n\n\tlet { ref = $bindable(null), class: className, children, ...restProps }: Props = $props();\n</script>\n\n<CardAction bind:ref class={className} {...restProps}>\n\t{@render children?.()}\n</CardAction>\n",
			"type": "registry:component",
			"target": "ai-elements/workflow/node/node-action.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { CardContent } from \"$COMPONENTS$/ui/card\";\n\timport { cn, type WithElementRef } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = WithElementRef<HTMLAttributes<HTMLDivElement>>;\n\n\tlet { ref = $bindable(null), class: className, children, ...restProps }: Props = $props();\n</script>\n\n<CardContent bind:ref class={cn(\"p-3\", className)} {...restProps}>\n\t{@render children?.()}\n</CardContent>\n",
			"type": "registry:component",
			"target": "ai-elements/workflow/node/node-content.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { CardFooter } from \"$COMPONENTS$/ui/card\";\n\timport { cn, type WithElementRef } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = WithElementRef<HTMLAttributes<HTMLDivElement>>;\n\n\tlet { ref = $bindable(null), class: className, children, ...restProps }: Props = $props();\n</script>\n\n<CardFooter\n\tbind:ref\n\tclass={cn(\"bg-secondary rounded-b-md border-t p-3!\", className)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</CardFooter>\n",
			"type": "registry:component",
			"target": "ai-elements/workflow/node/node-footer.svelte"
		},
		{
			"content": "import Root from \"./node.svelte\";\nimport Header from \"./node-header.svelte\";\nimport Title from \"./node-title.svelte\";\nimport Description from \"./node-description.svelte\";\nimport Action from \"./node-action.svelte\";\nimport Content from \"./node-content.svelte\";\nimport Footer from \"./node-footer.svelte\";\n\nexport {\n\tRoot,\n\tHeader,\n\tTitle,\n\tDescription,\n\tAction,\n\tContent,\n\tFooter,\n\t//\n\tRoot as Node,\n\tHeader as NodeHeader,\n\tTitle as NodeTitle,\n\tDescription as NodeDescription,\n\tAction as NodeAction,\n\tContent as NodeContent,\n\tFooter as NodeFooter,\n};\n",
			"type": "registry:file",
			"target": "ai-elements/workflow/node/index.ts"
		}
	]
}
