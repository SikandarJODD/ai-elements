{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "inline-citation",
	"title": "Inline Citation",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The InlineCitation component displays a citation or reference within text, typically used to attribute sources in AI-generated content. It includes a tooltip for additional information.",
	"dependencies": [
		"@lucide/svelte"
	],
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"tooltip",
		"hover-card",
		"badge",
		"button",
		"carousel"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\ttype Props = HTMLAttributes<HTMLSpanElement> & {\r\n\t\tchildren: Snippet;\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n</script>\r\n\r\n<span\r\n\tclass={cn(\"group inline items-center gap-1\", className)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</span>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitation.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import * as HoverCard from \"$COMPONENTS$/ui/hover-card/index\";\r\n  import type { Snippet } from \"svelte\";\r\n\r\n  type Props = {\r\n    children: Snippet;\r\n    closeDelay?: number;\r\n    openDelay?: number;\r\n    open?: boolean;\r\n  };\r\n\r\n  let {\r\n    children,\r\n    closeDelay = 0,\r\n    openDelay = 0,\r\n    open = $bindable(false),\r\n    ...restProps\r\n  }: Props = $props();\r\n</script>\r\n\r\n<HoverCard.Root bind:open {closeDelay} {openDelay} {...restProps}>\r\n  {@render children()}\r\n</HoverCard.Root>\r\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCard.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport * as HoverCard from \"$COMPONENTS$/ui/hover-card/index\";\r\n\timport type { Snippet } from 'svelte';\r\n\r\n\ttype Props = {\r\n\t\tchildren: Snippet;\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n</script>\r\n\r\n<HoverCard.Content\r\n\tclass={cn(\"relative w-80 p-0\", className)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</HoverCard.Content>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCardBody.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { Badge } from \"$COMPONENTS$/ui/badge/index\";\r\n  import * as HoverCard from \"$COMPONENTS$/ui/hover-card/index\";\r\n  import type { Snippet } from \"svelte\";\r\n\r\n  type Props = {\r\n    sources: string[];\r\n    children?: Snippet;\r\n    class?: string;\r\n    variant?: \"default\" | \"secondary\" | \"destructive\" | \"outline\";\r\n  };\r\n\r\n  let {\r\n    sources,\r\n    children,\r\n    class: className,\r\n    variant = \"secondary\",\r\n    ...restProps\r\n  }: Props = $props();\r\n\r\n  const badgeContent = $derived.by(() => {\r\n    if (!sources.length) return \"unknown\";\r\n\r\n    try {\r\n      const hostname = new URL(sources[0]).hostname;\r\n      return sources.length > 1\r\n        ? `${hostname} +${sources.length - 1}`\r\n        : hostname;\r\n    } catch {\r\n      return sources.length > 1\r\n        ? `${sources[0]} +${sources.length - 1}`\r\n        : sources[0];\r\n    }\r\n  });\r\n</script>\r\n\r\n<HoverCard.Trigger>\r\n  <Badge class={cn(\"ml-1 rounded-full\", className)} {variant} {...restProps}>\r\n    {#if children}\r\n      {@render children()}\r\n    {:else}\r\n      {badgeContent}\r\n    {/if}\r\n  </Badge>\r\n</HoverCard.Trigger>\r\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCardTrigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport * as Carousel from '$COMPONENTS$/ui/carousel/index.js';\r\n\timport { CarouselContext, setCarouselContext, type CarouselApi } from './carousel-context.svelte.js';\r\n\timport type { Snippet } from 'svelte';\r\n\r\n\ttype Props = {\r\n\t\tchildren: Snippet;\r\n\t\tclass?: string;\r\n\t\topts?: object;\r\n\t\tplugins?: any[];\r\n\t\torientation?: 'horizontal' | 'vertical';\r\n\t};\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\topts = {},\r\n\t\tplugins = [],\r\n\t\torientation = 'horizontal',\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n\r\n\tconst carouselContext = new CarouselContext();\r\n\tsetCarouselContext(carouselContext);\r\n\r\n\tfunction setApi(api: any) {\r\n\t\tcarouselContext.setApi(api);\r\n\t}\r\n</script>\r\n\r\n<Carousel.Root\r\n\tclass={cn(\"w-full\", className)}\r\n\t{opts}\r\n\t{plugins}\r\n\t{orientation}\r\n\t{...restProps}\r\n  setApi={setApi}\r\n>\r\n\t{@render children()}\r\n</Carousel.Root>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarousel.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport * as Carousel from '$COMPONENTS$/ui/carousel/index.js';\r\n\timport type { Snippet } from 'svelte';\r\n\r\n\ttype Props = {\r\n\t\tchildren: Snippet;\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n</script>\r\n\r\n<Carousel.Content {...restProps}>\r\n\t{@render children()}\r\n</Carousel.Content>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\ttype Props = HTMLAttributes<HTMLDivElement> & {\r\n\t\tchildren: Snippet;\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n</script>\r\n\r\n<div\r\n\tclass={cn(\r\n\t\t\"flex items-center justify-between gap-2 rounded-t-md bg-secondary p-2\",\r\n\t\tclassName\r\n\t)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport { getCarouselContext } from './carousel-context.svelte.js';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\ttype Props = HTMLAttributes<HTMLDivElement> & {\r\n\t\tchildren?: Snippet;\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n\r\n\tconst carouselContext = getCarouselContext();\r\n\r\n\tlet current = $state(0);\r\n\tlet count = $state(0);\r\n\r\n\tconst displayText = $derived.by(() => {\r\n\t\treturn children ? null : `${current}/${count}`;\r\n\t});\r\n\r\n\t$effect(() => {\r\n\t\tconst api = carouselContext?.getApi();\r\n\t\tif (!api) return;\r\n\r\n\t\t// Initialize values\r\n\t\tcount = api.scrollSnapList().length;\r\n\t\tcurrent = api.selectedScrollSnap() + 1;\r\n\r\n\t\t// Set up event listener\r\n\t\tconst handleSelect = () => {\r\n\t\t\tcurrent = api.selectedScrollSnap() + 1;\r\n\t\t};\r\n\r\n\t\tapi.on('select', handleSelect);\r\n\r\n\t\t// Cleanup\r\n\t\treturn () => {\r\n\t\t\tapi.off?.('select', handleSelect);\r\n\t\t};\r\n\t});\r\n</script>\r\n\r\n<div\r\n\tclass={cn(\r\n\t\t\"flex flex-1 items-center justify-end px-3 py-1 text-muted-foreground text-xs\",\r\n\t\tclassName\r\n\t)}\r\n\t{...restProps}\r\n>\r\n\t{#if children}\r\n\t\t{@render children()}\r\n\t{:else}\r\n\t\t{displayText}\r\n\t{/if}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselIndex.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport * as Carousel from '$COMPONENTS$/ui/carousel/index.js';\r\n\timport type { Snippet } from 'svelte';\r\n\r\n\ttype Props = {\r\n\t\tchildren: Snippet;\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n</script>\r\n\r\n<Carousel.Item\r\n\tclass={cn(\"w-full space-y-2 p-4 pl-8\", className)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</Carousel.Item>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselItem.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport { getCarouselContext } from './carousel-context.svelte.js';\r\n\timport { ArrowRight } from '@lucide/svelte';\r\n\timport type { HTMLButtonAttributes } from 'svelte/elements';\r\n\r\n\ttype Props = HTMLButtonAttributes & {\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n\r\n\tconst carouselContext = getCarouselContext();\r\n\r\n\tfunction handleClick() {\r\n\t\tconst api = carouselContext?.getApi();\r\n\t\tif (api) {\r\n\t\t\tapi.scrollNext();\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<button\r\n\taria-label=\"Next\"\r\n\tclass={cn(\"shrink-0\", className)}\r\n\tonclick={handleClick}\r\n\ttype=\"button\"\r\n\t{...restProps}\r\n>\r\n\t<ArrowRight class=\"size-4 text-muted-foreground\" />\r\n</button>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselNext.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport { getCarouselContext } from './carousel-context.svelte.js';\r\n\timport { ArrowLeft } from '@lucide/svelte';\r\n\timport type { HTMLButtonAttributes } from 'svelte/elements';\r\n\r\n\ttype Props = HTMLButtonAttributes & {\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n\r\n\tconst carouselContext = getCarouselContext();\r\n\r\n\tfunction handleClick() {\r\n\t\tconst api = carouselContext?.getApi();\r\n\t\tif (api) {\r\n\t\t\tapi.scrollPrev();\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<button\r\n\taria-label=\"Previous\"\r\n\tclass={cn(\"shrink-0\", className)}\r\n\tonclick={handleClick}\r\n\ttype=\"button\"\r\n\t{...restProps}\r\n>\r\n\t<ArrowLeft class=\"size-4 text-muted-foreground\" />\r\n</button>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselPrev.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\ttype Props = HTMLAttributes<HTMLQuoteElement> & {\r\n\t\tchildren: Snippet;\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n</script>\r\n\r\n<blockquote\r\n\tclass={cn(\r\n\t\t\"border-muted border-l-2 pl-3 text-muted-foreground text-sm italic\",\r\n\t\tclassName\r\n\t)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</blockquote>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationQuote.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\ttype Props = HTMLAttributes<HTMLDivElement> & {\r\n\t\ttitle?: string;\r\n\t\turl?: string;\r\n\t\tdescription?: string;\r\n\t\tchildren?: Snippet;\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\ttitle,\r\n\t\turl,\r\n\t\tdescription,\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n</script>\r\n\r\n<div class={cn(\"space-y-1\", className)} {...restProps}>\r\n\t{#if title}\r\n\t\t<h4 class=\"truncate font-medium text-sm leading-tight\">{title}</h4>\r\n\t{/if}\r\n\t{#if url}\r\n\t\t<p class=\"truncate break-all text-muted-foreground text-xs\">{url}</p>\r\n\t{/if}\r\n\t{#if description}\r\n\t\t<p class=\"line-clamp-3 text-muted-foreground text-sm leading-relaxed\">\r\n\t\t\t{description}\r\n\t\t</p>\r\n\t{/if}\r\n\t{#if children}\r\n\t\t{@render children()}\r\n\t{/if}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationSource.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\ttype Props = HTMLAttributes<HTMLSpanElement> & {\r\n\t\tchildren: Snippet;\r\n\t\tclass?: string;\r\n\t};\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: Props = $props();\r\n</script>\r\n\r\n<span\r\n\tclass={cn(\"transition-colors group-hover:bg-accent\", className)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</span>",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationText.svelte"
		},
		{
			"content": "import { getContext, setContext } from 'svelte';\r\n\r\nconst CAROUSEL_CONTEXT_KEY = Symbol('carousel-context');\r\n\r\nexport interface CarouselApi {\r\n\tscrollPrev: () => void;\r\n\tscrollNext: () => void;\r\n\tselectedScrollSnap: () => number;\r\n\tscrollSnapList: () => number[];\r\n\ton: (event: string, callback: () => void) => void;\r\n\toff?: (event: string, callback: () => void) => void;\r\n}\r\n\r\nexport class CarouselContext {\r\n\tapi = $state<CarouselApi | undefined>(undefined);\r\n\r\n\tsetApi(newApi: CarouselApi | undefined) {\r\n\t\tthis.api = newApi;\r\n\t}\r\n\r\n\tgetApi() {\r\n\t\treturn this.api;\r\n\t}\r\n}\r\n\r\nexport function setCarouselContext(context: CarouselContext) {\r\n\tsetContext(CAROUSEL_CONTEXT_KEY, context);\r\n}\r\n\r\nexport function getCarouselContext(): CarouselContext | undefined {\r\n\treturn getContext(CAROUSEL_CONTEXT_KEY);\r\n}",
			"type": "registry:file",
			"target": "ai-elements/inline-citation/carousel-context.svelte.ts"
		},
		{
			"content": "// Main InlineCitation components\r\nexport { default as InlineCitation } from './InlineCitation.svelte';\r\nexport { default as InlineCitationText } from './InlineCitationText.svelte';\r\n\r\n// HoverCard/Card components\r\nexport { default as InlineCitationCard } from './InlineCitationCard.svelte';\r\nexport { default as InlineCitationCardTrigger } from './InlineCitationCardTrigger.svelte';\r\nexport { default as InlineCitationCardBody } from './InlineCitationCardBody.svelte';\r\n\r\n// Carousel components\r\nexport { default as InlineCitationCarousel } from './InlineCitationCarousel.svelte';\r\nexport { default as InlineCitationCarouselContent } from './InlineCitationCarouselContent.svelte';\r\nexport { default as InlineCitationCarouselItem } from './InlineCitationCarouselItem.svelte';\r\nexport { default as InlineCitationCarouselHeader } from './InlineCitationCarouselHeader.svelte';\r\n\r\n// Carousel navigation components\r\nexport { default as InlineCitationCarouselIndex } from './InlineCitationCarouselIndex.svelte';\r\nexport { default as InlineCitationCarouselPrev } from './InlineCitationCarouselPrev.svelte';\r\nexport { default as InlineCitationCarouselNext } from './InlineCitationCarouselNext.svelte';\r\n\r\n// Content components\r\nexport { default as InlineCitationSource } from './InlineCitationSource.svelte';\r\nexport { default as InlineCitationQuote } from './InlineCitationQuote.svelte';\r\n\r\n// Context exports\r\nexport { CarouselContext, setCarouselContext, getCarouselContext, type CarouselApi } from './carousel-context.svelte.js';",
			"type": "registry:file",
			"target": "ai-elements/inline-citation/index.ts"
		}
	]
}