{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "inline-citation",
	"title": "Inline Citation",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The InlineCitation component displays a citation or reference within text, typically used to attribute sources in AI-generated content. It includes a tooltip for additional information.",
	"dependencies": [
		"@lucide/svelte"
	],
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"tooltip",
		"hover-card",
		"badge",
		"button",
		"carousel"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = HTMLAttributes<HTMLSpanElement> & {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t};\n\n\tlet { children, class: className, ...restProps }: Props = $props();\n</script>\n\n<span class={cn(\"group inline items-center gap-1\", className)} {...restProps}>\n\t{@render children()}\n</span>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitation.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport * as HoverCard from \"$COMPONENTS$/ui/hover-card/index.js\";\n\timport type { Snippet } from \"svelte\";\n\n\ttype Props = {\n\t\tchildren: Snippet;\n\t\tcloseDelay?: number;\n\t\topenDelay?: number;\n\t\topen?: boolean;\n\t};\n\n\tlet {\n\t\tchildren,\n\t\tcloseDelay = 0,\n\t\topenDelay = 0,\n\t\topen = $bindable(false),\n\t\t...restProps\n\t}: Props = $props();\n</script>\n\n<HoverCard.Root bind:open {closeDelay} {openDelay} {...restProps}>\n\t{@render children()}\n</HoverCard.Root>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCard.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport * as HoverCard from \"$COMPONENTS$/ui/hover-card/index.js\";\n\timport type { Snippet } from \"svelte\";\n\n\ttype Props = {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t};\n\n\tlet { children, class: className, ...restProps }: Props = $props();\n</script>\n\n<HoverCard.Content class={cn(\"relative w-80 p-0\", className)} {...restProps}>\n\t{@render children()}\n</HoverCard.Content>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCardBody.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { Badge } from \"$COMPONENTS$/ui/badge/index.js\";\n\timport * as HoverCard from \"$COMPONENTS$/ui/hover-card/index.js\";\n\timport type { Snippet } from \"svelte\";\n\n\ttype Props = {\n\t\tsources: string[];\n\t\tchildren?: Snippet;\n\t\tclass?: string;\n\t\tvariant?: \"default\" | \"secondary\" | \"destructive\" | \"outline\";\n\t};\n\n\tlet {\n\t\tsources,\n\t\tchildren,\n\t\tclass: className,\n\t\tvariant = \"secondary\",\n\t\t...restProps\n\t}: Props = $props();\n\n\tconst badgeContent = $derived.by(() => {\n\t\tif (!sources.length) return \"unknown\";\n\n\t\ttry {\n\t\t\tconst hostname = new URL(sources[0]).hostname;\n\t\t\treturn sources.length > 1 ? `${hostname} +${sources.length - 1}` : hostname;\n\t\t} catch {\n\t\t\treturn sources.length > 1 ? `${sources[0]} +${sources.length - 1}` : sources[0];\n\t\t}\n\t});\n</script>\n\n<HoverCard.Trigger>\n\t<Badge class={cn(\"ml-1 rounded-full\", className)} {variant} {...restProps}>\n\t\t{#if children}\n\t\t\t{@render children()}\n\t\t{:else}\n\t\t\t{badgeContent}\n\t\t{/if}\n\t</Badge>\n</HoverCard.Trigger>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCardTrigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport * as Carousel from \"$COMPONENTS$/ui/carousel/index.js\";\n\timport {\n\t\tCarouselContext,\n\t\tsetCarouselContext,\n\t\ttype CarouselApi,\n\t} from \"./carousel-context.svelte.js\";\n\timport type { Snippet } from \"svelte\";\n\n\ttype Props = {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t\topts?: object;\n\t\tplugins?: any[];\n\t\torientation?: \"horizontal\" | \"vertical\";\n\t};\n\n\tlet {\n\t\tchildren,\n\t\tclass: className,\n\t\topts = {},\n\t\tplugins = [],\n\t\torientation = \"horizontal\",\n\t\t...restProps\n\t}: Props = $props();\n\n\tconst carouselContext = new CarouselContext();\n\tsetCarouselContext(carouselContext);\n\n\tfunction setApi(api: any) {\n\t\tcarouselContext.setApi(api);\n\t}\n</script>\n\n<Carousel.Root\n\tclass={cn(\"w-full\", className)}\n\t{opts}\n\t{plugins}\n\t{orientation}\n\t{...restProps}\n\t{setApi}\n>\n\t{@render children()}\n</Carousel.Root>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarousel.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport * as Carousel from \"$COMPONENTS$/ui/carousel/index.js\";\n\timport type { Snippet } from \"svelte\";\n\n\ttype Props = {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t};\n\n\tlet { children, ...restProps }: Props = $props();\n</script>\n\n<Carousel.Content {...restProps}>\n\t{@render children()}\n</Carousel.Content>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = HTMLAttributes<HTMLDivElement> & {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t};\n\n\tlet { children, class: className, ...restProps }: Props = $props();\n</script>\n\n<div\n\tclass={cn(\"bg-secondary flex items-center justify-between gap-2 rounded-t-md p-2\", className)}\n\t{...restProps}\n>\n\t{@render children()}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getCarouselContext } from \"./carousel-context.svelte.js\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = HTMLAttributes<HTMLDivElement> & {\n\t\tchildren?: Snippet;\n\t\tclass?: string;\n\t};\n\n\tlet { children, class: className, ...restProps }: Props = $props();\n\n\tconst carouselContext = getCarouselContext();\n\n\tlet current = $state(0);\n\tlet count = $state(0);\n\n\tconst displayText = $derived.by(() => {\n\t\treturn children ? null : `${current}/${count}`;\n\t});\n\n\t$effect(() => {\n\t\tconst api = carouselContext?.getApi();\n\t\tif (!api) return;\n\n\t\t// Initialize values\n\t\tcount = api.scrollSnapList().length;\n\t\tcurrent = api.selectedScrollSnap() + 1;\n\n\t\t// Set up event listener\n\t\tconst handleSelect = () => {\n\t\t\tcurrent = api.selectedScrollSnap() + 1;\n\t\t};\n\n\t\tapi.on(\"select\", handleSelect);\n\n\t\t// Cleanup\n\t\treturn () => {\n\t\t\tapi.off?.(\"select\", handleSelect);\n\t\t};\n\t});\n</script>\n\n<div\n\tclass={cn(\n\t\t\"text-muted-foreground flex flex-1 items-center justify-end px-3 py-1 text-xs\",\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t{#if children}\n\t\t{@render children()}\n\t{:else}\n\t\t{displayText}\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselIndex.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport * as Carousel from \"$COMPONENTS$/ui/carousel/index.js\";\n\timport type { Snippet } from \"svelte\";\n\n\ttype Props = {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t};\n\n\tlet { children, class: className, ...restProps }: Props = $props();\n</script>\n\n<Carousel.Item class={cn(\"w-full space-y-2 p-4 pl-8\", className)} {...restProps}>\n\t{@render children()}\n</Carousel.Item>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselItem.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getCarouselContext } from \"./carousel-context.svelte.js\";\n\timport { ArrowRight } from \"@lucide/svelte\";\n\timport type { HTMLButtonAttributes } from \"svelte/elements\";\n\n\ttype Props = HTMLButtonAttributes & {\n\t\tclass?: string;\n\t};\n\n\tlet { class: className, ...restProps }: Props = $props();\n\n\tconst carouselContext = getCarouselContext();\n\n\tfunction handleClick() {\n\t\tconst api = carouselContext?.getApi();\n\t\tif (api) {\n\t\t\tapi.scrollNext();\n\t\t}\n\t}\n</script>\n\n<button\n\taria-label=\"Next\"\n\tclass={cn(\"shrink-0\", className)}\n\tonclick={handleClick}\n\ttype=\"button\"\n\t{...restProps}\n>\n\t<ArrowRight class=\"text-muted-foreground size-4\" />\n</button>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselNext.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getCarouselContext } from \"./carousel-context.svelte.js\";\n\timport { ArrowLeft } from \"@lucide/svelte\";\n\timport type { HTMLButtonAttributes } from \"svelte/elements\";\n\n\ttype Props = HTMLButtonAttributes & {\n\t\tclass?: string;\n\t};\n\n\tlet { class: className, ...restProps }: Props = $props();\n\n\tconst carouselContext = getCarouselContext();\n\n\tfunction handleClick() {\n\t\tconst api = carouselContext?.getApi();\n\t\tif (api) {\n\t\t\tapi.scrollPrev();\n\t\t}\n\t}\n</script>\n\n<button\n\taria-label=\"Previous\"\n\tclass={cn(\"shrink-0\", className)}\n\tonclick={handleClick}\n\ttype=\"button\"\n\t{...restProps}\n>\n\t<ArrowLeft class=\"text-muted-foreground size-4\" />\n</button>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationCarouselPrev.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = HTMLAttributes<HTMLQuoteElement> & {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t};\n\n\tlet { children, class: className, ...restProps }: Props = $props();\n</script>\n\n<blockquote\n\tclass={cn(\"border-muted text-muted-foreground border-l-2 pl-3 text-sm italic\", className)}\n\t{...restProps}\n>\n\t{@render children()}\n</blockquote>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationQuote.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = HTMLAttributes<HTMLDivElement> & {\n\t\ttitle?: string;\n\t\turl?: string;\n\t\tdescription?: string;\n\t\tchildren?: Snippet;\n\t\tclass?: string;\n\t};\n\n\tlet { title, url, description, children, class: className, ...restProps }: Props = $props();\n</script>\n\n<div class={cn(\"space-y-1\", className)} {...restProps}>\n\t{#if title}\n\t\t<h4 class=\"truncate text-sm leading-tight font-medium\">{title}</h4>\n\t{/if}\n\t{#if url}\n\t\t<p class=\"text-muted-foreground truncate text-xs break-all\">{url}</p>\n\t{/if}\n\t{#if description}\n\t\t<p class=\"text-muted-foreground line-clamp-3 text-sm leading-relaxed\">\n\t\t\t{description}\n\t\t</p>\n\t{/if}\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationSource.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\ttype Props = HTMLAttributes<HTMLSpanElement> & {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t};\n\n\tlet { children, class: className, ...restProps }: Props = $props();\n</script>\n\n<span class={cn(\"group-hover:bg-accent transition-colors\", className)} {...restProps}>\n\t{@render children()}\n</span>\n",
			"type": "registry:component",
			"target": "ai-elements/inline-citation/InlineCitationText.svelte"
		},
		{
			"content": "import { getContext, setContext } from \"svelte\";\n\nconst CAROUSEL_CONTEXT_KEY = Symbol(\"carousel-context\");\n\nexport interface CarouselApi {\n\tscrollPrev: () => void;\n\tscrollNext: () => void;\n\tselectedScrollSnap: () => number;\n\tscrollSnapList: () => number[];\n\ton: (event: string, callback: () => void) => void;\n\toff?: (event: string, callback: () => void) => void;\n}\n\nexport class CarouselContext {\n\tapi = $state<CarouselApi | undefined>(undefined);\n\n\tsetApi(newApi: CarouselApi | undefined) {\n\t\tthis.api = newApi;\n\t}\n\n\tgetApi() {\n\t\treturn this.api;\n\t}\n}\n\nexport function setCarouselContext(context: CarouselContext) {\n\tsetContext(CAROUSEL_CONTEXT_KEY, context);\n}\n\nexport function getCarouselContext(): CarouselContext | undefined {\n\treturn getContext(CAROUSEL_CONTEXT_KEY);\n}\n",
			"type": "registry:file",
			"target": "ai-elements/inline-citation/carousel-context.svelte.ts"
		},
		{
			"content": "// Main InlineCitation components\nexport { default as InlineCitation } from \"./InlineCitation.svelte\";\nexport { default as InlineCitationText } from \"./InlineCitationText.svelte\";\n\n// HoverCard/Card components\nexport { default as InlineCitationCard } from \"./InlineCitationCard.svelte\";\nexport { default as InlineCitationCardTrigger } from \"./InlineCitationCardTrigger.svelte\";\nexport { default as InlineCitationCardBody } from \"./InlineCitationCardBody.svelte\";\n\n// Carousel components\nexport { default as InlineCitationCarousel } from \"./InlineCitationCarousel.svelte\";\nexport { default as InlineCitationCarouselContent } from \"./InlineCitationCarouselContent.svelte\";\nexport { default as InlineCitationCarouselItem } from \"./InlineCitationCarouselItem.svelte\";\nexport { default as InlineCitationCarouselHeader } from \"./InlineCitationCarouselHeader.svelte\";\n\n// Carousel navigation components\nexport { default as InlineCitationCarouselIndex } from \"./InlineCitationCarouselIndex.svelte\";\nexport { default as InlineCitationCarouselPrev } from \"./InlineCitationCarouselPrev.svelte\";\nexport { default as InlineCitationCarouselNext } from \"./InlineCitationCarouselNext.svelte\";\n\n// Content components\nexport { default as InlineCitationSource } from \"./InlineCitationSource.svelte\";\nexport { default as InlineCitationQuote } from \"./InlineCitationQuote.svelte\";\n\n// Context exports\nexport {\n\tCarouselContext,\n\tsetCarouselContext,\n\tgetCarouselContext,\n\ttype CarouselApi,\n} from \"./carousel-context.svelte.js\";\n",
			"type": "registry:file",
			"target": "ai-elements/inline-citation/index.ts"
		}
	]
}