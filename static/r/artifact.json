{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "artifact",
	"title": "Artifact",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The Artifact component provides a structured container for displaying generated content like code, documents, or other outputs with built-in header actions.",
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"button",
		"tooltip"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface Props extends HTMLAttributes<HTMLDivElement> {\r\n    class?: string;\r\n    children?: any;\r\n  }\r\n\r\n  let { class: className, children, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<div\r\n  class={cn(\r\n    \"flex flex-col overflow-hidden rounded-lg border bg-background shadow-sm\",\r\n    className\r\n  )}\r\n  {...restProps}\r\n>\r\n  {@render children?.()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/Artifact.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface Props extends HTMLAttributes<HTMLDivElement> {\r\n    class?: string;\r\n    children?: any;\r\n  }\r\n\r\n  let { class: className, children, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<div\r\n  class={cn(\r\n    \"flex items-center justify-between border-b bg-muted/50 px-4 py-3\",\r\n    className\r\n  )}\r\n  {...restProps}\r\n>\r\n  {@render children?.()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface Props extends HTMLAttributes<HTMLDivElement> {\r\n    class?: string;\r\n    children?: any;\r\n  }\r\n\r\n  let { class: className, children, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<div class={cn(\"flex-1 overflow-auto p-4\", className)} {...restProps}>\r\n  {@render children?.()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface Props extends HTMLAttributes<HTMLParagraphElement> {\r\n    class?: string;\r\n    children?: any;\r\n  }\r\n\r\n  let { class: className, children, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<p class={cn(\"text-muted-foreground text-sm\", className)} {...restProps}>\r\n  {@render children?.()}\r\n</p>\r\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactDescription.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { Button, type ButtonProps } from \"$COMPONENTS$/ui/button\";\r\n  import {\r\n    Tooltip,\r\n    TooltipContent,\r\n    TooltipProvider,\r\n    TooltipTrigger,\r\n  } from \"$COMPONENTS$/ui/tooltip\";\r\n  import { cn } from \"$UTILS$\";\r\n  import { type Icon as IconType } from \"@lucide/svelte\";\r\n\r\n  interface Props extends ButtonProps {\r\n    class?: string;\r\n    tooltip?: string;\r\n    label?: string;\r\n    icon?: typeof IconType;\r\n    size?: ButtonProps[\"size\"];\r\n    variant?: ButtonProps[\"variant\"];\r\n  }\r\n\r\n  let {\r\n    tooltip,\r\n    label,\r\n    icon: Icon,\r\n    children,\r\n    class: className,\r\n    size = \"sm\",\r\n    variant = \"ghost\",\r\n    ...restProps\r\n  }: Props = $props();\r\n\r\n  let id = crypto.randomUUID();\r\n</script>\r\n\r\n{#snippet buttonContent()}\r\n  <Button\r\n    class={cn(\r\n      \"size-8 p-0 text-muted-foreground hover:text-foreground\",\r\n      className\r\n    )}\r\n    {size}\r\n    type=\"button\"\r\n    {variant}\r\n    {...restProps}\r\n  >\r\n    {#if Icon}\r\n      <Icon class=\"size-4\" />\r\n    {:else if children}\r\n      {@render children()}\r\n    {/if}\r\n    <span class=\"sr-only\">{label || tooltip}</span>\r\n  </Button>\r\n{/snippet}\r\n\r\n{#if tooltip}\r\n  <TooltipProvider>\r\n    <Tooltip>\r\n      <TooltipTrigger>\r\n        {@render buttonContent()}\r\n      </TooltipTrigger>\r\n      <TooltipContent>\r\n        <p>{tooltip}</p>\r\n      </TooltipContent>\r\n    </Tooltip>\r\n  </TooltipProvider>\r\n{:else}\r\n  {@render buttonContent()}\r\n{/if}\r\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactAction.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface Props extends HTMLAttributes<HTMLDivElement> {\r\n    class?: string;\r\n    children?: any;\r\n  }\r\n\r\n  let { class: className, children, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<div class={cn(\"flex items-center gap-1\", className)} {...restProps}>\r\n  {@render children?.()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactActions.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface Props extends HTMLAttributes<HTMLParagraphElement> {\r\n    class?: string;\r\n    children?: any;\r\n  }\r\n\r\n  let { class: className, children, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<p class={cn(\"font-medium text-foreground text-sm\", className)} {...restProps}>\r\n  {@render children?.()}\r\n</p>\r\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactTitle.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { Button, type ButtonProps } from \"$COMPONENTS$/ui/button\";\r\n  import { cn } from \"$UTILS$\";\r\n\r\n  interface Props extends ButtonProps {\r\n    class?: string;\r\n    size?: ButtonProps[\"size\"];\r\n    variant?: ButtonProps[\"variant\"];\r\n  }\r\n\r\n  let {\r\n    class: className,\r\n    children,\r\n    size = \"sm\",\r\n    variant = \"ghost\",\r\n    ...restProps\r\n  }: Props = $props();\r\n</script>\r\n\r\n<Button\r\n  class={cn(\r\n    \"size-8 p-0 text-muted-foreground hover:text-foreground\",\r\n    className\r\n  )}\r\n  {size}\r\n  type=\"button\"\r\n  {variant}\r\n  {...restProps}\r\n>\r\n  {#if children}\r\n    {@render children()}\r\n  {:else}\r\n    <!-- X icon (you might want to import an actual icon component) -->\r\n    <svg\r\n      class=\"size-4\"\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        stroke-linecap=\"round\"\r\n        stroke-linejoin=\"round\"\r\n        stroke-width=\"2\"\r\n        d=\"M6 18L18 6M6 6l12 12\"\r\n      ></path>\r\n    </svg>\r\n  {/if}\r\n  <span class=\"sr-only\">Close</span>\r\n</Button>\r\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactClose.svelte"
		},
		{
			"content": "import Root from \"./Artifact.svelte\";\r\nimport Header from \"./ArtifactHeader.svelte\";\r\nimport Close from \"./ArtifactClose.svelte\";\r\nimport Title from \"./ArtifactTitle.svelte\";\r\nimport Description from \"./ArtifactDescription.svelte\";\r\nimport Actions from \"./ArtifactActions.svelte\";\r\nimport Action from \"./ArtifactAction.svelte\";\r\nimport Content from \"./ArtifactContent.svelte\";\r\n\r\nexport {\r\n\tRoot,\r\n\tHeader,\r\n\tClose,\r\n\tTitle,\r\n\tDescription,\r\n\tActions,\r\n\tAction,\r\n\tContent,\r\n\t//\r\n\tRoot as Artifact,\r\n\tHeader as ArtifactHeader,\r\n\tClose as ArtifactClose,\r\n\tTitle as ArtifactTitle,\r\n\tDescription as ArtifactDescription,\r\n\tActions as ArtifactActions,\r\n\tAction as ArtifactAction,\r\n\tContent as ArtifactContent,\r\n};",
			"type": "registry:file",
			"target": "ai-elements/artifact/index.ts"
		}
	]
}