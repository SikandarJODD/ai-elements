{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "artifact",
	"title": "Artifact",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The Artifact component provides a structured container for displaying generated content like code, documents, or other outputs with built-in header actions.",
	"devDependencies": ["@lucide/svelte@^0.544.0"],
	"registryDependencies": ["button", "tooltip"],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface Props extends HTMLAttributes<HTMLDivElement> {\n\t\tclass?: string;\n\t\tchildren?: any;\n\t}\n\n\tlet { class: className, children, ...restProps }: Props = $props();\n</script>\n\n<div\n\tclass={cn(\"bg-background flex flex-col overflow-hidden rounded-lg border shadow-sm\", className)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/Artifact.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface Props extends HTMLAttributes<HTMLDivElement> {\n\t\tclass?: string;\n\t\tchildren?: any;\n\t}\n\n\tlet { class: className, children, ...restProps }: Props = $props();\n</script>\n\n<div\n\tclass={cn(\"bg-muted/50 flex items-center justify-between border-b px-4 py-3\", className)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface Props extends HTMLAttributes<HTMLDivElement> {\n\t\tclass?: string;\n\t\tchildren?: any;\n\t}\n\n\tlet { class: className, children, ...restProps }: Props = $props();\n</script>\n\n<div class={cn(\"flex-1 overflow-auto p-4\", className)} {...restProps}>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface Props extends HTMLAttributes<HTMLParagraphElement> {\n\t\tclass?: string;\n\t\tchildren?: any;\n\t}\n\n\tlet { class: className, children, ...restProps }: Props = $props();\n</script>\n\n<p class={cn(\"text-muted-foreground text-sm\", className)} {...restProps}>\n\t{@render children?.()}\n</p>\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactDescription.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { Button, type ButtonProps } from \"$COMPONENTS$/ui/button/index.js\";\n\timport {\n\t\tTooltip,\n\t\tTooltipContent,\n\t\tTooltipProvider,\n\t\tTooltipTrigger,\n\t} from \"$COMPONENTS$/ui/tooltip/index.js\";\n\timport { cn } from \"$UTILS$\";\n\timport { type Icon as IconType } from \"@lucide/svelte\";\n\n\tinterface Props extends ButtonProps {\n\t\tclass?: string;\n\t\ttooltip?: string;\n\t\tlabel?: string;\n\t\ticon?: typeof IconType;\n\t\tsize?: ButtonProps[\"size\"];\n\t\tvariant?: ButtonProps[\"variant\"];\n\t}\n\n\tlet {\n\t\ttooltip,\n\t\tlabel,\n\t\ticon: Icon,\n\t\tchildren,\n\t\tclass: className,\n\t\tsize = \"sm\",\n\t\tvariant = \"ghost\",\n\t\t...restProps\n\t}: Props = $props();\n\n\tlet id = crypto.randomUUID();\n</script>\n\n{#snippet buttonContent()}\n\t<Button\n\t\tclass={cn(\"text-muted-foreground hover:text-foreground size-8 p-0\", className)}\n\t\t{size}\n\t\ttype=\"button\"\n\t\t{variant}\n\t\t{...restProps}\n\t>\n\t\t{#if Icon}\n\t\t\t<Icon class=\"size-4\" />\n\t\t{:else if children}\n\t\t\t{@render children()}\n\t\t{/if}\n\t\t<span class=\"sr-only\">{label || tooltip}</span>\n\t</Button>\n{/snippet}\n\n{#if tooltip}\n\t<TooltipProvider>\n\t\t<Tooltip>\n\t\t\t<TooltipTrigger>\n\t\t\t\t{@render buttonContent()}\n\t\t\t</TooltipTrigger>\n\t\t\t<TooltipContent>\n\t\t\t\t<p>{tooltip}</p>\n\t\t\t</TooltipContent>\n\t\t</Tooltip>\n\t</TooltipProvider>\n{:else}\n\t{@render buttonContent()}\n{/if}\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactAction.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface Props extends HTMLAttributes<HTMLDivElement> {\n\t\tclass?: string;\n\t\tchildren?: any;\n\t}\n\n\tlet { class: className, children, ...restProps }: Props = $props();\n</script>\n\n<div class={cn(\"flex items-center gap-1\", className)} {...restProps}>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactActions.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface Props extends HTMLAttributes<HTMLParagraphElement> {\n\t\tclass?: string;\n\t\tchildren?: any;\n\t}\n\n\tlet { class: className, children, ...restProps }: Props = $props();\n</script>\n\n<p class={cn(\"text-foreground text-sm font-medium\", className)} {...restProps}>\n\t{@render children?.()}\n</p>\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactTitle.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { Button, type ButtonProps } from \"$COMPONENTS$/ui/button/index.js\";\n\timport { cn } from \"$UTILS$\";\n\n\tinterface Props extends ButtonProps {\n\t\tclass?: string;\n\t\tsize?: ButtonProps[\"size\"];\n\t\tvariant?: ButtonProps[\"variant\"];\n\t}\n\n\tlet {\n\t\tclass: className,\n\t\tchildren,\n\t\tsize = \"sm\",\n\t\tvariant = \"ghost\",\n\t\t...restProps\n\t}: Props = $props();\n</script>\n\n<Button\n\tclass={cn(\"text-muted-foreground hover:text-foreground size-8 p-0\", className)}\n\t{size}\n\ttype=\"button\"\n\t{variant}\n\t{...restProps}\n>\n\t{#if children}\n\t\t{@render children()}\n\t{:else}\n\t\t<!-- X icon (you might want to import an actual icon component) -->\n\t\t<svg\n\t\t\tclass=\"size-4\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t>\n\t\t\t<path\n\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\tstroke-width=\"2\"\n\t\t\t\td=\"M6 18L18 6M6 6l12 12\"\n\t\t\t></path>\n\t\t</svg>\n\t{/if}\n\t<span class=\"sr-only\">Close</span>\n</Button>\n",
			"type": "registry:component",
			"target": "ai-elements/artifact/ArtifactClose.svelte"
		},
		{
			"content": "import Root from \"./Artifact.svelte\";\nimport Header from \"./ArtifactHeader.svelte\";\nimport Close from \"./ArtifactClose.svelte\";\nimport Title from \"./ArtifactTitle.svelte\";\nimport Description from \"./ArtifactDescription.svelte\";\nimport Actions from \"./ArtifactActions.svelte\";\nimport Action from \"./ArtifactAction.svelte\";\nimport Content from \"./ArtifactContent.svelte\";\n\nexport {\n\tRoot,\n\tHeader,\n\tClose,\n\tTitle,\n\tDescription,\n\tActions,\n\tAction,\n\tContent,\n\t//\n\tRoot as Artifact,\n\tHeader as ArtifactHeader,\n\tClose as ArtifactClose,\n\tTitle as ArtifactTitle,\n\tDescription as ArtifactDescription,\n\tActions as ArtifactActions,\n\tAction as ArtifactAction,\n\tContent as ArtifactContent,\n};\n",
			"type": "registry:file",
			"target": "ai-elements/artifact/index.ts"
		}
	]
}
