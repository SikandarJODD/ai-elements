{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "prompt-input",
	"type": "registry:block",
	"description": "The PromptInput component allows a user to send a message with file attachments to a large language model. It includes a textarea, file upload capabilities, a submit button, and a dropdown for selecting the model.",
	"dependencies": [
		"runed"
	],
	"registryDependencies": [
		"button",
		"textarea",
		"select",
		"dropdown-menu",
		"tooltip"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$.js\";\r\n  import { watch } from \"runed\";\r\n  import { onMount } from \"svelte\";\r\n  import {\r\n    AttachmentsContext,\r\n    setAttachmentsContext,\r\n    type PromptInputMessage,\r\n    type FileUIPart,\r\n  } from \"./attachments-context.svelte.js\";\r\n\r\n  interface Props {\r\n    class?: string;\r\n    accept?: string; // e.g., \"image/*\" or leave undefined for any\r\n    multiple?: boolean;\r\n    // When true, accepts drops anywhere on document. Default false (opt-in).\r\n    globalDrop?: boolean;\r\n    // Render a hidden input with given name and keep it in sync for native form posts. Default false.\r\n    syncHiddenInput?: boolean;\r\n    // When true, automatically clears attachments after successful submission. Default true.\r\n    clearOnSubmit?: boolean;\r\n    // Minimal constraints\r\n    maxFiles?: number;\r\n    maxFileSize?: number; // bytes\r\n    onError?: (err: {\r\n      code: \"max_files\" | \"max_file_size\" | \"accept\";\r\n      message: string;\r\n    }) => void;\r\n    onSubmit: (message: PromptInputMessage, event: SubmitEvent) => void;\r\n    children?: import(\"svelte\").Snippet;\r\n  }\r\n\r\n  let {\r\n    class: className,\r\n    accept,\r\n    multiple,\r\n    globalDrop,\r\n    syncHiddenInput,\r\n    clearOnSubmit = true,\r\n    maxFiles,\r\n    maxFileSize,\r\n    onError,\r\n    onSubmit,\r\n    children,\r\n    ...props\r\n  }: Props = $props();\r\n\r\n  let anchorRef = $state<HTMLSpanElement | null>(null);\r\n  let formRef = $state<HTMLFormElement | null>(null);\r\n  let attachmentsContext = new AttachmentsContext(\r\n    accept,\r\n    multiple,\r\n    maxFiles,\r\n    maxFileSize,\r\n    onError\r\n  );\r\n\r\n  // Find nearest form to scope drag & drop\r\n  onMount(() => {\r\n    let root = anchorRef?.closest(\"form\");\r\n    if (root instanceof HTMLFormElement) {\r\n      formRef = root;\r\n    }\r\n  });\r\n\r\n  // Attach drop handlers on nearest form\r\n  watch(\r\n    () => formRef,\r\n    (formRef) => {\r\n      if (!formRef) return;\r\n\r\n      let onDragOver = (e: DragEvent) => {\r\n        if (e.dataTransfer?.types?.includes(\"Files\")) {\r\n          e.preventDefault();\r\n        }\r\n      };\r\n\r\n      let onDrop = (e: DragEvent) => {\r\n        if (e.dataTransfer?.types?.includes(\"Files\")) {\r\n          e.preventDefault();\r\n        }\r\n        if (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {\r\n          attachmentsContext.add(e.dataTransfer.files);\r\n        }\r\n      };\r\n\r\n      formRef.addEventListener(\"dragover\", onDragOver);\r\n      formRef.addEventListener(\"drop\", onDrop);\r\n\r\n      return () => {\r\n        formRef?.removeEventListener(\"dragover\", onDragOver);\r\n        formRef?.removeEventListener(\"drop\", onDrop);\r\n      };\r\n    }\r\n  );\r\n\r\n  // Global drop handlers\r\n  watch(\r\n    () => globalDrop,\r\n    (globalDrop) => {\r\n      if (!globalDrop) return;\r\n\r\n      let onDragOver = (e: DragEvent) => {\r\n        if (e.dataTransfer?.types?.includes(\"Files\")) {\r\n          e.preventDefault();\r\n        }\r\n      };\r\n\r\n      let onDrop = (e: DragEvent) => {\r\n        if (e.dataTransfer?.types?.includes(\"Files\")) {\r\n          e.preventDefault();\r\n        }\r\n        if (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {\r\n          attachmentsContext.add(e.dataTransfer.files);\r\n        }\r\n      };\r\n\r\n      document.addEventListener(\"dragover\", onDragOver);\r\n      document.addEventListener(\"drop\", onDrop);\r\n\r\n      return () => {\r\n        document.removeEventListener(\"dragover\", onDragOver);\r\n        document.removeEventListener(\"drop\", onDrop);\r\n      };\r\n    }\r\n  );\r\n\r\n  // Note: File input cannot be programmatically set for security reasons\r\n  // The syncHiddenInput prop is no longer functional\r\n  watch(\r\n    () => attachmentsContext.files,\r\n    () => {\r\n      if (syncHiddenInput && attachmentsContext.fileInputRef) {\r\n        // Clear the input when items are cleared\r\n        if (attachmentsContext.files.length === 0) {\r\n          attachmentsContext.fileInputRef.value = \"\";\r\n        }\r\n      }\r\n    }\r\n  );\r\n\r\n  let handleChange = (event: Event) => {\r\n    let target = event.currentTarget as HTMLInputElement;\r\n    if (target.files) {\r\n      attachmentsContext.add(target.files);\r\n    }\r\n  };\r\n\r\n  let handleSubmit = (event: SubmitEvent) => {\r\n    event.preventDefault();\r\n\r\n    let formData = new FormData(event.currentTarget as HTMLFormElement);\r\n    let files: FileUIPart[] = attachmentsContext.files.map(\r\n      ({ id, ...item }) => ({\r\n        ...item,\r\n      })\r\n    );\r\n\r\n    onSubmit({ text: formData.get(\"message\") as string, files }, event);\r\n\r\n    // Clear attachments after submission if clearOnSubmit is true\r\n    if (clearOnSubmit) {\r\n      attachmentsContext.clear();\r\n    }\r\n  };\r\n\r\n  setAttachmentsContext(attachmentsContext);\r\n</script>\r\n\r\n<span aria-hidden=\"true\" class=\"hidden\" bind:this={anchorRef}></span>\r\n<input\r\n  {accept}\r\n  class=\"hidden\"\r\n  {multiple}\r\n  onchange={handleChange}\r\n  bind:this={attachmentsContext.fileInputRef}\r\n  type=\"file\"\r\n/>\r\n<form\r\n  class={cn(\r\n    \"w-full divide-y overflow-hidden rounded-xl border bg-background shadow-sm\",\r\n    className\r\n  )}\r\n  onsubmit={handleSubmit}\r\n  {...props}\r\n>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</form>\r\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInput.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\n\r\ninterface Props {\r\n  class?: string;\r\n  children?: import(\"svelte\").Snippet;\r\n}\r\n\r\nlet { class: className, children, ...props }: Props = $props();\r\n</script>\r\n\r\n<div class={cn(className, \"flex flex-col\")} {...props}>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputBody.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\nimport { Textarea } from \"$lib/components/ui/textarea/index.js\";\r\n\r\ninterface Props {\r\n  class?: string;\r\n  placeholder?: string;\r\n  value?: string;\r\n  onchange?: (event: Event) => void;\r\n}\r\n\r\nlet {\r\n  class: className,\r\n  placeholder = \"What would you like to know?\",\r\n  value = $bindable(\"\"),\r\n  onchange,\r\n  ...props\r\n}: Props = $props();\r\n\r\nlet handleKeyDown = (e: KeyboardEvent) => {\r\n  if (e.key === \"Enter\") {\r\n    // Don't submit if IME composition is in progress\r\n    if (e.isComposing) {\r\n      return;\r\n    }\r\n\r\n    if (e.shiftKey) {\r\n      // Allow newline\r\n      return;\r\n    }\r\n\r\n    // Submit on Enter (without Shift)\r\n    e.preventDefault();\r\n    let form = (e.currentTarget as HTMLTextAreaElement).form;\r\n    if (form) {\r\n      form.requestSubmit();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<Textarea\r\n  class={cn(\r\n    \"w-full resize-none rounded-none border-none p-3 shadow-none outline-none ring-0\",\r\n    \"field-sizing-content bg-transparent dark:bg-transparent\",\r\n    \"max-h-48 min-h-16\",\r\n    \"focus-visible:ring-0\",\r\n    className\r\n  )}\r\n  name=\"message\"\r\n  {onchange}\r\n  onkeydown={handleKeyDown}\r\n  {placeholder}\r\n  bind:value\r\n  {...props}\r\n/>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputTextarea.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\n\r\ninterface Props {\r\n  class?: string;\r\n  children?: import(\"svelte\").Snippet;\r\n}\r\n\r\nlet { class: className, children, ...props }: Props = $props();\r\n</script>\r\n\r\n<div\r\n  class={cn(\"flex items-center justify-between p-1\", className)}\r\n  {...props}\r\n>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputToolbar.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\n\r\ninterface Props {\r\n  class?: string;\r\n  children?: import(\"svelte\").Snippet;\r\n}\r\n\r\nlet { class: className, children, ...props }: Props = $props();\r\n</script>\r\n\r\n<div\r\n  class={cn(\r\n    \"flex items-center gap-1\",\r\n    \"[&_button:first-child]:rounded-bl-xl\",\r\n    className\r\n  )}\r\n  {...props}\r\n>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputTools.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\nimport Button from \"$lib/components/ui/button/button.svelte\";\r\nimport type { ButtonProps } from \"$lib/components/ui/button/index\";\r\n\r\ninterface Props extends ButtonProps {\r\n  class?: string;\r\n  children?: import(\"svelte\").Snippet;\r\n}\r\n\r\nlet {\r\n  variant = \"ghost\",\r\n  class: className,\r\n  size,\r\n  children,\r\n  ...props\r\n}: Props = $props();\r\n\r\nlet hasMultipleChildren = $derived.by(() => {\r\n  // In Svelte, we can't easily count children like in React, so we'll default to checking if size is provided\r\n  return size !== undefined;\r\n});\r\n\r\nlet newSize = $derived.by((): \"default\" | \"sm\" | \"lg\" | \"icon\" => {\r\n  return (size ?? hasMultipleChildren) ? \"default\" : \"icon\";\r\n});\r\n</script>\r\n\r\n<Button\r\n  class={cn(\r\n    \"shrink-0 gap-1.5 rounded-lg\",\r\n    variant === \"ghost\" && \"text-muted-foreground\",\r\n    newSize === \"default\" && \"px-3\",\r\n    className\r\n  )}\r\n  size={newSize}\r\n  type=\"button\"\r\n  {variant}\r\n  {...props}\r\n>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</Button>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputButton.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\nimport Button from \"$lib/components/ui/button/button.svelte\";\r\nimport { getAttachmentsContext, type FileWithId } from \"./attachments-context.svelte.js\";\r\nimport PaperclipIcon from \"./PaperclipIcon.svelte\";\r\nimport XIcon from \"./XIcon.svelte\";\r\n\r\ninterface Props {\r\n  data: FileWithId;\r\n  class?: string;\r\n}\r\n\r\nlet { data, class: className, ...props }: Props = $props();\r\n\r\nlet attachments = getAttachmentsContext();\r\n</script>\r\n\r\n<div\r\n  class={cn(\"group relative h-14 w-14 rounded-md border\", className)}\r\n  {...props}\r\n>\r\n  {#if data.mediaType?.startsWith(\"image/\") && data.url}\r\n    <img\r\n      alt={data.filename || \"attachment\"}\r\n      class=\"size-full rounded-md object-cover\"\r\n      height={56}\r\n      src={data.url}\r\n      width={56}\r\n    />\r\n  {:else}\r\n    <div class=\"flex size-full items-center justify-center text-muted-foreground\">\r\n      <PaperclipIcon class=\"size-4\" />\r\n    </div>\r\n  {/if}\r\n  <Button\r\n    aria-label=\"Remove attachment\"\r\n    class=\"-right-1.5 -top-1.5 absolute h-6 w-6 rounded-full opacity-0 group-hover:opacity-100\"\r\n    onclick={() => attachments.remove(data.id)}\r\n    size=\"icon\"\r\n    type=\"button\"\r\n    variant=\"outline\"\r\n  >\r\n    <XIcon class=\"h-3 w-3\" />\r\n  </Button>\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputAttachment.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\nimport { watch } from \"runed\";\r\nimport { getAttachmentsContext, type FileWithId } from \"./attachments-context.svelte.js\";\r\n\r\ninterface Props {\r\n  class?: string;\r\n  children?: import(\"svelte\").Snippet<[FileWithId]>;\r\n}\r\n\r\nlet { class: className, children, ...props }: Props = $props();\r\n\r\nlet attachments = getAttachmentsContext();\r\nlet height = $state(0);\r\nlet contentRef = $state<HTMLDivElement | null>(null);\r\n\r\n// Watch for resize changes using ResizeObserver\r\nwatch(\r\n  () => contentRef,\r\n  (contentRef) => {\r\n    if (!contentRef) return;\r\n\r\n    let ro = new ResizeObserver(() => {\r\n      if (contentRef) {\r\n        height = contentRef.getBoundingClientRect().height;\r\n      }\r\n    });\r\n\r\n    ro.observe(contentRef);\r\n    height = contentRef.getBoundingClientRect().height;\r\n\r\n    return () => ro.disconnect();\r\n  }\r\n);\r\n\r\nlet computedHeight = $derived.by(() => {\r\n  return attachments.files.length ? height : 0;\r\n});\r\n</script>\r\n\r\n<div\r\n  aria-live=\"polite\"\r\n  class={cn(\r\n    \"overflow-hidden transition-[height] duration-200 ease-out\",\r\n    className\r\n  )}\r\n  style:height=\"{computedHeight}px\"\r\n  {...props}\r\n>\r\n  <div class=\"flex flex-wrap gap-2 p-3 pt-3\" bind:this={contentRef}>\r\n    {#each attachments.files as file (file.id)}\r\n      {#if children}\r\n        {@render children(file)}\r\n      {/if}\r\n    {/each}\r\n  </div>\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputAttachments.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport * as DropdownMenu from \"$lib/components/ui/dropdown-menu/index.js\";\r\n\r\ninterface Props {\r\n  open?: boolean;\r\n  children?: import(\"svelte\").Snippet;\r\n}\r\n\r\nlet { open = $bindable(false), children, ...props }: Props = $props();\r\n</script>\r\n\r\n<DropdownMenu.Root bind:open {...props}>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</DropdownMenu.Root>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputActionMenu.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import * as DropdownMenu from \"$lib/components/ui/dropdown-menu/index.js\";\r\n  import PromptInputButton from \"./PromptInputButton.svelte\";\r\n  import PlusIcon from \"./PlusIcon.svelte\";\r\n\r\n  interface Props {\r\n    class?: string;\r\n    children?: import(\"svelte\").Snippet;\r\n  }\r\n\r\n  let { class: className, children, ...props }: Props = $props();\r\n</script>\r\n\r\n<DropdownMenu.Trigger>\r\n  <PromptInputButton class={className} {...props}>\r\n    {#if children}\r\n      {@render children()}\r\n    {:else}\r\n      <PlusIcon class=\"size-4\" />\r\n    {/if}\r\n  </PromptInputButton>\r\n</DropdownMenu.Trigger>\r\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputActionMenuTrigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\nimport * as DropdownMenu from \"$lib/components/ui/dropdown-menu/index.js\";\r\n\r\ninterface Props {\r\n  class?: string;\r\n  children?: import(\"svelte\").Snippet;\r\n}\r\n\r\nlet { class: className, children, ...props }: Props = $props();\r\n</script>\r\n\r\n<DropdownMenu.Content align=\"start\" class={cn(className)} {...props}>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</DropdownMenu.Content>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputActionMenuContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\nimport * as DropdownMenu from \"$lib/components/ui/dropdown-menu/index.js\";\r\n\r\ninterface Props {\r\n  class?: string;\r\n  children?: import(\"svelte\").Snippet;\r\n  onSelect?: (event: Event) => void;\r\n}\r\n\r\nlet { class: className, children, onSelect, ...props }: Props = $props();\r\n</script>\r\n\r\n<DropdownMenu.Item class={cn(className)} {onSelect} {...props}>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</DropdownMenu.Item>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputActionMenuItem.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { getAttachmentsContext } from \"./attachments-context.svelte.js\";\r\nimport PromptInputActionMenuItem from \"./PromptInputActionMenuItem.svelte\";\r\nimport ImageIcon from \"./ImageIcon.svelte\";\r\n\r\ninterface Props {\r\n  label?: string;\r\n  class?: string;\r\n}\r\n\r\nlet { label = \"Add photos or files\", class: className, ...props }: Props = $props();\r\n\r\nlet attachments = getAttachmentsContext();\r\n\r\nlet handleSelect = (e: Event) => {\r\n  e.preventDefault();\r\n  attachments.openFileDialog();\r\n};\r\n</script>\r\n\r\n<PromptInputActionMenuItem class={className} onSelect={handleSelect} {...props}>\r\n  <ImageIcon class=\"mr-2 size-4\" /> {label}\r\n</PromptInputActionMenuItem>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputActionAddAttachments.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$.js\";\r\n  import Button from \"$lib/components/ui/button/button.svelte\";\r\n  import type { ButtonProps } from \"$lib/components/ui/button/index.js\";\r\n  import type { ChatStatus } from \"./attachments-context.svelte.js\";\r\n  import SendIcon from \"./SendIcon.svelte\";\r\n  import Loader2Icon from \"./Loader2Icon.svelte\";\r\n  import SquareIcon from \"./SquareIcon.svelte\";\r\n  import XIcon from \"./XIcon.svelte\";\r\n\r\n  interface Props extends ButtonProps {\r\n    class?: string;\r\n    status?: ChatStatus;\r\n    children?: import(\"svelte\").Snippet;\r\n  }\r\n\r\n  let {\r\n    class: className,\r\n    variant = \"default\",\r\n    size = \"icon\",\r\n    status,\r\n    children,\r\n    ...props\r\n  }: Props = $props();\r\n\r\n  let Icon = $derived.by(() => {\r\n    if (status === \"submitted\") {\r\n      return Loader2Icon;\r\n    } else if (status === \"streaming\") {\r\n      return SquareIcon;\r\n    } else if (status === \"error\") {\r\n      return XIcon;\r\n    }\r\n    return SendIcon;\r\n  });\r\n\r\n  let iconClass = $derived.by(() => {\r\n    if (status === \"submitted\") {\r\n      return \"size-4 animate-spin\";\r\n    }\r\n    return \"size-4\";\r\n  });\r\n</script>\r\n\r\n<Button\r\n  class={cn(\"gap-1.5 rounded-lg\", className)}\r\n  {size}\r\n  type=\"submit\"\r\n  {variant}\r\n  {...props}\r\n>\r\n  {#if children}\r\n    {@render children()}\r\n  {:else}\r\n    <!-- <svelte:component this={Icon} class={iconClass} /> -->\r\n    <Icon class={iconClass} />\r\n  {/if}\r\n</Button>\r\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputSubmit.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import * as Select from \"$lib/components/ui/select/index.js\";\r\n\r\n  interface Props {\r\n    value?: string;\r\n    onValueChange?: (value: string | undefined) => void;\r\n    children?: import(\"svelte\").Snippet;\r\n  }\r\n\r\n  let {\r\n    value = $bindable(\"\"),\r\n    onValueChange,\r\n    children,\r\n    ...props\r\n  }: Props = $props();\r\n</script>\r\n\r\n<Select.Root bind:value {onValueChange} type=\"single\" {...props}>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</Select.Root>\r\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputModelSelect.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\nimport * as Select from \"$lib/components/ui/select/index.js\";\r\n\r\ninterface Props {\r\n  class?: string;\r\n  children?: import(\"svelte\").Snippet;\r\n}\r\n\r\nlet { class: className, children, ...props }: Props = $props();\r\n</script>\r\n\r\n<Select.Trigger\r\n  class={cn(\r\n    \"border-none bg-transparent font-medium text-muted-foreground shadow-none transition-colors\",\r\n    'hover:bg-accent hover:text-foreground [&[aria-expanded=\"true\"]]:bg-accent [&[aria-expanded=\"true\"]]:text-foreground',\r\n    className\r\n  )}\r\n  {...props}\r\n>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</Select.Trigger>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputModelSelectTrigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\nimport * as Select from \"$lib/components/ui/select/index.js\";\r\n\r\ninterface Props {\r\n  class?: string;\r\n  children?: import(\"svelte\").Snippet;\r\n}\r\n\r\nlet { class: className, children, ...props }: Props = $props();\r\n</script>\r\n\r\n<Select.Content class={cn(className)} {...props}>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</Select.Content>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputModelSelectContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\nimport { cn } from \"$UTILS$.js\";\r\nimport * as Select from \"$lib/components/ui/select/index.js\";\r\n\r\ninterface Props {\r\n  class?: string;\r\n  value: string;\r\n  children?: import(\"svelte\").Snippet;\r\n}\r\n\r\nlet { class: className, value, children, ...props }: Props = $props();\r\n</script>\r\n\r\n<Select.Item class={cn(className)} {value} {...props}>\r\n  {#if children}\r\n    {@render children()}\r\n  {/if}\r\n</Select.Item>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputModelSelectItem.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$.js\";\r\n  // import * as Select from \"$lib/components/ui/select/index.js\";\r\n\r\n  interface Props {\r\n    class?: string;\r\n    placeholder?: string;\r\n    value?: string;\r\n  }\r\n\r\n  let { class: className, placeholder, value, ...props }: Props = $props();\r\n</script>\r\n\r\n<!-- There is no Select Value in Shadcn Svelte so it convert into a div with placeholder content inside it -->\r\n<div class={cn(className)} {...props}>\r\n  {#if placeholder && !value}\r\n    {placeholder}\r\n  {/if}\r\n  {#if value}\r\n    {value}\r\n  {/if}\r\n</div>\r\n<!-- <Select.Value class={cn(className)} {placeholder} {...props} /> -->\r\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputModelSelectValue.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\ntype Props = {\r\n  class?: string;\r\n  size?: number;\r\n};\r\n\r\nlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n  {...restProps}\r\n  class={className}\r\n  width={size}\r\n  height={size}\r\n  viewBox=\"0 0 24 24\"\r\n  fill=\"none\"\r\n  stroke=\"currentColor\"\r\n  stroke-width=\"2\"\r\n  stroke-linecap=\"round\"\r\n  stroke-linejoin=\"round\"\r\n>\r\n  <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\" />\r\n  <circle cx=\"9\" cy=\"9\" r=\"2\" />\r\n  <path d=\"m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21\" />\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/ImageIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\ntype Props = {\r\n  class?: string;\r\n  size?: number;\r\n};\r\n\r\nlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n  {...restProps}\r\n  class={className}\r\n  width={size}\r\n  height={size}\r\n  viewBox=\"0 0 24 24\"\r\n  fill=\"none\"\r\n  stroke=\"currentColor\"\r\n  stroke-width=\"2\"\r\n  stroke-linecap=\"round\"\r\n  stroke-linejoin=\"round\"\r\n>\r\n  <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/Loader2Icon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\ntype Props = {\r\n  class?: string;\r\n  size?: number;\r\n};\r\n\r\nlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n  {...restProps}\r\n  class={className}\r\n  width={size}\r\n  height={size}\r\n  viewBox=\"0 0 24 24\"\r\n  fill=\"none\"\r\n  stroke=\"currentColor\"\r\n  stroke-width=\"2\"\r\n  stroke-linecap=\"round\"\r\n  stroke-linejoin=\"round\"\r\n>\r\n  <path d=\"m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48\" />\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PaperclipIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\ntype Props = {\r\n  class?: string;\r\n  size?: number;\r\n};\r\n\r\nlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n  {...restProps}\r\n  class={className}\r\n  width={size}\r\n  height={size}\r\n  viewBox=\"0 0 24 24\"\r\n  fill=\"none\"\r\n  stroke=\"currentColor\"\r\n  stroke-width=\"2\"\r\n  stroke-linecap=\"round\"\r\n  stroke-linejoin=\"round\"\r\n>\r\n  <path d=\"M5 12h14\" />\r\n  <path d=\"M12 5v14\" />\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PlusIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\ntype Props = {\r\n  class?: string;\r\n  size?: number;\r\n};\r\n\r\nlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n  {...restProps}\r\n  class={className}\r\n  width={size}\r\n  height={size}\r\n  viewBox=\"0 0 24 24\"\r\n  fill=\"none\"\r\n  stroke=\"currentColor\"\r\n  stroke-width=\"2\"\r\n  stroke-linecap=\"round\"\r\n  stroke-linejoin=\"round\"\r\n>\r\n  <path d=\"m22 2-7 20-4-9-9-4Z\" />\r\n  <path d=\"M22 2 11 13\" />\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/SendIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\ntype Props = {\r\n  class?: string;\r\n  size?: number;\r\n};\r\n\r\nlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n  {...restProps}\r\n  class={className}\r\n  width={size}\r\n  height={size}\r\n  viewBox=\"0 0 24 24\"\r\n  fill=\"none\"\r\n  stroke=\"currentColor\"\r\n  stroke-width=\"2\"\r\n  stroke-linecap=\"round\"\r\n  stroke-linejoin=\"round\"\r\n>\r\n  <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\" />\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/SquareIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\ntype Props = {\r\n  class?: string;\r\n  size?: number;\r\n};\r\n\r\nlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n  {...restProps}\r\n  class={className}\r\n  width={size}\r\n  height={size}\r\n  viewBox=\"0 0 24 24\"\r\n  fill=\"none\"\r\n  stroke=\"currentColor\"\r\n  stroke-width=\"2\"\r\n  stroke-linecap=\"round\"\r\n  stroke-linejoin=\"round\"\r\n>\r\n  <path d=\"M18 6 6 18\" />\r\n  <path d=\"m6 6 12 12\" />\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/XIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\ntype Props = {\r\n  class?: string;\r\n  size?: number;\r\n};\r\n\r\nlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n  {...restProps}\r\n  class={className}\r\n  width={size}\r\n  height={size}\r\n  viewBox=\"0 0 24 24\"\r\n  fill=\"none\"\r\n  stroke=\"currentColor\"\r\n  stroke-width=\"2\"\r\n  stroke-linecap=\"round\"\r\n  stroke-linejoin=\"round\"\r\n>\r\n  <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n  <path d=\"m4.93 4.93 4.24 4.24\" />\r\n  <path d=\"m14.83 9.17 4.24-4.24\" />\r\n  <path d=\"m14.83 14.83 4.24 4.24\" />\r\n  <path d=\"m9.17 14.83-4.24 4.24\" />\r\n  <circle cx=\"12\" cy=\"12\" r=\"4\" />\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/GlobeIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\ntype Props = {\r\n  class?: string;\r\n  size?: number;\r\n};\r\n\r\nlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\r\n</script>\r\n\r\n<svg\r\n  {...restProps}\r\n  class={className}\r\n  width={size}\r\n  height={size}\r\n  viewBox=\"0 0 24 24\"\r\n  fill=\"none\"\r\n  stroke=\"currentColor\"\r\n  stroke-width=\"2\"\r\n  stroke-linecap=\"round\"\r\n  stroke-linejoin=\"round\"\r\n>\r\n  <path d=\"m12 1-3 2v3.5a1.5 1.5 0 0 0 1.5 1.5H12v-8Z\" />\r\n  <path d=\"M12 8v13\" />\r\n  <path d=\"M12 8h1.5a1.5 1.5 0 0 0 1.5-1.5V3l-3-2Z\" />\r\n</svg>",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/MicIcon.svelte"
		},
		{
			"content": "import { setContext, getContext } from 'svelte';\r\n\r\nexport interface FileUIPart {\r\n  type: 'file';\r\n  url?: string;\r\n  mediaType?: string;\r\n  filename?: string;\r\n}\r\n\r\nexport interface FileWithId extends FileUIPart {\r\n  id: string;\r\n}\r\n\r\nexport interface PromptInputMessage {\r\n  text?: string;\r\n  files?: FileUIPart[];\r\n}\r\n\r\nexport type ChatStatus = 'submitted' | 'streaming' | 'error' | 'idle';\r\n\r\nexport class AttachmentsContext {\r\n  files = $state<FileWithId[]>([]);\r\n  fileInputRef = $state<HTMLInputElement | null>(null);\r\n\r\n  constructor(\r\n    private accept?: string,\r\n    private multiple?: boolean,\r\n    private maxFiles?: number,\r\n    private maxFileSize?: number,\r\n    private onError?: (err: { code: 'max_files' | 'max_file_size' | 'accept'; message: string }) => void\r\n  ) {}\r\n\r\n  openFileDialog = () => {\r\n    this.fileInputRef?.click();\r\n  };\r\n\r\n  matchesAccept = (file: File): boolean => {\r\n    if (!this.accept || this.accept.trim() === '') {\r\n      return true;\r\n    }\r\n    if (this.accept.includes('image/*')) {\r\n      return file.type.startsWith('image/');\r\n    }\r\n    return true;\r\n  };\r\n\r\n  add = (files: File[] | FileList) => {\r\n    let incoming = Array.from(files);\r\n    let accepted = incoming.filter((f) => this.matchesAccept(f));\r\n\r\n    if (accepted.length === 0) {\r\n      this.onError?.({\r\n        code: 'accept',\r\n        message: 'No files match the accepted types.',\r\n      });\r\n      return;\r\n    }\r\n\r\n    let withinSize = (f: File) => this.maxFileSize ? f.size <= this.maxFileSize : true;\r\n    let sized = accepted.filter(withinSize);\r\n\r\n    if (sized.length === 0 && accepted.length > 0) {\r\n      this.onError?.({\r\n        code: 'max_file_size',\r\n        message: 'All files exceed the maximum size.',\r\n      });\r\n      return;\r\n    }\r\n\r\n    let capacity = typeof this.maxFiles === 'number'\r\n      ? Math.max(0, this.maxFiles - this.files.length)\r\n      : undefined;\r\n    let capped = typeof capacity === 'number' ? sized.slice(0, capacity) : sized;\r\n\r\n    if (typeof capacity === 'number' && sized.length > capacity) {\r\n      this.onError?.({\r\n        code: 'max_files',\r\n        message: 'Too many files. Some were not added.',\r\n      });\r\n    }\r\n\r\n    let next: FileWithId[] = [];\r\n    for (let file of capped) {\r\n      next.push({\r\n        id: crypto.randomUUID(),\r\n        type: 'file',\r\n        url: URL.createObjectURL(file),\r\n        mediaType: file.type,\r\n        filename: file.name,\r\n      });\r\n    }\r\n\r\n    this.files = [...this.files, ...next];\r\n  };\r\n\r\n  remove = (id: string) => {\r\n    let found = this.files.find((file) => file.id === id);\r\n    if (found?.url) {\r\n      URL.revokeObjectURL(found.url);\r\n    }\r\n    this.files = this.files.filter((file) => file.id !== id);\r\n  };\r\n\r\n  clear = () => {\r\n    for (let file of this.files) {\r\n      if (file.url) {\r\n        URL.revokeObjectURL(file.url);\r\n      }\r\n    }\r\n    this.files = [];\r\n  };\r\n}\r\n\r\nconst ATTACHMENTS_CONTEXT_KEY = Symbol('attachments');\r\n\r\nexport function setAttachmentsContext(context: AttachmentsContext) {\r\n  setContext(ATTACHMENTS_CONTEXT_KEY, context);\r\n}\r\n\r\nexport function getAttachmentsContext(): AttachmentsContext {\r\n  let context = getContext<AttachmentsContext>(ATTACHMENTS_CONTEXT_KEY);\r\n  if (!context) {\r\n    throw new Error('usePromptInputAttachments must be used within a PromptInput');\r\n  }\r\n  return context;\r\n}",
			"type": "registry:file",
			"target": "ai-elements/prompt-input/attachments-context.svelte.ts"
		},
		{
			"content": "// Main component\r\nexport { default as PromptInput } from \"./PromptInput.svelte\";\r\n\r\n// Form components\r\nexport { default as PromptInputBody } from \"./PromptInputBody.svelte\";\r\nexport { default as PromptInputTextarea } from \"./PromptInputTextarea.svelte\";\r\nexport { default as PromptInputToolbar } from \"./PromptInputToolbar.svelte\";\r\nexport { default as PromptInputTools } from \"./PromptInputTools.svelte\";\r\nexport { default as PromptInputButton } from \"./PromptInputButton.svelte\";\r\n\r\n// Attachment components\r\nexport { default as PromptInputAttachment } from \"./PromptInputAttachment.svelte\";\r\nexport { default as PromptInputAttachments } from \"./PromptInputAttachments.svelte\";\r\n\r\n// Action menu components\r\nexport { default as PromptInputActionMenu } from \"./PromptInputActionMenu.svelte\";\r\nexport { default as PromptInputActionMenuTrigger } from \"./PromptInputActionMenuTrigger.svelte\";\r\nexport { default as PromptInputActionMenuContent } from \"./PromptInputActionMenuContent.svelte\";\r\nexport { default as PromptInputActionMenuItem } from \"./PromptInputActionMenuItem.svelte\";\r\nexport { default as PromptInputActionAddAttachments } from \"./PromptInputActionAddAttachments.svelte\";\r\n\r\n// Submit component\r\nexport { default as PromptInputSubmit } from \"./PromptInputSubmit.svelte\";\r\n\r\n// Model select components\r\nexport { default as PromptInputModelSelect } from \"./PromptInputModelSelect.svelte\";\r\nexport { default as PromptInputModelSelectTrigger } from \"./PromptInputModelSelectTrigger.svelte\";\r\nexport { default as PromptInputModelSelectContent } from \"./PromptInputModelSelectContent.svelte\";\r\nexport { default as PromptInputModelSelectItem } from \"./PromptInputModelSelectItem.svelte\";\r\nexport { default as PromptInputModelSelectValue } from \"./PromptInputModelSelectValue.svelte\";\r\n\r\n// Icon components\r\nexport { default as ImageIcon } from \"./ImageIcon.svelte\";\r\nexport { default as Loader2Icon } from \"./Loader2Icon.svelte\";\r\nexport { default as PaperclipIcon } from \"./PaperclipIcon.svelte\";\r\nexport { default as PlusIcon } from \"./PlusIcon.svelte\";\r\nexport { default as SendIcon } from \"./SendIcon.svelte\";\r\nexport { default as SquareIcon } from \"./SquareIcon.svelte\";\r\nexport { default as XIcon } from \"./XIcon.svelte\";\r\nexport { default as GlobeIcon } from \"./GlobeIcon.svelte\";\r\nexport { default as MicIcon } from \"./MicIcon.svelte\";\r\n\r\n// Context and types\r\nexport {\r\n  AttachmentsContext,\r\n  getAttachmentsContext,\r\n  setAttachmentsContext,\r\n  type FileUIPart,\r\n  type FileWithId,\r\n  type PromptInputMessage,\r\n  type ChatStatus\r\n} from \"./attachments-context.svelte.js\";",
			"type": "registry:file",
			"target": "ai-elements/prompt-input/index.ts"
		}
	]
}