{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "prompt-input",
	"type": "registry:block",
	"description": "A comprehensive prompt input component for AI chat interfaces with file attachments, drag-and-drop support, model selection, and advanced state management. Features include PromptInputProvider for external state control, async error handling, automatic blob-to-data URL conversion, grouped attachment rendering, and paste image support. Perfect for building ChatGPT-like interfaces.",
	"dependencies": [
		"runed"
	],
	"registryDependencies": [
		"button",
		"textarea",
		"select",
		"dropdown-menu",
		"tooltip"
	],
	"meta": {
		"author": "SikandarJODD",
		"version": "2.0.0",
		"tags": [
			"prompt",
			"input",
			"chat",
			"attachments",
			"upload",
			"ai-interface",
			"provider",
			"state-management",
			"drag-drop",
			"async"
		],
		"category": "AI Input",
		"documentation": "https://ai-elements.vercel.app/components/prompt-input",
		"repository": "https://github.com/SikandarJODD/ai-elements",
		"complexity": "intermediate",
		"updated": "2025-10-15",
		"featured": true,
		"features": [
			"PromptInputProvider for external state management",
			"Async error handling with data preservation",
			"Automatic blob-to-data URL conversion",
			"Grouped attachment rendering (files/images)",
			"File tooltips with full details",
			"Paste image support",
			"Drag and drop file upload",
			"Global drop zone support",
			"Model selection dropdown",
			"File validation (size, type, count)",
			"Svelte 5 runes with watch() from runed"
		],
		"improvements": [
			"Added PromptInputProvider for global state control",
			"Enhanced async submit with proper error handling",
			"Blob URL conversion for API compatibility",
			"Separate rendering for files and images",
			"File attachment tooltips showing full filename and media type",
			"Prevent data loss on submission errors"
		]
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { watch } from \"runed\";\n\timport { onMount } from \"svelte\";\n\timport {\n\t\tAttachmentsContext,\n\t\tsetAttachmentsContext,\n\t\ttype PromptInputMessage,\n\t\ttype FileUIPart,\n\t} from \"./attachments-context.svelte.js\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\taccept?: string; // e.g., \"image/*\" or leave undefined for any\n\t\tmultiple?: boolean;\n\t\t// When true, accepts drops anywhere on document. Default false (opt-in).\n\t\tglobalDrop?: boolean;\n\t\t// Render a hidden input with given name and keep it in sync for native form posts. Default false.\n\t\tsyncHiddenInput?: boolean;\n\t\t// When true, automatically clears attachments after successful submission. Default true.\n\t\tclearOnSubmit?: boolean;\n\t\t// Minimal constraints\n\t\tmaxFiles?: number;\n\t\tmaxFileSize?: number; // bytes\n\t\tonError?: (err: {\n\t\t\tcode: \"max_files\" | \"max_file_size\" | \"accept\";\n\t\t\tmessage: string;\n\t\t}) => void;\n\t\tonSubmit: (message: PromptInputMessage, event: SubmitEvent) => void | Promise<void>;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet {\n\t\tclass: className,\n\t\taccept,\n\t\tmultiple,\n\t\tglobalDrop,\n\t\tsyncHiddenInput,\n\t\tclearOnSubmit = true,\n\t\tmaxFiles,\n\t\tmaxFileSize,\n\t\tonError,\n\t\tonSubmit,\n\t\tchildren,\n\t\t...props\n\t}: Props = $props();\n\n\tlet anchorRef = $state<HTMLSpanElement | null>(null);\n\tlet formRef = $state<HTMLFormElement | null>(null);\n\tlet attachmentsContext = new AttachmentsContext(\n\t\taccept,\n\t\tmultiple,\n\t\tmaxFiles,\n\t\tmaxFileSize,\n\t\tonError\n\t);\n\n\t// Find nearest form to scope drag & drop\n\tonMount(() => {\n\t\tlet root = anchorRef?.closest(\"form\");\n\t\tif (root instanceof HTMLFormElement) {\n\t\t\tformRef = root;\n\t\t}\n\t});\n\n\t// Attach drop handlers on nearest form\n\twatch(\n\t\t() => formRef,\n\t\t(formRef) => {\n\t\t\tif (!formRef) return;\n\n\t\t\tlet onDragOver = (e: DragEvent) => {\n\t\t\t\tif (e.dataTransfer?.types?.includes(\"Files\")) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlet onDrop = (e: DragEvent) => {\n\t\t\t\tif (e.dataTransfer?.types?.includes(\"Files\")) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t\tif (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {\n\t\t\t\t\tattachmentsContext.add(e.dataTransfer.files);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tformRef.addEventListener(\"dragover\", onDragOver);\n\t\t\tformRef.addEventListener(\"drop\", onDrop);\n\n\t\t\treturn () => {\n\t\t\t\tformRef?.removeEventListener(\"dragover\", onDragOver);\n\t\t\t\tformRef?.removeEventListener(\"drop\", onDrop);\n\t\t\t};\n\t\t}\n\t);\n\n\t// Global drop handlers\n\twatch(\n\t\t() => globalDrop,\n\t\t(globalDrop) => {\n\t\t\tif (!globalDrop) return;\n\n\t\t\tlet onDragOver = (e: DragEvent) => {\n\t\t\t\tif (e.dataTransfer?.types?.includes(\"Files\")) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlet onDrop = (e: DragEvent) => {\n\t\t\t\tif (e.dataTransfer?.types?.includes(\"Files\")) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t\tif (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {\n\t\t\t\t\tattachmentsContext.add(e.dataTransfer.files);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdocument.addEventListener(\"dragover\", onDragOver);\n\t\t\tdocument.addEventListener(\"drop\", onDrop);\n\n\t\t\treturn () => {\n\t\t\t\tdocument.removeEventListener(\"dragover\", onDragOver);\n\t\t\t\tdocument.removeEventListener(\"drop\", onDrop);\n\t\t\t};\n\t\t}\n\t);\n\n\t// Note: File input cannot be programmatically set for security reasons\n\t// The syncHiddenInput prop is no longer functional\n\twatch(\n\t\t() => attachmentsContext.files,\n\t\t() => {\n\t\t\tif (syncHiddenInput && attachmentsContext.fileInputRef) {\n\t\t\t\t// Clear the input when items are cleared\n\t\t\t\tif (attachmentsContext.files.length === 0) {\n\t\t\t\t\tattachmentsContext.fileInputRef.value = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n\n\tlet handleChange = (event: Event) => {\n\t\tlet target = event.currentTarget as HTMLInputElement;\n\t\tif (target.files) {\n\t\t\tattachmentsContext.add(target.files);\n\t\t}\n\t};\n\n\t// Convert blob URLs to data URLs for proper serialization\n\tasync function convertBlobUrlToDataUrl(url: string): Promise<string> {\n\t\tconst response = await fetch(url);\n\t\tconst blob = await response.blob();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.onloadend = () => resolve(reader.result as string);\n\t\t\treader.onerror = reject;\n\t\t\treader.readAsDataURL(blob);\n\t\t});\n\t}\n\n\tlet handleSubmit = async (event: SubmitEvent) => {\n\t\tevent.preventDefault();\n\n\t\tlet form = event.currentTarget as HTMLFormElement;\n\t\tlet formData = new FormData(form);\n\t\tlet text = (formData.get(\"message\") as string) || \"\";\n\n\t\t// Convert blob URLs to data URLs asynchronously\n\t\tlet filesPromises = attachmentsContext.files.map(async ({ id, ...item }) => {\n\t\t\tif (item.url && item.url.startsWith(\"blob:\")) {\n\t\t\t\treturn {\n\t\t\t\t\t...item,\n\t\t\t\t\turl: await convertBlobUrlToDataUrl(item.url),\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn item;\n\t\t});\n\n\t\ttry {\n\t\t\tlet files = await Promise.all(filesPromises);\n\t\t\tlet result = onSubmit({ text, files }, event);\n\n\t\t\t// Handle both sync and async onSubmit\n\t\t\tif (result && typeof result === \"object\" && \"then\" in result) {\n\t\t\t\tawait result;\n\t\t\t}\n\n\t\t\t// Only clear if submission was successful\n\t\t\tif (clearOnSubmit) {\n\t\t\t\tattachmentsContext.clear();\n\t\t\t\tform.reset();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Don't clear on error - user may want to retry\n\t\t\tconsole.error(\"Submit failed:\", error);\n\t\t}\n\t};\n\n\tsetAttachmentsContext(attachmentsContext);\n</script>\n\n<span aria-hidden=\"true\" class=\"hidden\" bind:this={anchorRef}></span>\n<input\n\t{accept}\n\tclass=\"hidden\"\n\t{multiple}\n\tonchange={handleChange}\n\tbind:this={attachmentsContext.fileInputRef}\n\ttype=\"file\"\n/>\n<form\n\tclass={cn(\n\t\t\"bg-background w-full divide-y overflow-hidden rounded-xl border shadow-sm\",\n\t\tclassName\n\t)}\n\tonsubmit={handleSubmit}\n\t{...props}\n>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</form>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInput.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { PromptInputController, setPromptInputProvider } from \"./attachments-context.svelte.js\";\n\n\tinterface Props {\n\t\tinitialInput?: string;\n\t\taccept?: string;\n\t\tmultiple?: boolean;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { initialInput = \"\", accept, multiple = true, children }: Props = $props();\n\n\tlet controller = new PromptInputController(initialInput, accept, multiple);\n\n\tsetPromptInputProvider(controller);\n</script>\n\n{#if children}\n\t{@render children()}\n{/if}\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputProvider.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { class: className, children, ...props }: Props = $props();\n</script>\n\n<div class={cn(className, \"flex flex-col\")} {...props}>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputBody.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { Textarea } from \"$COMPONENTS$/ui/textarea/index.js\";\n\timport { getAttachmentsContext } from \"./attachments-context.svelte.js\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tplaceholder?: string;\n\t\tvalue?: string;\n\t\tonchange?: (event: Event) => void;\n\t}\n\n\tlet {\n\t\tclass: className,\n\t\tplaceholder = \"What would you like to know?\",\n\t\tvalue = $bindable(\"\"),\n\t\tonchange,\n\t\t...props\n\t}: Props = $props();\n\n\tlet attachments = getAttachmentsContext();\n\n\tlet handleKeyDown = (e: KeyboardEvent) => {\n\t\tif (e.key === \"Enter\") {\n\t\t\t// Don't submit if IME composition is in progress\n\t\t\tif (e.isComposing) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (e.shiftKey) {\n\t\t\t\t// Allow newline\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Submit on Enter (without Shift)\n\t\t\te.preventDefault();\n\t\t\tlet form = (e.currentTarget as HTMLTextAreaElement).form;\n\t\t\tif (form) {\n\t\t\t\tform.requestSubmit();\n\t\t\t}\n\t\t}\n\t};\n\n\tlet handlePaste = (e: ClipboardEvent) => {\n\t\tlet items = e.clipboardData?.items;\n\n\t\tif (!items) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet files: File[] = [];\n\n\t\tfor (let item of items) {\n\t\t\tif (item.kind === \"file\") {\n\t\t\t\tlet file = item.getAsFile();\n\t\t\t\tif (file) {\n\t\t\t\t\tfiles.push(file);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (files.length > 0) {\n\t\t\te.preventDefault();\n\t\t\tattachments.add(files);\n\t\t}\n\t};\n</script>\n\n<Textarea\n\tclass={cn(\n\t\t\"w-full resize-none rounded-none border-none p-3 shadow-none ring-0 outline-none\",\n\t\t\"field-sizing-content bg-transparent dark:bg-transparent\",\n\t\t\"max-h-48 min-h-16\",\n\t\t\"focus-visible:ring-0\",\n\t\tclassName\n\t)}\n\tonpaste={handlePaste}\n\tname=\"message\"\n\t{onchange}\n\tonkeydown={handleKeyDown}\n\t{placeholder}\n\tbind:value\n\t{...props}\n/>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputTextarea.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { class: className, children, ...props }: Props = $props();\n</script>\n\n<div class={cn(\"flex items-center justify-between p-1\", className)} {...props}>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputToolbar.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { class: className, children, ...props }: Props = $props();\n</script>\n\n<div\n\tclass={cn(\"flex items-center gap-1\", \"[&_button:first-child]:rounded-bl-xl\", className)}\n\t{...props}\n>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputTools.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { Button } from \"$COMPONENTS$/ui/button\";\n\timport type { ButtonProps } from \"$COMPONENTS$/ui/button/index.js\";\n\n\tinterface Props extends ButtonProps {\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { variant = \"ghost\", class: className, size, children, ...props }: Props = $props();\n\n\tlet hasMultipleChildren = $derived.by(() => {\n\t\t// In Svelte, we can't easily count children like in React, so we'll default to checking if size is provided\n\t\treturn size !== undefined;\n\t});\n\n\tlet newSize = $derived.by((): \"default\" | \"sm\" | \"lg\" | \"icon\" => {\n\t\treturn (size ?? hasMultipleChildren) ? \"default\" : \"icon\";\n\t});\n</script>\n\n<Button\n\tclass={cn(\n\t\t\"shrink-0 gap-1.5 rounded-lg\",\n\t\tvariant === \"ghost\" && \"text-muted-foreground\",\n\t\tnewSize === \"default\" && \"px-3\",\n\t\tclassName\n\t)}\n\tsize={newSize}\n\ttype=\"button\"\n\t{variant}\n\t{...props}\n>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</Button>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputButton.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { Button } from \"$COMPONENTS$/ui/button\";\n\timport * as Tooltip from \"$COMPONENTS$/ui/tooltip/index.js\";\n\timport { getAttachmentsContext, type FileWithId } from \"./attachments-context.svelte.js\";\n\timport PaperclipIcon from \"./PaperclipIcon.svelte\";\n\timport XIcon from \"./XIcon.svelte\";\n\n\tinterface Props {\n\t\tdata: FileWithId;\n\t\tclass?: string;\n\t}\n\n\tlet { data, class: className, ...props }: Props = $props();\n\n\tlet attachments = getAttachmentsContext();\n\n\tlet mediaType = $derived(data.mediaType?.startsWith(\"image/\") && data.url ? \"image\" : \"file\");\n</script>\n\n<div\n\tclass={cn(\n\t\t\"group relative rounded-md border\",\n\t\tmediaType === \"image\" ? \"h-14 w-14\" : \"h-8 w-auto max-w-full\",\n\t\tclassName\n\t)}\n\t{...props}\n>\n\t{#if mediaType === \"image\"}\n\t\t<img\n\t\t\talt={data.filename || \"attachment\"}\n\t\t\tclass=\"size-full rounded-md object-cover\"\n\t\t\theight={56}\n\t\t\tsrc={data.url}\n\t\t\twidth={56}\n\t\t/>\n\t{:else}\n\t\t<div\n\t\t\tclass=\"text-muted-foreground flex size-full max-w-full cursor-pointer items-center justify-start gap-2 overflow-hidden px-2\"\n\t\t>\n\t\t\t<PaperclipIcon class=\"size-4 shrink-0\" />\n\t\t\t<Tooltip.Root delayDuration={400}>\n\t\t\t\t<Tooltip.Trigger class=\"min-w-0 flex-1\">\n\t\t\t\t\t<h4 class=\"w-full truncate text-left text-sm font-medium\">\n\t\t\t\t\t\t{data.filename || \"Unknown file\"}\n\t\t\t\t\t</h4>\n\t\t\t\t</Tooltip.Trigger>\n\t\t\t\t<Tooltip.Content>\n\t\t\t\t\t<div class=\"text-muted-foreground text-xs\">\n\t\t\t\t\t\t<h4\n\t\t\t\t\t\t\tclass=\"max-w-[240px] overflow-hidden text-left text-sm font-semibold break-words whitespace-normal\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{data.filename || \"Unknown file\"}\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t{#if data.mediaType}\n\t\t\t\t\t\t\t<div>{data.mediaType}</div>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t</Tooltip.Content>\n\t\t\t</Tooltip.Root>\n\t\t</div>\n\t{/if}\n\t<Button\n\t\taria-label=\"Remove attachment\"\n\t\tclass=\"absolute -top-1.5 -right-1.5 h-6 w-6 rounded-full opacity-0 group-hover:opacity-100\"\n\t\tonclick={() => attachments.remove(data.id)}\n\t\tsize=\"icon\"\n\t\ttype=\"button\"\n\t\tvariant=\"outline\"\n\t>\n\t\t<XIcon class=\"h-3 w-3\" />\n\t</Button>\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputAttachment.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { watch } from \"runed\";\n\timport { getAttachmentsContext, type FileWithId } from \"./attachments-context.svelte.js\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet<[FileWithId]>;\n\t}\n\n\tlet { class: className, children, ...props }: Props = $props();\n\n\tlet attachments = getAttachmentsContext();\n\tlet height = $state(0);\n\tlet contentRef = $state<HTMLDivElement | null>(null);\n\n\t// Separate files and images for grouped rendering\n\tlet nonImageFiles = $derived(\n\t\tattachments.files.filter((f) => !(f.mediaType?.startsWith(\"image/\") && f.url))\n\t);\n\n\tlet imageFiles = $derived(\n\t\tattachments.files.filter((f) => f.mediaType?.startsWith(\"image/\") && f.url)\n\t);\n\n\t// Watch for resize changes using ResizeObserver\n\twatch(\n\t\t() => contentRef,\n\t\t(contentRef) => {\n\t\t\tif (!contentRef) return;\n\n\t\t\tlet ro = new ResizeObserver(() => {\n\t\t\t\tif (contentRef) {\n\t\t\t\t\theight = contentRef.getBoundingClientRect().height;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tro.observe(contentRef);\n\t\t\theight = contentRef.getBoundingClientRect().height;\n\n\t\t\treturn () => ro.disconnect();\n\t\t}\n\t);\n\n\tlet computedHeight = $derived.by(() => {\n\t\treturn attachments.files.length ? height : 0;\n\t});\n</script>\n\n<div\n\taria-live=\"polite\"\n\tclass={cn(\"overflow-hidden transition-[height] duration-200 ease-out\", className)}\n\tstyle:height=\"{computedHeight}px\"\n\t{...props}\n>\n\t<div class=\"space-y-2 px-3 py-1\" bind:this={contentRef}>\n\t\t<!-- Non-image files first -->\n\t\t{#if nonImageFiles.length > 0}\n\t\t\t<div class=\"flex flex-wrap gap-2\">\n\t\t\t\t{#each nonImageFiles as file (file.id)}\n\t\t\t\t\t{#if children}\n\t\t\t\t\t\t{@render children(file)}\n\t\t\t\t\t{/if}\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Images second -->\n\t\t{#if imageFiles.length > 0}\n\t\t\t<div class=\"flex flex-wrap gap-2\">\n\t\t\t\t{#each imageFiles as file (file.id)}\n\t\t\t\t\t{#if children}\n\t\t\t\t\t\t{@render children(file)}\n\t\t\t\t\t{/if}\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputAttachments.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport * as DropdownMenu from \"$COMPONENTS$/ui/dropdown-menu/index.js\";\n\n\tinterface Props {\n\t\topen?: boolean;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { open = $bindable(false), children, ...props }: Props = $props();\n</script>\n\n<DropdownMenu.Root bind:open {...props}>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</DropdownMenu.Root>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputActionMenu.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport * as DropdownMenu from \"$COMPONENTS$/ui/dropdown-menu/index.js\";\n\timport PromptInputButton from \"./PromptInputButton.svelte\";\n\timport PlusIcon from \"./PlusIcon.svelte\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { class: className, children, ...props }: Props = $props();\n</script>\n\n<DropdownMenu.Trigger>\n\t<PromptInputButton class={className} {...props}>\n\t\t{#if children}\n\t\t\t{@render children()}\n\t\t{:else}\n\t\t\t<PlusIcon class=\"size-4\" />\n\t\t{/if}\n\t</PromptInputButton>\n</DropdownMenu.Trigger>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputActionMenuTrigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport * as DropdownMenu from \"$COMPONENTS$/ui/dropdown-menu/index.js\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { class: className, children, ...props }: Props = $props();\n</script>\n\n<DropdownMenu.Content align=\"start\" class={cn(className)} {...props}>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</DropdownMenu.Content>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputActionMenuContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport * as DropdownMenu from \"$COMPONENTS$/ui/dropdown-menu/index.js\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t\tonSelect?: (event: Event) => void;\n\t}\n\n\tlet { class: className, children, onSelect, ...props }: Props = $props();\n</script>\n\n<DropdownMenu.Item class={cn(className)} {onSelect} {...props}>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</DropdownMenu.Item>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputActionMenuItem.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { getAttachmentsContext } from \"./attachments-context.svelte.js\";\n\timport PromptInputActionMenuItem from \"./PromptInputActionMenuItem.svelte\";\n\timport ImageIcon from \"./ImageIcon.svelte\";\n\n\tinterface Props {\n\t\tlabel?: string;\n\t\tclass?: string;\n\t}\n\n\tlet { label = \"Add photos or files\", class: className, ...props }: Props = $props();\n\n\tlet attachments = getAttachmentsContext();\n\n\tlet handleSelect = (e: Event) => {\n\t\te.preventDefault();\n\t\tattachments.openFileDialog();\n\t};\n</script>\n\n<PromptInputActionMenuItem class={className} onSelect={handleSelect} {...props}>\n\t<ImageIcon class=\"mr-2 size-4\" />\n\t{label}\n</PromptInputActionMenuItem>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputActionAddAttachments.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { Button } from \"$COMPONENTS$/ui/button\";\n\timport type { ButtonProps } from \"$COMPONENTS$/ui/button/index.js\";\n\timport type { ChatStatus } from \"./attachments-context.svelte.js\";\n\timport SendIcon from \"./SendIcon.svelte\";\n\timport Loader2Icon from \"./Loader2Icon.svelte\";\n\timport SquareIcon from \"./SquareIcon.svelte\";\n\timport XIcon from \"./XIcon.svelte\";\n\n\tinterface Props extends ButtonProps {\n\t\tclass?: string;\n\t\tstatus?: ChatStatus;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet {\n\t\tclass: className,\n\t\tvariant = \"default\",\n\t\tsize = \"icon\",\n\t\tstatus,\n\t\tchildren,\n\t\t...props\n\t}: Props = $props();\n\n\tlet Icon = $derived.by(() => {\n\t\tif (status === \"submitted\") {\n\t\t\treturn Loader2Icon;\n\t\t} else if (status === \"streaming\") {\n\t\t\treturn SquareIcon;\n\t\t} else if (status === \"error\") {\n\t\t\treturn XIcon;\n\t\t}\n\t\treturn SendIcon;\n\t});\n\n\tlet iconClass = $derived.by(() => {\n\t\tif (status === \"submitted\") {\n\t\t\treturn \"size-4 animate-spin\";\n\t\t}\n\t\treturn \"size-4\";\n\t});\n</script>\n\n<Button class={cn(\"gap-1.5 rounded-lg\", className)} {size} type=\"submit\" {variant} {...props}>\n\t{#if children}\n\t\t{@render children()}\n\t{:else}\n\t\t<!-- <svelte:component this={Icon} class={iconClass} /> -->\n\t\t<Icon class={iconClass} />\n\t{/if}\n</Button>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputSubmit.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport * as Select from \"$COMPONENTS$/ui/select/index.js\";\n\n\tinterface Props {\n\t\tvalue?: string;\n\t\tonValueChange?: (value: string | undefined) => void;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { value = $bindable(\"\"), onValueChange, children, ...props }: Props = $props();\n</script>\n\n<Select.Root bind:value {onValueChange} type=\"single\" {...props}>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</Select.Root>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputModelSelect.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport * as Select from \"$COMPONENTS$/ui/select/index.js\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { class: className, children, ...props }: Props = $props();\n</script>\n\n<Select.Trigger\n\tclass={cn(\n\t\t\"text-muted-foreground border-none bg-transparent font-medium shadow-none transition-colors\",\n\t\t'hover:bg-accent hover:text-foreground [&[aria-expanded=\"true\"]]:bg-accent [&[aria-expanded=\"true\"]]:text-foreground',\n\t\tclassName\n\t)}\n\t{...props}\n>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</Select.Trigger>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputModelSelectTrigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport * as Select from \"$COMPONENTS$/ui/select/index.js\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { class: className, children, ...props }: Props = $props();\n</script>\n\n<Select.Content class={cn(className)} {...props}>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</Select.Content>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputModelSelectContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport * as Select from \"$COMPONENTS$/ui/select/index.js\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tvalue: string;\n\t\tchildren?: import(\"svelte\").Snippet;\n\t}\n\n\tlet { class: className, value, children, ...props }: Props = $props();\n</script>\n\n<Select.Item class={cn(className)} {value} {...props}>\n\t{#if children}\n\t\t{@render children()}\n\t{/if}\n</Select.Item>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputModelSelectItem.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\t// import * as Select from \"$COMPONENTS$/ui/select/index.js\";\n\n\tinterface Props {\n\t\tclass?: string;\n\t\tplaceholder?: string;\n\t\tvalue?: string;\n\t}\n\n\tlet { class: className, placeholder, value, ...props }: Props = $props();\n</script>\n\n<!-- There is no Select Value in Shadcn Svelte so it convert into a div with placeholder content inside it -->\n<div class={cn(className)} {...props}>\n\t{#if placeholder && !value}\n\t\t{placeholder}\n\t{/if}\n\t{#if value}\n\t\t{value}\n\t{/if}\n</div>\n<!-- <Select.Value class={cn(className)} {placeholder} {...props} /> -->\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PromptInputModelSelectValue.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\ttype Props = {\n\t\tclass?: string;\n\t\tsize?: number;\n\t};\n\n\tlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\n</script>\n\n<svg\n\t{...restProps}\n\tclass={className}\n\twidth={size}\n\theight={size}\n\tviewBox=\"0 0 24 24\"\n\tfill=\"none\"\n\tstroke=\"currentColor\"\n\tstroke-width=\"2\"\n\tstroke-linecap=\"round\"\n\tstroke-linejoin=\"round\"\n>\n\t<rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\" />\n\t<circle cx=\"9\" cy=\"9\" r=\"2\" />\n\t<path d=\"m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21\" />\n</svg>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/ImageIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\ttype Props = {\n\t\tclass?: string;\n\t\tsize?: number;\n\t};\n\n\tlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\n</script>\n\n<svg\n\t{...restProps}\n\tclass={className}\n\twidth={size}\n\theight={size}\n\tviewBox=\"0 0 24 24\"\n\tfill=\"none\"\n\tstroke=\"currentColor\"\n\tstroke-width=\"2\"\n\tstroke-linecap=\"round\"\n\tstroke-linejoin=\"round\"\n>\n\t<path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\n</svg>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/Loader2Icon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\ttype Props = {\n\t\tclass?: string;\n\t\tsize?: number;\n\t};\n\n\tlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\n</script>\n\n<svg\n\t{...restProps}\n\tclass={className}\n\twidth={size}\n\theight={size}\n\tviewBox=\"0 0 24 24\"\n\tfill=\"none\"\n\tstroke=\"currentColor\"\n\tstroke-width=\"2\"\n\tstroke-linecap=\"round\"\n\tstroke-linejoin=\"round\"\n>\n\t<path\n\t\td=\"m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48\"\n\t/>\n</svg>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PaperclipIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\ttype Props = {\n\t\tclass?: string;\n\t\tsize?: number;\n\t};\n\n\tlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\n</script>\n\n<svg\n\t{...restProps}\n\tclass={className}\n\twidth={size}\n\theight={size}\n\tviewBox=\"0 0 24 24\"\n\tfill=\"none\"\n\tstroke=\"currentColor\"\n\tstroke-width=\"2\"\n\tstroke-linecap=\"round\"\n\tstroke-linejoin=\"round\"\n>\n\t<path d=\"M5 12h14\" />\n\t<path d=\"M12 5v14\" />\n</svg>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/PlusIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\ttype Props = {\n\t\tclass?: string;\n\t\tsize?: number;\n\t};\n\n\tlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\n</script>\n\n<svg\n\t{...restProps}\n\tclass={className}\n\twidth={size}\n\theight={size}\n\tviewBox=\"0 0 24 24\"\n\tfill=\"none\"\n\tstroke=\"currentColor\"\n\tstroke-width=\"2\"\n\tstroke-linecap=\"round\"\n\tstroke-linejoin=\"round\"\n>\n\t<path d=\"m22 2-7 20-4-9-9-4Z\" />\n\t<path d=\"M22 2 11 13\" />\n</svg>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/SendIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\ttype Props = {\n\t\tclass?: string;\n\t\tsize?: number;\n\t};\n\n\tlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\n</script>\n\n<svg\n\t{...restProps}\n\tclass={className}\n\twidth={size}\n\theight={size}\n\tviewBox=\"0 0 24 24\"\n\tfill=\"none\"\n\tstroke=\"currentColor\"\n\tstroke-width=\"2\"\n\tstroke-linecap=\"round\"\n\tstroke-linejoin=\"round\"\n>\n\t<rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\" />\n</svg>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/SquareIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\ttype Props = {\n\t\tclass?: string;\n\t\tsize?: number;\n\t};\n\n\tlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\n</script>\n\n<svg\n\t{...restProps}\n\tclass={className}\n\twidth={size}\n\theight={size}\n\tviewBox=\"0 0 24 24\"\n\tfill=\"none\"\n\tstroke=\"currentColor\"\n\tstroke-width=\"2\"\n\tstroke-linecap=\"round\"\n\tstroke-linejoin=\"round\"\n>\n\t<path d=\"M18 6 6 18\" />\n\t<path d=\"m6 6 12 12\" />\n</svg>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/XIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\ttype Props = {\n\t\tclass?: string;\n\t\tsize?: number;\n\t};\n\n\tlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\n</script>\n\n<svg\n\t{...restProps}\n\tclass={className}\n\twidth={size}\n\theight={size}\n\tviewBox=\"0 0 24 24\"\n\tfill=\"none\"\n\tstroke=\"currentColor\"\n\tstroke-width=\"2\"\n\tstroke-linecap=\"round\"\n\tstroke-linejoin=\"round\"\n>\n\t<circle cx=\"12\" cy=\"12\" r=\"10\" />\n\t<path d=\"m4.93 4.93 4.24 4.24\" />\n\t<path d=\"m14.83 9.17 4.24-4.24\" />\n\t<path d=\"m14.83 14.83 4.24 4.24\" />\n\t<path d=\"m9.17 14.83-4.24 4.24\" />\n\t<circle cx=\"12\" cy=\"12\" r=\"4\" />\n</svg>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/GlobeIcon.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\ttype Props = {\n\t\tclass?: string;\n\t\tsize?: number;\n\t};\n\n\tlet { class: className = \"\", size = 16, ...restProps }: Props = $props();\n</script>\n\n<svg\n\t{...restProps}\n\tclass={className}\n\twidth={size}\n\theight={size}\n\tviewBox=\"0 0 24 24\"\n\tfill=\"none\"\n\tstroke=\"currentColor\"\n\tstroke-width=\"2\"\n\tstroke-linecap=\"round\"\n\tstroke-linejoin=\"round\"\n>\n\t<path d=\"m12 1-3 2v3.5a1.5 1.5 0 0 0 1.5 1.5H12v-8Z\" />\n\t<path d=\"M12 8v13\" />\n\t<path d=\"M12 8h1.5a1.5 1.5 0 0 0 1.5-1.5V3l-3-2Z\" />\n</svg>\n",
			"type": "registry:component",
			"target": "ai-elements/prompt-input/MicIcon.svelte"
		},
		{
			"content": "import { setContext, getContext } from \"svelte\";\n\nexport interface FileUIPart {\n\ttype: \"file\";\n\turl?: string;\n\tmediaType?: string;\n\tfilename?: string;\n}\n\nexport interface FileWithId extends FileUIPart {\n\tid: string;\n}\n\nexport interface PromptInputMessage {\n\ttext?: string;\n\tfiles?: FileUIPart[];\n}\n\nexport type ChatStatus = \"submitted\" | \"streaming\" | \"error\" | \"idle\";\n\nexport class AttachmentsContext {\n\tfiles = $state<FileWithId[]>([]);\n\tfileInputRef = $state<HTMLInputElement | null>(null);\n\n\tconstructor(\n\t\tprivate accept?: string,\n\t\tprivate multiple?: boolean,\n\t\tprivate maxFiles?: number,\n\t\tprivate maxFileSize?: number,\n\t\tprivate onError?: (err: {\n\t\t\tcode: \"max_files\" | \"max_file_size\" | \"accept\";\n\t\t\tmessage: string;\n\t\t}) => void\n\t) {}\n\n\topenFileDialog = () => {\n\t\tthis.fileInputRef?.click();\n\t};\n\n\tmatchesAccept = (file: File): boolean => {\n\t\tif (!this.accept || this.accept.trim() === \"\") {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.accept.includes(\"image/*\")) {\n\t\t\treturn file.type.startsWith(\"image/\");\n\t\t}\n\t\treturn true;\n\t};\n\n\tadd = (files: File[] | FileList) => {\n\t\tlet incoming = Array.from(files);\n\t\tlet accepted = incoming.filter((f) => this.matchesAccept(f));\n\n\t\tif (accepted.length === 0) {\n\t\t\tthis.onError?.({\n\t\t\t\tcode: \"accept\",\n\t\t\t\tmessage: \"No files match the accepted types.\",\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tlet withinSize = (f: File) => (this.maxFileSize ? f.size <= this.maxFileSize : true);\n\t\tlet sized = accepted.filter(withinSize);\n\n\t\tif (sized.length === 0 && accepted.length > 0) {\n\t\t\tthis.onError?.({\n\t\t\t\tcode: \"max_file_size\",\n\t\t\t\tmessage: \"All files exceed the maximum size.\",\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tlet capacity =\n\t\t\ttypeof this.maxFiles === \"number\"\n\t\t\t\t? Math.max(0, this.maxFiles - this.files.length)\n\t\t\t\t: undefined;\n\t\tlet capped = typeof capacity === \"number\" ? sized.slice(0, capacity) : sized;\n\n\t\tif (typeof capacity === \"number\" && sized.length > capacity) {\n\t\t\tthis.onError?.({\n\t\t\t\tcode: \"max_files\",\n\t\t\t\tmessage: \"Too many files. Some were not added.\",\n\t\t\t});\n\t\t}\n\n\t\tlet next: FileWithId[] = [];\n\t\tfor (let file of capped) {\n\t\t\tnext.push({\n\t\t\t\tid: crypto.randomUUID(),\n\t\t\t\ttype: \"file\",\n\t\t\t\turl: URL.createObjectURL(file),\n\t\t\t\tmediaType: file.type,\n\t\t\t\tfilename: file.name,\n\t\t\t});\n\t\t}\n\n\t\tthis.files = [...this.files, ...next];\n\t};\n\n\tremove = (id: string) => {\n\t\tlet found = this.files.find((file) => file.id === id);\n\t\tif (found?.url) {\n\t\t\tURL.revokeObjectURL(found.url);\n\t\t}\n\t\tthis.files = this.files.filter((file) => file.id !== id);\n\t};\n\n\tclear = () => {\n\t\tfor (let file of this.files) {\n\t\t\tif (file.url) {\n\t\t\t\tURL.revokeObjectURL(file.url);\n\t\t\t}\n\t\t}\n\t\tthis.files = [];\n\t};\n}\n\n// ============================================================================\n// Provider Context for Global State Management\n// ============================================================================\n\nexport class TextInputController {\n\tvalue = $state(\"\");\n\n\tsetInput = (newValue: string) => {\n\t\tthis.value = newValue;\n\t};\n\n\tclear = () => {\n\t\tthis.value = \"\";\n\t};\n}\n\nexport class PromptInputController {\n\ttextInput: TextInputController;\n\tattachments: AttachmentsContext;\n\n\tconstructor(initialInput = \"\", accept?: string, multiple?: boolean) {\n\t\tthis.textInput = new TextInputController();\n\t\tthis.textInput.value = initialInput;\n\t\tthis.attachments = new AttachmentsContext(accept, multiple);\n\t}\n}\n\nconst ATTACHMENTS_CONTEXT_KEY = Symbol(\"attachments\");\nconst PROVIDER_CONTEXT_KEY = Symbol(\"prompt-input-provider\");\n\nexport function setAttachmentsContext(context: AttachmentsContext) {\n\tsetContext(ATTACHMENTS_CONTEXT_KEY, context);\n}\n\nexport function getAttachmentsContext(): AttachmentsContext {\n\tlet context = getContext<AttachmentsContext>(ATTACHMENTS_CONTEXT_KEY);\n\tif (!context) {\n\t\tthrow new Error(\"usePromptInputAttachments must be used within a PromptInput\");\n\t}\n\treturn context;\n}\n\n// Provider context (optional, for external state management)\nexport function setPromptInputProvider(controller: PromptInputController) {\n\tsetContext(PROVIDER_CONTEXT_KEY, controller);\n}\n\nexport function getPromptInputProvider(): PromptInputController | null {\n\treturn getContext<PromptInputController>(PROVIDER_CONTEXT_KEY) || null;\n}\n\nexport function getPromptInputController(): PromptInputController {\n\tlet context = getContext<PromptInputController>(PROVIDER_CONTEXT_KEY);\n\tif (!context) {\n\t\tthrow new Error(\"getPromptInputController must be used within a PromptInputProvider\");\n\t}\n\treturn context;\n}\n",
			"type": "registry:file",
			"target": "ai-elements/prompt-input/attachments-context.svelte.ts"
		},
		{
			"content": "// Main component\nexport { default as PromptInput } from \"./PromptInput.svelte\";\nexport { default as PromptInputProvider } from \"./PromptInputProvider.svelte\";\n\n// Form components\nexport { default as PromptInputBody } from \"./PromptInputBody.svelte\";\nexport { default as PromptInputTextarea } from \"./PromptInputTextarea.svelte\";\nexport { default as PromptInputToolbar } from \"./PromptInputToolbar.svelte\";\nexport { default as PromptInputTools } from \"./PromptInputTools.svelte\";\nexport { default as PromptInputButton } from \"./PromptInputButton.svelte\";\n\n// Attachment components\nexport { default as PromptInputAttachment } from \"./PromptInputAttachment.svelte\";\nexport { default as PromptInputAttachments } from \"./PromptInputAttachments.svelte\";\n\n// Action menu components\nexport { default as PromptInputActionMenu } from \"./PromptInputActionMenu.svelte\";\nexport { default as PromptInputActionMenuTrigger } from \"./PromptInputActionMenuTrigger.svelte\";\nexport { default as PromptInputActionMenuContent } from \"./PromptInputActionMenuContent.svelte\";\nexport { default as PromptInputActionMenuItem } from \"./PromptInputActionMenuItem.svelte\";\nexport { default as PromptInputActionAddAttachments } from \"./PromptInputActionAddAttachments.svelte\";\n\n// Submit component\nexport { default as PromptInputSubmit } from \"./PromptInputSubmit.svelte\";\n\n// Model select components\nexport { default as PromptInputModelSelect } from \"./PromptInputModelSelect.svelte\";\nexport { default as PromptInputModelSelectTrigger } from \"./PromptInputModelSelectTrigger.svelte\";\nexport { default as PromptInputModelSelectContent } from \"./PromptInputModelSelectContent.svelte\";\nexport { default as PromptInputModelSelectItem } from \"./PromptInputModelSelectItem.svelte\";\nexport { default as PromptInputModelSelectValue } from \"./PromptInputModelSelectValue.svelte\";\n\n// Icon components\nexport { default as ImageIcon } from \"./ImageIcon.svelte\";\nexport { default as Loader2Icon } from \"./Loader2Icon.svelte\";\nexport { default as PaperclipIcon } from \"./PaperclipIcon.svelte\";\nexport { default as PlusIcon } from \"./PlusIcon.svelte\";\nexport { default as SendIcon } from \"./SendIcon.svelte\";\nexport { default as SquareIcon } from \"./SquareIcon.svelte\";\nexport { default as XIcon } from \"./XIcon.svelte\";\nexport { default as GlobeIcon } from \"./GlobeIcon.svelte\";\nexport { default as MicIcon } from \"./MicIcon.svelte\";\n\n// Context and types\nexport {\n\tAttachmentsContext,\n\tgetAttachmentsContext,\n\tsetAttachmentsContext,\n\tPromptInputController,\n\tTextInputController,\n\tgetPromptInputProvider,\n\tgetPromptInputController,\n\tsetPromptInputProvider,\n\ttype FileUIPart,\n\ttype FileWithId,\n\ttype PromptInputMessage,\n\ttype ChatStatus,\n} from \"./attachments-context.svelte.js\";\n",
			"type": "registry:file",
			"target": "ai-elements/prompt-input/index.ts"
		}
	]
}