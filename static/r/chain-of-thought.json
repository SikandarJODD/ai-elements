{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "chain-of-thought",
	"type": "registry:block",
	"description": "The ChainOfThought component provides a visual representation of an AI's reasoning process, showing step-by-step thinking with support for search results, images, and progress indicators. It helps users understand how AI arrives at conclusions.",
	"dependencies": [
		"ai",
		"@lucidesvelte"
	],
	"devDependencies": [
		"@lucide/svelte@^0.515.0"
	],
	"registryDependencies": [
		"badge",
		"collapsible"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$.js';\r\n\timport { Collapsible } from '$lib/components/ui/collapsible/index.js';\r\n\timport {\r\n\t\tChainOfThoughtContext,\r\n\t\tsetChainOfThoughtContext\r\n\t} from './chain-of-thought-context.svelte.js';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\tinterface ChainOfThoughtProps extends HTMLAttributes<HTMLDivElement> {\r\n\t\t/**\r\n\t\t * Whether the chain of thought is open (controlled)\r\n\t\t */\r\n\t\topen?: boolean;\r\n\t\t/**\r\n\t\t * Default open state (uncontrolled)\r\n\t\t */\r\n\t\tdefaultOpen?: boolean;\r\n\t\t/**\r\n\t\t * Callback when open state changes\r\n\t\t */\r\n\t\tonOpenChange?: (open: boolean) => void;\r\n\t\t/**\r\n\t\t * Children content\r\n\t\t */\r\n\t\tchildren: Snippet;\r\n\t\t/**\r\n\t\t * Additional CSS classes\r\n\t\t */\r\n\t\tclass?: string;\r\n\t}\r\n\r\n\tlet {\r\n\t\topen = $bindable(undefined),\r\n\t\tdefaultOpen = false,\r\n\t\tonOpenChange,\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: ChainOfThoughtProps = $props();\r\n\r\n\t// Create context instance with proper controllable state\r\n\tconst context = new ChainOfThoughtContext({\r\n\t\tisOpen: open !== undefined ? open : defaultOpen,\r\n\t\tonOpenChange\r\n\t});\r\n\r\n\t// Handle controlled mode synchronization\r\n\t$effect(() => {\r\n\t\tif (open !== undefined) {\r\n\t\t\tcontext.isOpen = open;\r\n\t\t}\r\n\t});\r\n\r\n\t// Set the context for child components\r\n\tsetChainOfThoughtContext(context);\r\n</script>\r\n\r\n<Collapsible open={context.isOpen} onOpenChange={context.setIsOpen}>\r\n\t<div class={cn('not-prose max-w-prose space-y-4', className)} {...restProps}>\r\n\t\t{@render children()}\r\n\t</div>\r\n</Collapsible>\r\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThought.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$.js';\r\n\timport { getChainOfThoughtContext } from './chain-of-thought-context.svelte.js';\r\n\timport { CollapsibleTrigger } from '$lib/components/ui/collapsible/index.js';\r\n\timport BrainIcon from '@lucide/svelte/icons/brain';\r\n\timport ChevronDownIcon from '@lucide/svelte/icons/chevron-down';\r\n\timport type { Snippet } from 'svelte';\r\n\r\n\tinterface ChainOfThoughtHeaderProps {\r\n\t\t/**\r\n\t\t * Children content (optional, defaults to \"Chain of Thought\")\r\n\t\t */\r\n\t\tchildren?: Snippet;\r\n\t\t/**\r\n\t\t * Additional CSS classes\r\n\t\t */\r\n\t\tclass?: string;\r\n\t}\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className\r\n\t}: ChainOfThoughtHeaderProps = $props();\r\n\r\n\tconst context = getChainOfThoughtContext();\r\n</script>\r\n\r\n<CollapsibleTrigger\r\n\tclass={cn(\r\n\t\t'flex w-full items-center gap-2 text-muted-foreground text-sm transition-colors hover:text-foreground',\r\n\t\tclassName\r\n\t)}\r\n>\r\n\t<BrainIcon class=\"size-4\" />\r\n\t<span class=\"flex-1 text-left\">\r\n\t\t{#if children}\r\n\t\t\t{@render children()}\r\n\t\t{:else}\r\n\t\t\tChain of Thought\r\n\t\t{/if}\r\n\t</span>\r\n\t<ChevronDownIcon\r\n\t\tclass={cn(\r\n\t\t\t'size-4 transition-transform',\r\n\t\t\tcontext.isOpen ? 'rotate-180' : 'rotate-0'\r\n\t\t)}\r\n\t/>\r\n</CollapsibleTrigger>",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$.js';\r\n\timport { getChainOfThoughtContext } from './chain-of-thought-context.svelte.js';\r\n\timport { CollapsibleContent } from '$lib/components/ui/collapsible/index.js';\r\n\timport type { Snippet } from 'svelte';\r\n\r\n\tinterface ChainOfThoughtContentProps {\r\n\t\t/**\r\n\t\t * Children content\r\n\t\t */\r\n\t\tchildren: Snippet;\r\n\t\t/**\r\n\t\t * Additional CSS classes\r\n\t\t */\r\n\t\tclass?: string;\r\n\t}\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className\r\n\t}: ChainOfThoughtContentProps = $props();\r\n\r\n\tconst context = getChainOfThoughtContext();\r\n</script>\r\n\r\n<CollapsibleContent\r\n\tclass={cn(\r\n\t\t'mt-2 space-y-3',\r\n\t\t'data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in',\r\n\t\tclassName\r\n\t)}\r\n>\r\n\t{@render children()}\r\n</CollapsibleContent>",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$.js\";\r\n  import { DotIcon, type Icon as IconType } from \"@lucide/svelte\";\r\n  import { getChainOfThoughtContext } from './chain-of-thought-context.svelte.js';\r\n  import type { Snippet } from \"svelte\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface ChainOfThoughtStepProps extends HTMLAttributes<HTMLDivElement> {\r\n    /**\r\n     * Icon component to display (defaults to DotIcon)\r\n     */\r\n    icon?: typeof IconType;\r\n    /**\r\n     * Label text for the step\r\n     */\r\n    label: string;\r\n    /**\r\n     * Optional description text\r\n     */\r\n    description?: string;\r\n    /**\r\n     * Status of the step\r\n     */\r\n    status?: \"complete\" | \"active\" | \"pending\";\r\n    /**\r\n     * Additional content\r\n     */\r\n    children?: Snippet;\r\n    /**\r\n     * Additional CSS classes\r\n     */\r\n    class?: string;\r\n    /**\r\n     * Animation delay in milliseconds (optional, auto-calculated if not provided)\r\n     */\r\n    delay?: number;\r\n  }\r\n\r\n  let {\r\n    icon: Icon = DotIcon,\r\n    label,\r\n    description,\r\n    status = \"complete\",\r\n    children,\r\n    class: className,\r\n    delay,\r\n    ...restProps\r\n  }: ChainOfThoughtStepProps = $props();\r\n\r\n  const context = getChainOfThoughtContext();\r\n  let isVisible = $state(false);\r\n  let element: HTMLDivElement;\r\n\r\n  const statusStyles = {\r\n    complete: \"text-muted-foreground\",\r\n    active: \"text-foreground\",\r\n    pending: \"text-muted-foreground/50\",\r\n  };\r\n\r\n  // Calculate step index based on DOM position\r\n  function getStepIndex(): number {\r\n    if (!element?.parentElement) return 0;\r\n    const steps = Array.from(element.parentElement.querySelectorAll('[data-chain-step]'));\r\n    return steps.indexOf(element);\r\n  }\r\n\r\n  // Handle animation when content opens/closes\r\n  $effect(() => {\r\n    if (context.isOpen) {\r\n      const stepIndex = getStepIndex();\r\n      const calculatedDelay = delay ?? stepIndex * 150; // 150ms between each step\r\n      const timer = setTimeout(() => {\r\n        isVisible = true;\r\n      }, calculatedDelay);\r\n\r\n      return () => clearTimeout(timer);\r\n    } else {\r\n      isVisible = false;\r\n    }\r\n  });\r\n</script>\r\n\r\n<div\r\n  bind:this={element}\r\n  data-chain-step\r\n  class={cn(\r\n    \"flex gap-2 text-sm transition-all duration-500 ease-out\",\r\n    statusStyles[status],\r\n    isVisible\r\n      ? \"opacity-100 translate-y-0\"\r\n      : \"opacity-0 translate-y-3\",\r\n    className\r\n  )}\r\n  {...restProps}\r\n>\r\n  <div class=\"relative mt-0.5\">\r\n    <Icon class=\"size-4\" />\r\n    <div class=\"-mx-px absolute top-7 bottom-0 left-1/2 w-px bg-border\"></div>\r\n  </div>\r\n  <div class=\"flex-1 space-y-2\">\r\n    <div>{label}</div>\r\n    {#if description}\r\n      <div class=\"text-muted-foreground text-xs\">{description}</div>\r\n    {/if}\r\n    {#if children}\r\n      {@render children()}\r\n    {/if}\r\n  </div>\r\n</div>\r\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtStep.svelte"
		},
		{
			"content": "import { getContext, setContext } from 'svelte';\r\n\r\nconst CHAIN_OF_THOUGHT_CONTEXT_KEY = 'chain-of-thought-context';\r\n\r\nexport class ChainOfThoughtContext {\r\n\t#isOpen = $state(false);\r\n\t#onOpenChange: ((open: boolean) => void) | undefined;\r\n\r\n\tconstructor(options: {\r\n\t\tisOpen?: boolean;\r\n\t\tonOpenChange?: (open: boolean) => void;\r\n\t} = {}) {\r\n\t\tthis.#isOpen = options.isOpen ?? false;\r\n\t\tthis.#onOpenChange = options.onOpenChange;\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\treturn this.#isOpen;\r\n\t}\r\n\r\n\tset isOpen(value: boolean) {\r\n\t\tthis.#isOpen = value;\r\n\t\tthis.#onOpenChange?.(value);\r\n\t}\r\n\r\n\tsetIsOpen = (open: boolean) => {\r\n\t\tthis.isOpen = open;\r\n\t};\r\n\r\n\ttoggle() {\r\n\t\tthis.isOpen = !this.isOpen;\r\n\t}\r\n}\r\n\r\nexport function setChainOfThoughtContext(context: ChainOfThoughtContext) {\r\n\tsetContext(CHAIN_OF_THOUGHT_CONTEXT_KEY, context);\r\n}\r\n\r\nexport function getChainOfThoughtContext(): ChainOfThoughtContext {\r\n\tconst context = getContext<ChainOfThoughtContext | undefined>(CHAIN_OF_THOUGHT_CONTEXT_KEY);\r\n\tif (!context) {\r\n\t\tthrow new Error('ChainOfThought components must be used within ChainOfThought');\r\n\t}\r\n\treturn context;\r\n}",
			"type": "registry:file",
			"target": "ai-elements/chain-of-thought/chain-of-thought-context.svelte.ts"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$.js';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\tinterface ChainOfThoughtImageProps extends HTMLAttributes<HTMLDivElement> {\r\n\t\t/**\r\n\t\t * Optional caption text for the image\r\n\t\t */\r\n\t\tcaption?: string;\r\n\t\t/**\r\n\t\t * Children content (typically an image element)\r\n\t\t */\r\n\t\tchildren: Snippet;\r\n\t\t/**\r\n\t\t * Additional CSS classes\r\n\t\t */\r\n\t\tclass?: string;\r\n\t}\r\n\r\n\tlet {\r\n\t\tcaption,\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: ChainOfThoughtImageProps = $props();\r\n</script>\r\n\r\n<div\r\n\tclass={cn('mt-2 space-y-2', className)}\r\n\t{...restProps}\r\n>\r\n\t<div class=\"relative flex max-h-[22rem] items-center justify-center overflow-hidden rounded-lg bg-muted p-3\">\r\n\t\t{@render children()}\r\n\t</div>\r\n\t{#if caption}\r\n\t\t<p class=\"text-muted-foreground text-xs\">{caption}</p>\r\n\t{/if}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtImage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport { Badge } from '$lib/components/ui/badge/index.js';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\tinterface ChainOfThoughtSearchResultProps extends HTMLAttributes<HTMLDivElement> {\r\n\t\t/**\r\n\t\t * Children content\r\n\t\t */\r\n\t\tchildren: Snippet;\r\n\t\t/**\r\n\t\t * Additional CSS classes\r\n\t\t */\r\n\t\tclass?: string;\r\n\t}\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: ChainOfThoughtSearchResultProps = $props();\r\n</script>\r\n\r\n<Badge\r\n\tclass={cn('gap-1 px-2 py-0.5 font-normal text-xs', className)}\r\n\tvariant=\"secondary\"\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</Badge>",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtSearchResult.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n\timport { cn } from '$UTILS$';\r\n\timport type { Snippet } from 'svelte';\r\n\timport type { HTMLAttributes } from 'svelte/elements';\r\n\r\n\tinterface ChainOfThoughtSearchResultsProps extends HTMLAttributes<HTMLDivElement> {\r\n\t\t/**\r\n\t\t * Children content\r\n\t\t */\r\n\t\tchildren: Snippet;\r\n\t\t/**\r\n\t\t * Additional CSS classes\r\n\t\t */\r\n\t\tclass?: string;\r\n\t}\r\n\r\n\tlet {\r\n\t\tchildren,\r\n\t\tclass: className,\r\n\t\t...restProps\r\n\t}: ChainOfThoughtSearchResultsProps = $props();\r\n</script>\r\n\r\n<div\r\n\tclass={cn('flex items-center gap-2', className)}\r\n\t{...restProps}\r\n>\r\n\t{@render children()}\r\n</div>",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtSearchResults.svelte"
		},
		{
			"content": "export { default as ChainOfThought } from './ChainOfThought.svelte';\r\nexport { default as ChainOfThoughtHeader } from './ChainOfThoughtHeader.svelte';\r\nexport { default as ChainOfThoughtStep } from './ChainOfThoughtStep.svelte';\r\nexport { default as ChainOfThoughtContent } from './ChainOfThoughtContent.svelte';\r\nexport { default as ChainOfThoughtSearchResults } from './ChainOfThoughtSearchResults.svelte';\r\nexport { default as ChainOfThoughtSearchResult } from './ChainOfThoughtSearchResult.svelte';\r\nexport { default as ChainOfThoughtImage } from './ChainOfThoughtImage.svelte';\r\n\r\nexport {\r\n\tChainOfThoughtContext,\r\n\tgetChainOfThoughtContext,\r\n\tsetChainOfThoughtContext\r\n} from './chain-of-thought-context.svelte.js';",
			"type": "registry:file",
			"target": "ai-elements/chain-of-thought/index.ts"
		}
	]
}