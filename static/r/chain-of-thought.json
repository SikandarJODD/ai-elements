{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "chain-of-thought",
	"title": "Chain of Thought",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The ChainOfThought component provides a visual representation of an AI's reasoning process, showing step-by-step thinking with support for search results, images, and progress indicators. It helps users understand how AI arrives at conclusions.",
	"dependencies": [
		"ai",
		"@lucide/svelte"
	],
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"badge",
		"collapsible"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { Collapsible } from \"$COMPONENTS$/ui/collapsible/index.js\";\n\timport {\n\t\tChainOfThoughtContext,\n\t\tsetChainOfThoughtContext,\n\t} from \"./chain-of-thought-context.svelte.js\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface ChainOfThoughtProps extends HTMLAttributes<HTMLDivElement> {\n\t\topen?: boolean;\n\t\tdefaultOpen?: boolean;\n\t\tonOpenChange?: (open: boolean) => void;\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t}\n\n\tlet {\n\t\topen = $bindable(undefined),\n\t\tdefaultOpen = false,\n\t\tonOpenChange,\n\t\tchildren,\n\t\tclass: className,\n\t\t...restProps\n\t}: ChainOfThoughtProps = $props();\n\n\t// Create context instance with proper controllable state\n\tconst context = new ChainOfThoughtContext({\n\t\tisOpen: open !== undefined ? open : defaultOpen,\n\t\tonOpenChange,\n\t});\n\n\t// Handle controlled mode synchronization\n\t$effect(() => {\n\t\tif (open !== undefined) {\n\t\t\tcontext.isOpen = open;\n\t\t}\n\t});\n\n\t// Set the context for child components\n\tsetChainOfThoughtContext(context);\n</script>\n\n<Collapsible open={context.isOpen} onOpenChange={context.setIsOpen}>\n\t<div class={cn(\"not-prose max-w-prose space-y-4\", className)} {...restProps}>\n\t\t{@render children()}\n\t</div>\n</Collapsible>\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThought.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getChainOfThoughtContext } from \"./chain-of-thought-context.svelte.js\";\n\timport { CollapsibleTrigger } from \"$COMPONENTS$/ui/collapsible/index.js\";\n\timport BrainIcon from \"@lucide/svelte/icons/brain\";\n\timport ChevronDownIcon from \"@lucide/svelte/icons/chevron-down\";\n\timport type { Snippet } from \"svelte\";\n\n\tinterface ChainOfThoughtHeaderProps {\n\t\tchildren?: Snippet;\n\t\tclass?: string;\n\t}\n\n\tlet { children, class: className }: ChainOfThoughtHeaderProps = $props();\n\n\tconst context = getChainOfThoughtContext();\n</script>\n\n<CollapsibleTrigger\n\tclass={cn(\n\t\t\"text-muted-foreground hover:text-foreground flex w-full items-center gap-2 text-sm transition-colors\",\n\t\tclassName\n\t)}\n>\n\t<BrainIcon class=\"size-4\" />\n\t<span class=\"flex-1 text-left\">\n\t\t{#if children}\n\t\t\t{@render children()}\n\t\t{:else}\n\t\t\tChain of Thought\n\t\t{/if}\n\t</span>\n\t<ChevronDownIcon\n\t\tclass={cn(\"size-4 transition-transform\", context.isOpen ? \"rotate-180\" : \"rotate-0\")}\n\t/>\n</CollapsibleTrigger>\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { getChainOfThoughtContext } from \"./chain-of-thought-context.svelte.js\";\n\timport { CollapsibleContent } from \"$COMPONENTS$/ui/collapsible/index.js\";\n\timport type { Snippet } from \"svelte\";\n\n\tinterface ChainOfThoughtContentProps {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t}\n\n\tlet { children, class: className }: ChainOfThoughtContentProps = $props();\n\n\tconst context = getChainOfThoughtContext();\n</script>\n\n<CollapsibleContent\n\tclass={cn(\n\t\t\"mt-2 space-y-3\",\n\t\t\"data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground data-[state=closed]:animate-out data-[state=open]:animate-in outline-none\",\n\t\tclassName\n\t)}\n>\n\t{@render children()}\n</CollapsibleContent>\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { type Icon as IconType } from \"@lucide/svelte\";\n\timport DotIcon from \"@lucide/svelte/icons/dot\";\n\timport { getChainOfThoughtContext } from \"./chain-of-thought-context.svelte.js\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface ChainOfThoughtStepProps extends HTMLAttributes<HTMLDivElement> {\n\t\ticon?: typeof IconType;\n\t\tlabel: string;\n\t\tdescription?: string;\n\t\tstatus?: \"complete\" | \"active\" | \"pending\";\n\t\tchildren?: Snippet;\n\t\tclass?: string;\n\t\tdelay?: number;\n\t}\n\n\tlet {\n\t\ticon: Icon = DotIcon,\n\t\tlabel,\n\t\tdescription,\n\t\tstatus = \"complete\",\n\t\tchildren,\n\t\tclass: className,\n\t\tdelay,\n\t\t...restProps\n\t}: ChainOfThoughtStepProps = $props();\n\n\tconst context = getChainOfThoughtContext();\n\tlet isVisible = $state(false);\n\tlet element: HTMLDivElement;\n\n\tconst statusStyles = {\n\t\tcomplete: \"text-muted-foreground\",\n\t\tactive: \"text-foreground\",\n\t\tpending: \"text-muted-foreground/50\",\n\t};\n\n\t// Calculate step index based on DOM position\n\tfunction getStepIndex(): number {\n\t\tif (!element?.parentElement) return 0;\n\t\tconst steps = Array.from(element.parentElement.querySelectorAll(\"[data-chain-step]\"));\n\t\treturn steps.indexOf(element);\n\t}\n\n\t// Handle animation when content opens/closes\n\t$effect(() => {\n\t\tif (context.isOpen) {\n\t\t\tconst stepIndex = getStepIndex();\n\t\t\tconst calculatedDelay = delay ?? stepIndex * 150; // 150ms between each step\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tisVisible = true;\n\t\t\t}, calculatedDelay);\n\n\t\t\treturn () => clearTimeout(timer);\n\t\t} else {\n\t\t\tisVisible = false;\n\t\t}\n\t});\n</script>\n\n<div\n\tbind:this={element}\n\tdata-chain-step\n\tclass={cn(\n\t\t\"flex gap-2 text-sm transition-all duration-500 ease-out\",\n\t\tstatusStyles[status],\n\t\tisVisible ? \"translate-y-0 opacity-100\" : \"translate-y-3 opacity-0\",\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t<div class=\"relative mt-0.5\">\n\t\t<Icon class=\"size-4\" />\n\t\t<div class=\"bg-border absolute top-7 bottom-0 left-1/2 -mx-px w-px\"></div>\n\t</div>\n\t<div class=\"flex-1 space-y-2\">\n\t\t<div>{label}</div>\n\t\t{#if description}\n\t\t\t<div class=\"text-muted-foreground text-xs\">{description}</div>\n\t\t{/if}\n\t\t{#if children}\n\t\t\t{@render children()}\n\t\t{/if}\n\t</div>\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtStep.svelte"
		},
		{
			"content": "import { getContext, setContext } from \"svelte\";\n\nconst CHAIN_OF_THOUGHT_CONTEXT_KEY = \"chain-of-thought-context\";\n\nexport class ChainOfThoughtContext {\n\t#isOpen = $state(false);\n\t#onOpenChange: ((open: boolean) => void) | undefined;\n\n\tconstructor(\n\t\toptions: {\n\t\t\tisOpen?: boolean;\n\t\t\tonOpenChange?: (open: boolean) => void;\n\t\t} = {}\n\t) {\n\t\tthis.#isOpen = options.isOpen ?? false;\n\t\tthis.#onOpenChange = options.onOpenChange;\n\t}\n\n\tget isOpen() {\n\t\treturn this.#isOpen;\n\t}\n\n\tset isOpen(value: boolean) {\n\t\tthis.#isOpen = value;\n\t\tthis.#onOpenChange?.(value);\n\t}\n\n\tsetIsOpen = (open: boolean) => {\n\t\tthis.isOpen = open;\n\t};\n\n\ttoggle() {\n\t\tthis.isOpen = !this.isOpen;\n\t}\n}\n\nexport function setChainOfThoughtContext(context: ChainOfThoughtContext) {\n\tsetContext(CHAIN_OF_THOUGHT_CONTEXT_KEY, context);\n}\n\nexport function getChainOfThoughtContext(): ChainOfThoughtContext {\n\tconst context = getContext<ChainOfThoughtContext | undefined>(CHAIN_OF_THOUGHT_CONTEXT_KEY);\n\tif (!context) {\n\t\tthrow new Error(\"ChainOfThought components must be used within ChainOfThought\");\n\t}\n\treturn context;\n}\n",
			"type": "registry:file",
			"target": "ai-elements/chain-of-thought/chain-of-thought-context.svelte.ts"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface ChainOfThoughtImageProps extends HTMLAttributes<HTMLDivElement> {\n\t\tcaption?: string;\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t}\n\n\tlet { caption, children, class: className, ...restProps }: ChainOfThoughtImageProps = $props();\n</script>\n\n<div class={cn(\"mt-2 space-y-2\", className)} {...restProps}>\n\t<div\n\t\tclass=\"bg-muted relative flex max-h-[22rem] items-center justify-center overflow-hidden rounded-lg p-3\"\n\t>\n\t\t{@render children()}\n\t</div>\n\t{#if caption}\n\t\t<p class=\"text-muted-foreground text-xs\">{caption}</p>\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtImage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport { Badge } from \"$COMPONENTS$/ui/badge/index.js\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface ChainOfThoughtSearchResultProps extends HTMLAttributes<HTMLElement> {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t}\n\n\tlet { children, class: className, ...restProps }: ChainOfThoughtSearchResultProps = $props();\n</script>\n\n<Badge\n\tclass={cn(\"gap-1 px-2 py-0.5 text-xs font-normal\", className)}\n\tvariant=\"secondary\"\n\t{...restProps}\n>\n\t{@render children()}\n</Badge>\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtSearchResult.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface ChainOfThoughtSearchResultsProps extends HTMLAttributes<HTMLDivElement> {\n\t\tchildren: Snippet;\n\t\tclass?: string;\n\t}\n\n\tlet { children, class: className, ...restProps }: ChainOfThoughtSearchResultsProps = $props();\n</script>\n\n<div class={cn(\"flex items-center gap-2\", className)} {...restProps}>\n\t{@render children()}\n</div>\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtSearchResults.svelte"
		},
		{
			"content": "export { default as ChainOfThought } from \"./ChainOfThought.svelte\";\nexport { default as ChainOfThoughtHeader } from \"./ChainOfThoughtHeader.svelte\";\nexport { default as ChainOfThoughtStep } from \"./ChainOfThoughtStep.svelte\";\nexport { default as ChainOfThoughtContent } from \"./ChainOfThoughtContent.svelte\";\nexport { default as ChainOfThoughtSearchResults } from \"./ChainOfThoughtSearchResults.svelte\";\nexport { default as ChainOfThoughtSearchResult } from \"./ChainOfThoughtSearchResult.svelte\";\nexport { default as ChainOfThoughtImage } from \"./ChainOfThoughtImage.svelte\";\n\nexport {\n\tChainOfThoughtContext,\n\tgetChainOfThoughtContext,\n\tsetChainOfThoughtContext,\n} from \"./chain-of-thought-context.svelte.js\";\n",
			"type": "registry:file",
			"target": "ai-elements/chain-of-thought/index.ts"
		}
	]
}