{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "chain-of-thought",
	"title": "Chain of Thought",
	"type": "registry:block",
	"author": "SikandarJODD",
	"description": "The ChainOfThought component provides a visual representation of an AI's reasoning process, showing step-by-step thinking with support for search results, images, and progress indicators. It helps users understand how AI arrives at conclusions.",
	"dependencies": [
		"ai",
		"@lucide/svelte"
	],
	"devDependencies": [
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"badge",
		"collapsible"
	],
	"meta": {
		"author": "SikandarJODD"
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { Collapsible } from \"$COMPONENTS$/ui/collapsible/index.js\";\r\n  import {\r\n    ChainOfThoughtContext,\r\n    setChainOfThoughtContext,\r\n  } from \"./chain-of-thought-context.svelte.js\";\r\n  import type { Snippet } from \"svelte\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface ChainOfThoughtProps extends HTMLAttributes<HTMLDivElement> {\r\n    open?: boolean;\r\n    defaultOpen?: boolean;\r\n    onOpenChange?: (open: boolean) => void;\r\n    children: Snippet;\r\n    class?: string;\r\n  }\r\n\r\n  let {\r\n    open = $bindable(undefined),\r\n    defaultOpen = false,\r\n    onOpenChange,\r\n    children,\r\n    class: className,\r\n    ...restProps\r\n  }: ChainOfThoughtProps = $props();\r\n\r\n  // Create context instance with proper controllable state\r\n  const context = new ChainOfThoughtContext({\r\n    isOpen: open !== undefined ? open : defaultOpen,\r\n    onOpenChange,\r\n  });\r\n\r\n  // Handle controlled mode synchronization\r\n  $effect(() => {\r\n    if (open !== undefined) {\r\n      context.isOpen = open;\r\n    }\r\n  });\r\n\r\n  // Set the context for child components\r\n  setChainOfThoughtContext(context);\r\n</script>\r\n\r\n<Collapsible open={context.isOpen} onOpenChange={context.setIsOpen}>\r\n  <div class={cn(\"not-prose max-w-prose space-y-4\", className)} {...restProps}>\r\n    {@render children()}\r\n  </div>\r\n</Collapsible>\r\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThought.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { getChainOfThoughtContext } from \"./chain-of-thought-context.svelte.js\";\r\n  import { CollapsibleTrigger } from \"$COMPONENTS$/ui/collapsible/index.js\";\r\n  import BrainIcon from \"@lucide/svelte/icons/brain\";\r\n  import ChevronDownIcon from \"@lucide/svelte/icons/chevron-down\";\r\n  import type { Snippet } from \"svelte\";\r\n\r\n  interface ChainOfThoughtHeaderProps {\r\n    children?: Snippet;\r\n    class?: string;\r\n  }\r\n\r\n  let { children, class: className }: ChainOfThoughtHeaderProps = $props();\r\n\r\n  const context = getChainOfThoughtContext();\r\n</script>\r\n\r\n<CollapsibleTrigger\r\n  class={cn(\r\n    \"flex w-full items-center gap-2 text-muted-foreground text-sm transition-colors hover:text-foreground\",\r\n    className\r\n  )}\r\n>\r\n  <BrainIcon class=\"size-4\" />\r\n  <span class=\"flex-1 text-left\">\r\n    {#if children}\r\n      {@render children()}\r\n    {:else}\r\n      Chain of Thought\r\n    {/if}\r\n  </span>\r\n  <ChevronDownIcon\r\n    class={cn(\r\n      \"size-4 transition-transform\",\r\n      context.isOpen ? \"rotate-180\" : \"rotate-0\"\r\n    )}\r\n  />\r\n</CollapsibleTrigger>\r\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtHeader.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { getChainOfThoughtContext } from \"./chain-of-thought-context.svelte.js\";\r\n  import { CollapsibleContent } from \"$COMPONENTS$/ui/collapsible/index.js\";\r\n  import type { Snippet } from \"svelte\";\r\n\r\n  interface ChainOfThoughtContentProps {\r\n    children: Snippet;\r\n    class?: string;\r\n  }\r\n\r\n  let { children, class: className }: ChainOfThoughtContentProps = $props();\r\n\r\n  const context = getChainOfThoughtContext();\r\n</script>\r\n\r\n<CollapsibleContent\r\n  class={cn(\r\n    \"mt-2 space-y-3\",\r\n    \"data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in\",\r\n    className\r\n  )}\r\n>\r\n  {@render children()}\r\n</CollapsibleContent>\r\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtContent.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { type Icon as IconType } from \"@lucide/svelte\";\r\n  import DotIcon from \"@lucide/svelte/icons/dot\";\r\n  import { getChainOfThoughtContext } from \"./chain-of-thought-context.svelte.js\";\r\n  import type { Snippet } from \"svelte\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface ChainOfThoughtStepProps extends HTMLAttributes<HTMLDivElement> {\r\n    icon?: typeof IconType;\r\n    label: string;\r\n    description?: string;\r\n    status?: \"complete\" | \"active\" | \"pending\";\r\n    children?: Snippet;\r\n    class?: string;\r\n    delay?: number;\r\n  }\r\n\r\n  let {\r\n    icon: Icon = DotIcon,\r\n    label,\r\n    description,\r\n    status = \"complete\",\r\n    children,\r\n    class: className,\r\n    delay,\r\n    ...restProps\r\n  }: ChainOfThoughtStepProps = $props();\r\n\r\n  const context = getChainOfThoughtContext();\r\n  let isVisible = $state(false);\r\n  let element: HTMLDivElement;\r\n\r\n  const statusStyles = {\r\n    complete: \"text-muted-foreground\",\r\n    active: \"text-foreground\",\r\n    pending: \"text-muted-foreground/50\",\r\n  };\r\n\r\n  // Calculate step index based on DOM position\r\n  function getStepIndex(): number {\r\n    if (!element?.parentElement) return 0;\r\n    const steps = Array.from(\r\n      element.parentElement.querySelectorAll(\"[data-chain-step]\")\r\n    );\r\n    return steps.indexOf(element);\r\n  }\r\n\r\n  // Handle animation when content opens/closes\r\n  $effect(() => {\r\n    if (context.isOpen) {\r\n      const stepIndex = getStepIndex();\r\n      const calculatedDelay = delay ?? stepIndex * 150; // 150ms between each step\r\n      const timer = setTimeout(() => {\r\n        isVisible = true;\r\n      }, calculatedDelay);\r\n\r\n      return () => clearTimeout(timer);\r\n    } else {\r\n      isVisible = false;\r\n    }\r\n  });\r\n</script>\r\n\r\n<div\r\n  bind:this={element}\r\n  data-chain-step\r\n  class={cn(\r\n    \"flex gap-2 text-sm transition-all duration-500 ease-out\",\r\n    statusStyles[status],\r\n    isVisible ? \"opacity-100 translate-y-0\" : \"opacity-0 translate-y-3\",\r\n    className\r\n  )}\r\n  {...restProps}\r\n>\r\n  <div class=\"relative mt-0.5\">\r\n    <Icon class=\"size-4\" />\r\n    <div class=\"-mx-px absolute top-7 bottom-0 left-1/2 w-px bg-border\"></div>\r\n  </div>\r\n  <div class=\"flex-1 space-y-2\">\r\n    <div>{label}</div>\r\n    {#if description}\r\n      <div class=\"text-muted-foreground text-xs\">{description}</div>\r\n    {/if}\r\n    {#if children}\r\n      {@render children()}\r\n    {/if}\r\n  </div>\r\n</div>\r\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtStep.svelte"
		},
		{
			"content": "import { getContext, setContext } from 'svelte';\r\n\r\nconst CHAIN_OF_THOUGHT_CONTEXT_KEY = 'chain-of-thought-context';\r\n\r\nexport class ChainOfThoughtContext {\r\n\t#isOpen = $state(false);\r\n\t#onOpenChange: ((open: boolean) => void) | undefined;\r\n\r\n\tconstructor(options: {\r\n\t\tisOpen?: boolean;\r\n\t\tonOpenChange?: (open: boolean) => void;\r\n\t} = {}) {\r\n\t\tthis.#isOpen = options.isOpen ?? false;\r\n\t\tthis.#onOpenChange = options.onOpenChange;\r\n\t}\r\n\r\n\tget isOpen() {\r\n\t\treturn this.#isOpen;\r\n\t}\r\n\r\n\tset isOpen(value: boolean) {\r\n\t\tthis.#isOpen = value;\r\n\t\tthis.#onOpenChange?.(value);\r\n\t}\r\n\r\n\tsetIsOpen = (open: boolean) => {\r\n\t\tthis.isOpen = open;\r\n\t};\r\n\r\n\ttoggle() {\r\n\t\tthis.isOpen = !this.isOpen;\r\n\t}\r\n}\r\n\r\nexport function setChainOfThoughtContext(context: ChainOfThoughtContext) {\r\n\tsetContext(CHAIN_OF_THOUGHT_CONTEXT_KEY, context);\r\n}\r\n\r\nexport function getChainOfThoughtContext(): ChainOfThoughtContext {\r\n\tconst context = getContext<ChainOfThoughtContext | undefined>(CHAIN_OF_THOUGHT_CONTEXT_KEY);\r\n\tif (!context) {\r\n\t\tthrow new Error('ChainOfThought components must be used within ChainOfThought');\r\n\t}\r\n\treturn context;\r\n}",
			"type": "registry:file",
			"target": "ai-elements/chain-of-thought/chain-of-thought-context.svelte.ts"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import type { Snippet } from \"svelte\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface ChainOfThoughtImageProps extends HTMLAttributes<HTMLDivElement> {\r\n    caption?: string;\r\n    children: Snippet;\r\n    class?: string;\r\n  }\r\n\r\n  let {\r\n    caption,\r\n    children,\r\n    class: className,\r\n    ...restProps\r\n  }: ChainOfThoughtImageProps = $props();\r\n</script>\r\n\r\n<div class={cn(\"mt-2 space-y-2\", className)} {...restProps}>\r\n  <div\r\n    class=\"relative flex max-h-[22rem] items-center justify-center overflow-hidden rounded-lg bg-muted p-3\"\r\n  >\r\n    {@render children()}\r\n  </div>\r\n  {#if caption}\r\n    <p class=\"text-muted-foreground text-xs\">{caption}</p>\r\n  {/if}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtImage.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import { Badge } from \"$COMPONENTS$/ui/badge/index.js\";\r\n  import type { Snippet } from \"svelte\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface ChainOfThoughtSearchResultProps\r\n    extends HTMLAttributes<HTMLDivElement> {\r\n    children: Snippet;\r\n    class?: string;\r\n  }\r\n\r\n  let {\r\n    children,\r\n    class: className,\r\n    ...restProps\r\n  }: ChainOfThoughtSearchResultProps = $props();\r\n</script>\r\n\r\n<Badge\r\n  class={cn(\"gap-1 px-2 py-0.5 font-normal text-xs\", className)}\r\n  variant=\"secondary\"\r\n  {...restProps}\r\n>\r\n  {@render children()}\r\n</Badge>\r\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtSearchResult.svelte"
		},
		{
			"content": "<script lang=\"ts\">\r\n  import { cn } from \"$UTILS$\";\r\n  import type { Snippet } from \"svelte\";\r\n  import type { HTMLAttributes } from \"svelte/elements\";\r\n\r\n  interface ChainOfThoughtSearchResultsProps\r\n    extends HTMLAttributes<HTMLDivElement> {\r\n    children: Snippet;\r\n    class?: string;\r\n  }\r\n\r\n  let {\r\n    children,\r\n    class: className,\r\n    ...restProps\r\n  }: ChainOfThoughtSearchResultsProps = $props();\r\n</script>\r\n\r\n<div class={cn(\"flex items-center gap-2\", className)} {...restProps}>\r\n  {@render children()}\r\n</div>\r\n",
			"type": "registry:component",
			"target": "ai-elements/chain-of-thought/ChainOfThoughtSearchResults.svelte"
		},
		{
			"content": "export { default as ChainOfThought } from './ChainOfThought.svelte';\r\nexport { default as ChainOfThoughtHeader } from './ChainOfThoughtHeader.svelte';\r\nexport { default as ChainOfThoughtStep } from './ChainOfThoughtStep.svelte';\r\nexport { default as ChainOfThoughtContent } from './ChainOfThoughtContent.svelte';\r\nexport { default as ChainOfThoughtSearchResults } from './ChainOfThoughtSearchResults.svelte';\r\nexport { default as ChainOfThoughtSearchResult } from './ChainOfThoughtSearchResult.svelte';\r\nexport { default as ChainOfThoughtImage } from './ChainOfThoughtImage.svelte';\r\n\r\nexport {\r\n\tChainOfThoughtContext,\r\n\tgetChainOfThoughtContext,\r\n\tsetChainOfThoughtContext\r\n} from './chain-of-thought-context.svelte.js';",
			"type": "registry:file",
			"target": "ai-elements/chain-of-thought/index.ts"
		}
	]
}