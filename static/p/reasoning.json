{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "reasoning",
	"type": "registry:block",
	"description": "The Reasoning component displays AI reasoning and thinking process with collapsible content. Features trigger, content, and context management for showing step-by-step AI reasoning in responses.",
	"dependencies": ["runed@^0.31.1"],
	"devDependencies": ["@lucide/svelte@^0.544.0"],
	"registryDependencies": ["collapsible", "button"],
	"meta": {
		"author": "SikandarJODD",
		"version": "1.0.0",
		"tags": ["prompt-kit", "reasoning", "thinking", "ai-process", "collapsible"],
		"category": "Prompt Kit",
		"documentation": "https://svelte-ai-elements.vercel.app//prompt-kit/reasoning",
		"repository": "https://github.com/SikandarJODD/ai-elements",
		"complexity": "intermediate",
		"updated": "2025-10-19",
		"featured": true
	},
	"files": [
		{
			"content": "<script lang=\"ts\">\n\timport { setContext } from \"svelte\";\n\timport { createReasoningContext } from \"./reasoning-context.svelte.js\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface Props extends HTMLAttributes<HTMLDivElement> {\n\t\tchildren: Snippet;\n\t\topen?: boolean;\n\t\tonOpenChange?: (open: boolean) => void;\n\t\tisStreaming?: boolean;\n\t}\n\n\tlet {\n\t\tchildren,\n\t\tclass: className,\n\t\topen = $bindable(),\n\t\tonOpenChange,\n\t\tisStreaming = false,\n\t\t...rest\n\t}: Props = $props();\n\n\tconst context = createReasoningContext(open, onOpenChange, isStreaming);\n\tsetContext(\"reasoning\", context);\n\n\t// Bind context state to open prop if controlled\n\t$effect(() => {\n\t\tif (open !== undefined) {\n\t\t\tcontext.setOpen(open);\n\t\t}\n\t});\n\n\t// Handle streaming auto-open/close\n\t$effect(() => {\n\t\tif (isStreaming && !context.wasAutoOpened) {\n\t\t\tcontext.setOpen(true);\n\t\t\tcontext.wasAutoOpened = true;\n\t\t}\n\n\t\tif (!isStreaming && context.wasAutoOpened) {\n\t\t\tcontext.setOpen(false);\n\t\t\tcontext.wasAutoOpened = false;\n\t\t}\n\t});\n</script>\n\n<div class={className} {...rest}>\n\t{@render children()}\n</div>\n",
			"type": "registry:component",
			"target": "prompt-kit/reasoning/reasoning.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { ChevronDown } from \"@lucide/svelte\";\n\timport { getReasoningContext } from \"./reasoning-context.svelte.js\";\n\timport { cn } from \"$UTILS$\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLButtonAttributes } from \"svelte/elements\";\n\n\tinterface Props extends HTMLButtonAttributes {\n\t\tchildren: Snippet;\n\t}\n\n\tlet { children, class: className, onclick, ...rest }: Props = $props();\n\n\tconst context = getReasoningContext();\n\n\tfunction handleClick(e: MouseEvent & { currentTarget: EventTarget & HTMLButtonElement }) {\n\t\tcontext.toggle();\n\t\tonclick?.(e);\n\t}\n</script>\n\n<button\n\tclass={cn(\"flex cursor-pointer items-center gap-2\", className)}\n\tonclick={handleClick}\n\t{...rest}\n>\n\t<span class=\"text-primary\">\n\t\t{@render children()}\n\t</span>\n\t<div class={cn(\"transform transition-transform\", context.isOpen ? \"rotate-180\" : \"\")}>\n\t\t<ChevronDown class=\"size-4\" />\n\t</div>\n</button>\n",
			"type": "registry:component",
			"target": "prompt-kit/reasoning/reasoning-trigger.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { getReasoningContext } from \"./reasoning-context.svelte.js\";\n\timport { cn } from \"$UTILS$\";\n\timport { watch } from \"runed\";\n\timport type { Snippet } from \"svelte\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\n\tinterface Props {\n\t\tchildren: Snippet | string;\n\t\tclass?: string;\n\t\tcontentClassName?: string;\n\t\tmarkdown?: boolean;\n\t\t[key: string]: any;\n\t}\n\n\tlet {\n\t\tchildren,\n\t\tclass: className,\n\t\tcontentClassName,\n\t\tmarkdown = false,\n\t\t...rest\n\t}: Props = $props();\n\n\tconst context = getReasoningContext();\n\n\tlet contentRef: HTMLDivElement | undefined = $state();\n\tlet innerRef: HTMLDivElement | undefined = $state();\n\n\t// Watch for isOpen changes and resize observer\n\twatch(\n\t\t() => [context.isOpen, innerRef] as const,\n\t\t([isOpen, inner]) => {\n\t\t\tif (!contentRef || !inner) return;\n\n\t\t\tconst observer = new ResizeObserver(() => {\n\t\t\t\tif (contentRef && inner && isOpen) {\n\t\t\t\t\tcontentRef.style.maxHeight = `${inner.scrollHeight}px`;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tobserver.observe(inner);\n\n\t\t\tif (isOpen) {\n\t\t\t\tcontentRef.style.maxHeight = `${inner.scrollHeight}px`;\n\t\t\t}\n\n\t\t\treturn () => observer.disconnect();\n\t\t}\n\t);\n\n\t// Compute max height reactively\n\tlet maxHeight = $derived(context.isOpen && contentRef ? `${contentRef.scrollHeight}px` : \"0px\");\n</script>\n\n<div\n\tbind:this={contentRef}\n\tclass={cn(\"overflow-hidden transition-[max-height] duration-150 ease-out\", className)}\n\tstyle:max-height={maxHeight}\n\t{...rest}\n>\n\t<div\n\t\tbind:this={innerRef}\n\t\tclass={cn(\"text-muted-foreground prose prose-sm dark:prose-invert\", contentClassName)}\n\t>\n\t\t{#if markdown && typeof children === \"string\"}\n\t\t\t<!-- TODO: Add Markdown component if available -->\n\t\t\t{@html children}\n\t\t{:else if typeof children === \"function\"}\n\t\t\t{@render children()}\n\t\t{:else}\n\t\t\t{children}\n\t\t{/if}\n\t</div>\n</div>\n",
			"type": "registry:component",
			"target": "prompt-kit/reasoning/reasoning-content.svelte"
		},
		{
			"content": "import { getContext } from \"svelte\";\n\nclass ReasoningContext {\n\tprivate _isOpen = $state(false);\n\tprivate _onOpenChange?: (open: boolean) => void;\n\tprivate _isControlled = false;\n\twasAutoOpened = $state(false);\n\n\tconstructor(open?: boolean, onOpenChange?: (open: boolean) => void, isStreaming?: boolean) {\n\t\tthis._isControlled = open !== undefined;\n\t\tthis._isOpen = open ?? false;\n\t\tthis._onOpenChange = onOpenChange;\n\t}\n\n\tget isOpen() {\n\t\treturn this._isOpen;\n\t}\n\n\tsetOpen(newOpen: boolean) {\n\t\tif (!this._isControlled) {\n\t\t\tthis._isOpen = newOpen;\n\t\t}\n\t\tthis._onOpenChange?.(newOpen);\n\t}\n\n\ttoggle() {\n\t\tthis.setOpen(!this._isOpen);\n\t}\n}\n\nexport function createReasoningContext(\n\topen?: boolean,\n\tonOpenChange?: (open: boolean) => void,\n\tisStreaming?: boolean\n) {\n\treturn new ReasoningContext(open, onOpenChange, isStreaming);\n}\n\nexport function getReasoningContext(): ReasoningContext {\n\tconst context = getContext<ReasoningContext>(\"reasoning\");\n\tif (!context) {\n\t\tthrow new Error(\"getReasoningContext must be used within a Reasoning component\");\n\t}\n\treturn context;\n}\n",
			"type": "registry:file",
			"target": "prompt-kit/reasoning/reasoning-context.svelte.ts"
		},
		{
			"content": "export { default as Reasoning } from \"./reasoning.svelte\";\nexport { default as ReasoningTrigger } from \"./reasoning-trigger.svelte\";\nexport { default as ReasoningContent } from \"./reasoning-content.svelte\";\nexport { createReasoningContext, getReasoningContext } from \"./reasoning-context.svelte.js\";\n",
			"type": "registry:file",
			"target": "prompt-kit/reasoning/index.ts"
		}
	]
}
